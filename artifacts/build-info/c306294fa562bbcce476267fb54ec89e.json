{"id":"c306294fa562bbcce476267fb54ec89e","_format":"hh-sol-build-info-1","solcVersion":"0.8.4","solcLongVersion":"0.8.4+commit.c7e474f2","input":{"language":"Solidity","sources":{"contracts/Drip.sol":{"content":"pragma solidity >=0.8.0;\n\nimport { ERC4626 } from '@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol';\nimport { IERC20Metadata } from '@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol';\nimport { ERC20 } from '@openzeppelin/contracts/token/ERC20/ERC20.sol';\nimport { IERC20 } from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\n\ncontract DRIP is ERC4626 {\n  address constant renbtc = 0xEB4C2781e4ebA804CE9a9803C67d0893436bB27D;\n\n  constructor() ERC4626(IERC20Metadata(renbtc)) ERC20(\"DRIP\", \"DRIP\") {}\n\n  function deposit(uint256 assets, address receiver, uint256 minOut) public returns (uint256 result) {\n    uint256 balance = balanceOf(receiver);\n\n    super.deposit(assets, receiver);\n    result = balanceOf(receiver) - balance;\n\n    require(result >= minOut, \"Too little received\");\n  }\n\n  function withdraw(uint256 assets, address receiver, address owner, uint256 minOut) public returns (uint256 result) {\n    uint256 balance = IERC20(renbtc).balanceOf(receiver);\n\n    super.withdraw(assets, receiver, owner);\n    result = IERC20(renbtc).balanceOf(receiver) - balance;\n\n    require(result >= minOut, \"Too little received\");\n  }\n\n  function mint(uint256 shares, address receiver, uint256 minOut) public returns (uint256 result) {\n    uint256 balance = balanceOf(receiver);\n\n    super.mint(shares, receiver);\n    result = balanceOf(receiver) - balance;\n\n    require(result >= minOut, \"Too little received\");\n  }\n\n  function redeem(uint256 shares, address receiver, address owner, uint256 minOut) public returns (uint256 result) {\n    uint256 balance = IERC20(renbtc).balanceOf(receiver);\n\n    super.redeem(shares, receiver, owner);\n    result = IERC20(renbtc).balanceOf(receiver) - balance;\n\n    require(result >= minOut, \"Too little received\");\n  }\n\n  // returns total number of assets\n  // function totalAssets() public view override returns(uint256) {\n  //   return asset.balanceOf(address(this));\n  // }\n\n  // TODO: _deposit and _withdraw need to interact with curve tricrypto2 to stake and unstake\n  // TODO: make new mint and redeem functions that include minout\n\n\n}"},"@openzeppelin/contracts/token/ERC20/ERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n        }\n        _balances[to] += amount;\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"},"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"},"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/extensions/ERC4626.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC20.sol\";\nimport \"../utils/SafeERC20.sol\";\nimport \"../../../interfaces/IERC4626.sol\";\nimport \"../../../utils/math/Math.sol\";\n\n/**\n * @dev Implementation of the ERC4626 \"Tokenized Vault Standard\" as defined in\n * https://eips.ethereum.org/EIPS/eip-4626[EIP-4626].\n *\n * This extension allows the minting and burning of \"shares\" (represented using the ERC20 inheritance) in exchange for\n * underlying \"assets\" through standardized {deposit}, {mint}, {redeem} and {burn} workflows. This contract extends\n * the ERC20 standard. Any additional extensions included along it would affect the \"shares\" token represented by this\n * contract and not the \"assets\" token which is an independent contract.\n *\n * CAUTION: Deposits and withdrawals may incur unexpected slippage. Users should verify that the amount received of\n * shares or assets is as expected. EOAs should operate through a wrapper that performs these checks such as\n * https://github.com/fei-protocol/ERC4626#erc4626router-and-base[ERC4626Router].\n *\n * _Available since v4.7._\n */\nabstract contract ERC4626 is ERC20, IERC4626 {\n    using Math for uint256;\n\n    IERC20Metadata private immutable _asset;\n\n    /**\n     * @dev Set the underlying asset contract. This must be an ERC20-compatible contract (ERC20 or ERC777).\n     */\n    constructor(IERC20Metadata asset_) {\n        _asset = asset_;\n    }\n\n    /** @dev See {IERC4262-asset}. */\n    function asset() public view virtual override returns (address) {\n        return address(_asset);\n    }\n\n    /** @dev See {IERC4262-totalAssets}. */\n    function totalAssets() public view virtual override returns (uint256) {\n        return _asset.balanceOf(address(this));\n    }\n\n    /** @dev See {IERC4262-convertToShares}. */\n    function convertToShares(uint256 assets) public view virtual override returns (uint256 shares) {\n        return _convertToShares(assets, Math.Rounding.Down);\n    }\n\n    /** @dev See {IERC4262-convertToAssets}. */\n    function convertToAssets(uint256 shares) public view virtual override returns (uint256 assets) {\n        return _convertToAssets(shares, Math.Rounding.Down);\n    }\n\n    /** @dev See {IERC4262-maxDeposit}. */\n    function maxDeposit(address) public view virtual override returns (uint256) {\n        return _isVaultCollateralized() ? type(uint256).max : 0;\n    }\n\n    /** @dev See {IERC4262-maxMint}. */\n    function maxMint(address) public view virtual override returns (uint256) {\n        return type(uint256).max;\n    }\n\n    /** @dev See {IERC4262-maxWithdraw}. */\n    function maxWithdraw(address owner) public view virtual override returns (uint256) {\n        return _convertToAssets(balanceOf(owner), Math.Rounding.Down);\n    }\n\n    /** @dev See {IERC4262-maxRedeem}. */\n    function maxRedeem(address owner) public view virtual override returns (uint256) {\n        return balanceOf(owner);\n    }\n\n    /** @dev See {IERC4262-previewDeposit}. */\n    function previewDeposit(uint256 assets) public view virtual override returns (uint256) {\n        return _convertToShares(assets, Math.Rounding.Down);\n    }\n\n    /** @dev See {IERC4262-previewMint}. */\n    function previewMint(uint256 shares) public view virtual override returns (uint256) {\n        return _convertToAssets(shares, Math.Rounding.Up);\n    }\n\n    /** @dev See {IERC4262-previewWithdraw}. */\n    function previewWithdraw(uint256 assets) public view virtual override returns (uint256) {\n        return _convertToShares(assets, Math.Rounding.Up);\n    }\n\n    /** @dev See {IERC4262-previewRedeem}. */\n    function previewRedeem(uint256 shares) public view virtual override returns (uint256) {\n        return _convertToAssets(shares, Math.Rounding.Down);\n    }\n\n    /** @dev See {IERC4262-deposit}. */\n    function deposit(uint256 assets, address receiver) public virtual override returns (uint256) {\n        require(assets <= maxDeposit(receiver), \"ERC4626: deposit more than max\");\n\n        uint256 shares = previewDeposit(assets);\n        _deposit(_msgSender(), receiver, assets, shares);\n\n        return shares;\n    }\n\n    /** @dev See {IERC4262-mint}. */\n    function mint(uint256 shares, address receiver) public virtual override returns (uint256) {\n        require(shares <= maxMint(receiver), \"ERC4626: mint more than max\");\n\n        uint256 assets = previewMint(shares);\n        _deposit(_msgSender(), receiver, assets, shares);\n\n        return assets;\n    }\n\n    /** @dev See {IERC4262-withdraw}. */\n    function withdraw(\n        uint256 assets,\n        address receiver,\n        address owner\n    ) public virtual override returns (uint256) {\n        require(assets <= maxWithdraw(owner), \"ERC4626: withdraw more than max\");\n\n        uint256 shares = previewWithdraw(assets);\n        _withdraw(_msgSender(), receiver, owner, assets, shares);\n\n        return shares;\n    }\n\n    /** @dev See {IERC4262-redeem}. */\n    function redeem(\n        uint256 shares,\n        address receiver,\n        address owner\n    ) public virtual override returns (uint256) {\n        require(shares <= maxRedeem(owner), \"ERC4626: redeem more than max\");\n\n        uint256 assets = previewRedeem(shares);\n        _withdraw(_msgSender(), receiver, owner, assets, shares);\n\n        return assets;\n    }\n\n    /**\n     * @dev Internal conversion function (from assets to shares) with support for rounding direction.\n     *\n     * Will revert if assets > 0, totalSupply > 0 and totalAssets = 0. That corresponds to a case where any asset\n     * would represent an infinite amout of shares.\n     */\n    function _convertToShares(uint256 assets, Math.Rounding rounding) internal view virtual returns (uint256 shares) {\n        uint256 supply = totalSupply();\n        return\n            (assets == 0 || supply == 0)\n                ? assets.mulDiv(10**decimals(), 10**_asset.decimals(), rounding)\n                : assets.mulDiv(supply, totalAssets(), rounding);\n    }\n\n    /**\n     * @dev Internal conversion function (from shares to assets) with support for rounding direction.\n     */\n    function _convertToAssets(uint256 shares, Math.Rounding rounding) internal view virtual returns (uint256 assets) {\n        uint256 supply = totalSupply();\n        return\n            (supply == 0)\n                ? shares.mulDiv(10**_asset.decimals(), 10**decimals(), rounding)\n                : shares.mulDiv(totalAssets(), supply, rounding);\n    }\n\n    /**\n     * @dev Deposit/mint common workflow.\n     */\n    function _deposit(\n        address caller,\n        address receiver,\n        uint256 assets,\n        uint256 shares\n    ) internal virtual {\n        // If _asset is ERC777, `transferFrom` can trigger a reenterancy BEFORE the transfer happens through the\n        // `tokensToSend` hook. On the other hand, the `tokenReceived` hook, that is triggered after the transfer,\n        // calls the vault, which is assumed not malicious.\n        //\n        // Conclusion: we need to do the transfer before we mint so that any reentrancy would happen before the\n        // assets are transfered and before the shares are minted, which is a valid state.\n        // slither-disable-next-line reentrancy-no-eth\n        SafeERC20.safeTransferFrom(_asset, caller, address(this), assets);\n        _mint(receiver, shares);\n\n        emit Deposit(caller, receiver, assets, shares);\n    }\n\n    /**\n     * @dev Withdraw/redeem common workflow.\n     */\n    function _withdraw(\n        address caller,\n        address receiver,\n        address owner,\n        uint256 assets,\n        uint256 shares\n    ) internal virtual {\n        if (caller != owner) {\n            _spendAllowance(owner, caller, shares);\n        }\n\n        // If _asset is ERC777, `transfer` can trigger a reentrancy AFTER the transfer happens through the\n        // `tokensReceived` hook. On the other hand, the `tokensToSend` hook, that is triggered before the transfer,\n        // calls the vault, which is assumed not malicious.\n        //\n        // Conclusion: we need to do the transfer after the burn so that any reentrancy would happen after the\n        // shares are burned and after the assets are transfered, which is a valid state.\n        _burn(owner, shares);\n        SafeERC20.safeTransfer(_asset, receiver, assets);\n\n        emit Withdraw(caller, receiver, owner, assets, shares);\n    }\n\n    function _isVaultCollateralized() private view returns (bool) {\n        return totalAssets() > 0 || totalSupply() == 0;\n    }\n}\n"},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"},"@openzeppelin/contracts/utils/Context.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"},"@openzeppelin/contracts/interfaces/IERC4626.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (interfaces/IERC4626.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../token/ERC20/IERC20.sol\";\nimport \"../token/ERC20/extensions/IERC20Metadata.sol\";\n\n/**\n * @dev Interface of the ERC4626 \"Tokenized Vault Standard\", as defined in\n * https://eips.ethereum.org/EIPS/eip-4626[ERC-4626].\n *\n * _Available since v4.7._\n */\ninterface IERC4626 is IERC20, IERC20Metadata {\n    event Deposit(address indexed caller, address indexed owner, uint256 assets, uint256 shares);\n\n    event Withdraw(\n        address indexed caller,\n        address indexed receiver,\n        address indexed owner,\n        uint256 assets,\n        uint256 shares\n    );\n\n    /**\n     * @dev Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing.\n     *\n     * - MUST be an ERC-20 token contract.\n     * - MUST NOT revert.\n     */\n    function asset() external view returns (address assetTokenAddress);\n\n    /**\n     * @dev Returns the total amount of the underlying asset that is “managed” by Vault.\n     *\n     * - SHOULD include any compounding that occurs from yield.\n     * - MUST be inclusive of any fees that are charged against assets in the Vault.\n     * - MUST NOT revert.\n     */\n    function totalAssets() external view returns (uint256 totalManagedAssets);\n\n    /**\n     * @dev Returns the amount of shares that the Vault would exchange for the amount of assets provided, in an ideal\n     * scenario where all the conditions are met.\n     *\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\n     * - MUST NOT show any variations depending on the caller.\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\n     * - MUST NOT revert.\n     *\n     * NOTE: This calculation MAY NOT reflect the “per-user” price-per-share, and instead should reflect the\n     * “average-user’s” price-per-share, meaning what the average user should expect to see when exchanging to and\n     * from.\n     */\n    function convertToShares(uint256 assets) external view returns (uint256 shares);\n\n    /**\n     * @dev Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an ideal\n     * scenario where all the conditions are met.\n     *\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\n     * - MUST NOT show any variations depending on the caller.\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\n     * - MUST NOT revert.\n     *\n     * NOTE: This calculation MAY NOT reflect the “per-user” price-per-share, and instead should reflect the\n     * “average-user’s” price-per-share, meaning what the average user should expect to see when exchanging to and\n     * from.\n     */\n    function convertToAssets(uint256 shares) external view returns (uint256 assets);\n\n    /**\n     * @dev Returns the maximum amount of the underlying asset that can be deposited into the Vault for the receiver,\n     * through a deposit call.\n     *\n     * - MUST return a limited value if receiver is subject to some deposit limit.\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited.\n     * - MUST NOT revert.\n     */\n    function maxDeposit(address receiver) external view returns (uint256 maxAssets);\n\n    /**\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given\n     * current on-chain conditions.\n     *\n     * - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit\n     *   call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called\n     *   in the same transaction.\n     * - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the\n     *   deposit would be accepted, regardless if the user has enough tokens approved, etc.\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\n     */\n    function previewDeposit(uint256 assets) external view returns (uint256 shares);\n\n    /**\n     * @dev Mints shares Vault shares to receiver by depositing exactly amount of underlying tokens.\n     *\n     * - MUST emit the Deposit event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\n     *   deposit execution, and are accounted for during deposit.\n     * - MUST revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not\n     *   approving enough underlying tokens to the Vault contract, etc).\n     *\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault’s underlying asset token.\n     */\n    function deposit(uint256 assets, address receiver) external returns (uint256 shares);\n\n    /**\n     * @dev Returns the maximum amount of the Vault shares that can be minted for the receiver, through a mint call.\n     * - MUST return a limited value if receiver is subject to some mint limit.\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted.\n     * - MUST NOT revert.\n     */\n    function maxMint(address receiver) external view returns (uint256 maxShares);\n\n    /**\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given\n     * current on-chain conditions.\n     *\n     * - MUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call\n     *   in the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the\n     *   same transaction.\n     * - MUST NOT account for mint limits like those returned from maxMint and should always act as though the mint\n     *   would be accepted, regardless if the user has enough tokens approved, etc.\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by minting.\n     */\n    function previewMint(uint256 shares) external view returns (uint256 assets);\n\n    /**\n     * @dev Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens.\n     *\n     * - MUST emit the Deposit event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the mint\n     *   execution, and are accounted for during mint.\n     * - MUST revert if all of shares cannot be minted (due to deposit limit being reached, slippage, the user not\n     *   approving enough underlying tokens to the Vault contract, etc).\n     *\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault’s underlying asset token.\n     */\n    function mint(uint256 shares, address receiver) external returns (uint256 assets);\n\n    /**\n     * @dev Returns the maximum amount of the underlying asset that can be withdrawn from the owner balance in the\n     * Vault, through a withdraw call.\n     *\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\n     * - MUST NOT revert.\n     */\n    function maxWithdraw(address owner) external view returns (uint256 maxAssets);\n\n    /**\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block,\n     * given current on-chain conditions.\n     *\n     * - MUST return as close to and no fewer than the exact amount of Vault shares that would be burned in a withdraw\n     *   call in the same transaction. I.e. withdraw should return the same or fewer shares as previewWithdraw if\n     *   called\n     *   in the same transaction.\n     * - MUST NOT account for withdrawal limits like those returned from maxWithdraw and should always act as though\n     *   the withdrawal would be accepted, regardless if the user has enough shares, etc.\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\n     */\n    function previewWithdraw(uint256 assets) external view returns (uint256 shares);\n\n    /**\n     * @dev Burns shares from owner and sends exactly assets of underlying tokens to receiver.\n     *\n     * - MUST emit the Withdraw event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\n     *   withdraw execution, and are accounted for during withdraw.\n     * - MUST revert if all of assets cannot be withdrawn (due to withdrawal limit being reached, slippage, the owner\n     *   not having enough shares, etc).\n     *\n     * Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\n     * Those methods should be performed separately.\n     */\n    function withdraw(\n        uint256 assets,\n        address receiver,\n        address owner\n    ) external returns (uint256 shares);\n\n    /**\n     * @dev Returns the maximum amount of Vault shares that can be redeemed from the owner balance in the Vault,\n     * through a redeem call.\n     *\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\n     * - MUST return balanceOf(owner) if owner is not subject to any withdrawal limit or timelock.\n     * - MUST NOT revert.\n     */\n    function maxRedeem(address owner) external view returns (uint256 maxShares);\n\n    /**\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their redeemption at the current block,\n     * given current on-chain conditions.\n     *\n     * - MUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call\n     *   in the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the\n     *   same transaction.\n     * - MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the\n     *   redemption would be accepted, regardless if the user has enough shares, etc.\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by redeeming.\n     */\n    function previewRedeem(uint256 shares) external view returns (uint256 assets);\n\n    /**\n     * @dev Burns exactly shares from owner and sends assets of underlying tokens to receiver.\n     *\n     * - MUST emit the Withdraw event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\n     *   redeem execution, and are accounted for during redeem.\n     * - MUST revert if all of shares cannot be redeemed (due to withdrawal limit being reached, slippage, the owner\n     *   not having enough shares, etc).\n     *\n     * NOTE: some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\n     * Those methods should be performed separately.\n     */\n    function redeem(\n        uint256 shares,\n        address receiver,\n        address owner\n    ) external returns (uint256 assets);\n}\n"},"@openzeppelin/contracts/utils/math/Math.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. It the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`.\n        // We also know that `k`, the position of the most significant bit, is such that `msb(a) = 2**k`.\n        // This gives `2**k < a <= 2**(k+1)` → `2**(k/2) <= sqrt(a) < 2 ** (k/2+1)`.\n        // Using an algorithm similar to the msb conmputation, we are able to compute `result = 2**(k/2)` which is a\n        // good first aproximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1;\n        uint256 x = a;\n        if (x >> 128 > 0) {\n            x >>= 128;\n            result <<= 64;\n        }\n        if (x >> 64 > 0) {\n            x >>= 64;\n            result <<= 32;\n        }\n        if (x >> 32 > 0) {\n            x >>= 32;\n            result <<= 16;\n        }\n        if (x >> 16 > 0) {\n            x >>= 16;\n            result <<= 8;\n        }\n        if (x >> 8 > 0) {\n            x >>= 8;\n            result <<= 4;\n        }\n        if (x >> 4 > 0) {\n            x >>= 4;\n            result <<= 2;\n        }\n        if (x >> 2 > 0) {\n            result <<= 1;\n        }\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = sqrt(a);\n        if (rounding == Rounding.Up && result * result < a) {\n            result += 1;\n        }\n        return result;\n    }\n}\n"},"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/draft-IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"},"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"},"@openzeppelin/contracts/utils/Address.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"}},"settings":{"optimizer":{"enabled":true,"runs":200},"outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","devdoc","userdoc","storageLayout","evm.gasEstimates"],"":["ast"]}},"metadata":{"useLiteralContent":true}}},"output":{"errors":[{"component":"general","errorCode":"1878","formattedMessage":"Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.\n--> contracts/Drip.sol\n\n","message":"SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.","severity":"warning","sourceLocation":{"end":-1,"file":"contracts/Drip.sol","start":-1},"type":"Warning"}],"sources":{"@openzeppelin/contracts/interfaces/IERC4626.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/interfaces/IERC4626.sol","exportedSymbols":{"IERC20":[831],"IERC20Metadata":[1430],"IERC4626":[167]},"id":168,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"107:23:0"},{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","file":"../token/ERC20/IERC20.sol","id":2,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":168,"sourceUnit":832,"src":"132:35:0","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol","file":"../token/ERC20/extensions/IERC20Metadata.sol","id":3,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":168,"sourceUnit":1431,"src":"168:54:0","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":5,"name":"IERC20","nodeType":"IdentifierPath","referencedDeclaration":831,"src":"413:6:0"},"id":6,"nodeType":"InheritanceSpecifier","src":"413:6:0"},{"baseName":{"id":7,"name":"IERC20Metadata","nodeType":"IdentifierPath","referencedDeclaration":1430,"src":"421:14:0"},"id":8,"nodeType":"InheritanceSpecifier","src":"421:14:0"}],"contractDependencies":[],"contractKind":"interface","documentation":{"id":4,"nodeType":"StructuredDocumentation","src":"224:166:0","text":" @dev Interface of the ERC4626 \"Tokenized Vault Standard\", as defined in\n https://eips.ethereum.org/EIPS/eip-4626[ERC-4626].\n _Available since v4.7._"},"fullyImplemented":false,"id":167,"linearizedBaseContracts":[167,1430,831],"name":"IERC4626","nameLocation":"401:8:0","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"id":18,"name":"Deposit","nameLocation":"448:7:0","nodeType":"EventDefinition","parameters":{"id":17,"nodeType":"ParameterList","parameters":[{"constant":false,"id":10,"indexed":true,"mutability":"mutable","name":"caller","nameLocation":"472:6:0","nodeType":"VariableDeclaration","scope":18,"src":"456:22:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":9,"name":"address","nodeType":"ElementaryTypeName","src":"456:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":12,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"496:5:0","nodeType":"VariableDeclaration","scope":18,"src":"480:21:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":11,"name":"address","nodeType":"ElementaryTypeName","src":"480:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":14,"indexed":false,"mutability":"mutable","name":"assets","nameLocation":"511:6:0","nodeType":"VariableDeclaration","scope":18,"src":"503:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":13,"name":"uint256","nodeType":"ElementaryTypeName","src":"503:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":16,"indexed":false,"mutability":"mutable","name":"shares","nameLocation":"527:6:0","nodeType":"VariableDeclaration","scope":18,"src":"519:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":15,"name":"uint256","nodeType":"ElementaryTypeName","src":"519:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"455:79:0"},"src":"442:93:0"},{"anonymous":false,"id":30,"name":"Withdraw","nameLocation":"547:8:0","nodeType":"EventDefinition","parameters":{"id":29,"nodeType":"ParameterList","parameters":[{"constant":false,"id":20,"indexed":true,"mutability":"mutable","name":"caller","nameLocation":"581:6:0","nodeType":"VariableDeclaration","scope":30,"src":"565:22:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":19,"name":"address","nodeType":"ElementaryTypeName","src":"565:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":22,"indexed":true,"mutability":"mutable","name":"receiver","nameLocation":"613:8:0","nodeType":"VariableDeclaration","scope":30,"src":"597:24:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":21,"name":"address","nodeType":"ElementaryTypeName","src":"597:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":24,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"647:5:0","nodeType":"VariableDeclaration","scope":30,"src":"631:21:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":23,"name":"address","nodeType":"ElementaryTypeName","src":"631:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":26,"indexed":false,"mutability":"mutable","name":"assets","nameLocation":"670:6:0","nodeType":"VariableDeclaration","scope":30,"src":"662:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":25,"name":"uint256","nodeType":"ElementaryTypeName","src":"662:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":28,"indexed":false,"mutability":"mutable","name":"shares","nameLocation":"694:6:0","nodeType":"VariableDeclaration","scope":30,"src":"686:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":27,"name":"uint256","nodeType":"ElementaryTypeName","src":"686:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"555:151:0"},"src":"541:166:0"},{"documentation":{"id":31,"nodeType":"StructuredDocumentation","src":"713:207:0","text":" @dev Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing.\n - MUST be an ERC-20 token contract.\n - MUST NOT revert."},"functionSelector":"38d52e0f","id":36,"implemented":false,"kind":"function","modifiers":[],"name":"asset","nameLocation":"934:5:0","nodeType":"FunctionDefinition","parameters":{"id":32,"nodeType":"ParameterList","parameters":[],"src":"939:2:0"},"returnParameters":{"id":35,"nodeType":"ParameterList","parameters":[{"constant":false,"id":34,"mutability":"mutable","name":"assetTokenAddress","nameLocation":"973:17:0","nodeType":"VariableDeclaration","scope":36,"src":"965:25:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":33,"name":"address","nodeType":"ElementaryTypeName","src":"965:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"964:27:0"},"scope":167,"src":"925:67:0","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":37,"nodeType":"StructuredDocumentation","src":"998:286:0","text":" @dev Returns the total amount of the underlying asset that is “managed” by Vault.\n - SHOULD include any compounding that occurs from yield.\n - MUST be inclusive of any fees that are charged against assets in the Vault.\n - MUST NOT revert."},"functionSelector":"01e1d114","id":42,"implemented":false,"kind":"function","modifiers":[],"name":"totalAssets","nameLocation":"1298:11:0","nodeType":"FunctionDefinition","parameters":{"id":38,"nodeType":"ParameterList","parameters":[],"src":"1309:2:0"},"returnParameters":{"id":41,"nodeType":"ParameterList","parameters":[{"constant":false,"id":40,"mutability":"mutable","name":"totalManagedAssets","nameLocation":"1343:18:0","nodeType":"VariableDeclaration","scope":42,"src":"1335:26:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":39,"name":"uint256","nodeType":"ElementaryTypeName","src":"1335:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1334:28:0"},"scope":167,"src":"1289:74:0","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":43,"nodeType":"StructuredDocumentation","src":"1369:720:0","text":" @dev Returns the amount of shares that the Vault would exchange for the amount of assets provided, in an ideal\n scenario where all the conditions are met.\n - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\n - MUST NOT show any variations depending on the caller.\n - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\n - MUST NOT revert.\n NOTE: This calculation MAY NOT reflect the “per-user” price-per-share, and instead should reflect the\n “average-user’s” price-per-share, meaning what the average user should expect to see when exchanging to and\n from."},"functionSelector":"c6e6f592","id":50,"implemented":false,"kind":"function","modifiers":[],"name":"convertToShares","nameLocation":"2103:15:0","nodeType":"FunctionDefinition","parameters":{"id":46,"nodeType":"ParameterList","parameters":[{"constant":false,"id":45,"mutability":"mutable","name":"assets","nameLocation":"2127:6:0","nodeType":"VariableDeclaration","scope":50,"src":"2119:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":44,"name":"uint256","nodeType":"ElementaryTypeName","src":"2119:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2118:16:0"},"returnParameters":{"id":49,"nodeType":"ParameterList","parameters":[{"constant":false,"id":48,"mutability":"mutable","name":"shares","nameLocation":"2166:6:0","nodeType":"VariableDeclaration","scope":50,"src":"2158:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":47,"name":"uint256","nodeType":"ElementaryTypeName","src":"2158:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2157:16:0"},"scope":167,"src":"2094:80:0","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":51,"nodeType":"StructuredDocumentation","src":"2180:720:0","text":" @dev Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an ideal\n scenario where all the conditions are met.\n - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\n - MUST NOT show any variations depending on the caller.\n - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\n - MUST NOT revert.\n NOTE: This calculation MAY NOT reflect the “per-user” price-per-share, and instead should reflect the\n “average-user’s” price-per-share, meaning what the average user should expect to see when exchanging to and\n from."},"functionSelector":"07a2d13a","id":58,"implemented":false,"kind":"function","modifiers":[],"name":"convertToAssets","nameLocation":"2914:15:0","nodeType":"FunctionDefinition","parameters":{"id":54,"nodeType":"ParameterList","parameters":[{"constant":false,"id":53,"mutability":"mutable","name":"shares","nameLocation":"2938:6:0","nodeType":"VariableDeclaration","scope":58,"src":"2930:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":52,"name":"uint256","nodeType":"ElementaryTypeName","src":"2930:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2929:16:0"},"returnParameters":{"id":57,"nodeType":"ParameterList","parameters":[{"constant":false,"id":56,"mutability":"mutable","name":"assets","nameLocation":"2977:6:0","nodeType":"VariableDeclaration","scope":58,"src":"2969:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":55,"name":"uint256","nodeType":"ElementaryTypeName","src":"2969:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2968:16:0"},"scope":167,"src":"2905:80:0","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":59,"nodeType":"StructuredDocumentation","src":"2991:386:0","text":" @dev Returns the maximum amount of the underlying asset that can be deposited into the Vault for the receiver,\n through a deposit call.\n - MUST return a limited value if receiver is subject to some deposit limit.\n - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited.\n - MUST NOT revert."},"functionSelector":"402d267d","id":66,"implemented":false,"kind":"function","modifiers":[],"name":"maxDeposit","nameLocation":"3391:10:0","nodeType":"FunctionDefinition","parameters":{"id":62,"nodeType":"ParameterList","parameters":[{"constant":false,"id":61,"mutability":"mutable","name":"receiver","nameLocation":"3410:8:0","nodeType":"VariableDeclaration","scope":66,"src":"3402:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":60,"name":"address","nodeType":"ElementaryTypeName","src":"3402:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3401:18:0"},"returnParameters":{"id":65,"nodeType":"ParameterList","parameters":[{"constant":false,"id":64,"mutability":"mutable","name":"maxAssets","nameLocation":"3451:9:0","nodeType":"VariableDeclaration","scope":66,"src":"3443:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":63,"name":"uint256","nodeType":"ElementaryTypeName","src":"3443:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3442:19:0"},"scope":167,"src":"3382:80:0","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":67,"nodeType":"StructuredDocumentation","src":"3468:1012:0","text":" @dev Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given\n current on-chain conditions.\n - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit\n   call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called\n   in the same transaction.\n - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the\n   deposit would be accepted, regardless if the user has enough tokens approved, etc.\n - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\n - MUST NOT revert.\n NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in\n share price or some other type of condition, meaning the depositor will lose assets by depositing."},"functionSelector":"ef8b30f7","id":74,"implemented":false,"kind":"function","modifiers":[],"name":"previewDeposit","nameLocation":"4494:14:0","nodeType":"FunctionDefinition","parameters":{"id":70,"nodeType":"ParameterList","parameters":[{"constant":false,"id":69,"mutability":"mutable","name":"assets","nameLocation":"4517:6:0","nodeType":"VariableDeclaration","scope":74,"src":"4509:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":68,"name":"uint256","nodeType":"ElementaryTypeName","src":"4509:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4508:16:0"},"returnParameters":{"id":73,"nodeType":"ParameterList","parameters":[{"constant":false,"id":72,"mutability":"mutable","name":"shares","nameLocation":"4556:6:0","nodeType":"VariableDeclaration","scope":74,"src":"4548:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":71,"name":"uint256","nodeType":"ElementaryTypeName","src":"4548:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4547:16:0"},"scope":167,"src":"4485:79:0","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":75,"nodeType":"StructuredDocumentation","src":"4570:651:0","text":" @dev Mints shares Vault shares to receiver by depositing exactly amount of underlying tokens.\n - MUST emit the Deposit event.\n - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\n   deposit execution, and are accounted for during deposit.\n - MUST revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not\n   approving enough underlying tokens to the Vault contract, etc).\n NOTE: most implementations will require pre-approval of the Vault with the Vault’s underlying asset token."},"functionSelector":"6e553f65","id":84,"implemented":false,"kind":"function","modifiers":[],"name":"deposit","nameLocation":"5235:7:0","nodeType":"FunctionDefinition","parameters":{"id":80,"nodeType":"ParameterList","parameters":[{"constant":false,"id":77,"mutability":"mutable","name":"assets","nameLocation":"5251:6:0","nodeType":"VariableDeclaration","scope":84,"src":"5243:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":76,"name":"uint256","nodeType":"ElementaryTypeName","src":"5243:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":79,"mutability":"mutable","name":"receiver","nameLocation":"5267:8:0","nodeType":"VariableDeclaration","scope":84,"src":"5259:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":78,"name":"address","nodeType":"ElementaryTypeName","src":"5259:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5242:34:0"},"returnParameters":{"id":83,"nodeType":"ParameterList","parameters":[{"constant":false,"id":82,"mutability":"mutable","name":"shares","nameLocation":"5303:6:0","nodeType":"VariableDeclaration","scope":84,"src":"5295:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":81,"name":"uint256","nodeType":"ElementaryTypeName","src":"5295:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5294:16:0"},"scope":167,"src":"5226:85:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":85,"nodeType":"StructuredDocumentation","src":"5317:341:0","text":" @dev Returns the maximum amount of the Vault shares that can be minted for the receiver, through a mint call.\n - MUST return a limited value if receiver is subject to some mint limit.\n - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted.\n - MUST NOT revert."},"functionSelector":"c63d75b6","id":92,"implemented":false,"kind":"function","modifiers":[],"name":"maxMint","nameLocation":"5672:7:0","nodeType":"FunctionDefinition","parameters":{"id":88,"nodeType":"ParameterList","parameters":[{"constant":false,"id":87,"mutability":"mutable","name":"receiver","nameLocation":"5688:8:0","nodeType":"VariableDeclaration","scope":92,"src":"5680:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":86,"name":"address","nodeType":"ElementaryTypeName","src":"5680:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5679:18:0"},"returnParameters":{"id":91,"nodeType":"ParameterList","parameters":[{"constant":false,"id":90,"mutability":"mutable","name":"maxShares","nameLocation":"5729:9:0","nodeType":"VariableDeclaration","scope":92,"src":"5721:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":89,"name":"uint256","nodeType":"ElementaryTypeName","src":"5721:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5720:19:0"},"scope":167,"src":"5663:77:0","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":93,"nodeType":"StructuredDocumentation","src":"5746:984:0","text":" @dev Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given\n current on-chain conditions.\n - MUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call\n   in the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the\n   same transaction.\n - MUST NOT account for mint limits like those returned from maxMint and should always act as though the mint\n   would be accepted, regardless if the user has enough tokens approved, etc.\n - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\n - MUST NOT revert.\n NOTE: any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in\n share price or some other type of condition, meaning the depositor will lose assets by minting."},"functionSelector":"b3d7f6b9","id":100,"implemented":false,"kind":"function","modifiers":[],"name":"previewMint","nameLocation":"6744:11:0","nodeType":"FunctionDefinition","parameters":{"id":96,"nodeType":"ParameterList","parameters":[{"constant":false,"id":95,"mutability":"mutable","name":"shares","nameLocation":"6764:6:0","nodeType":"VariableDeclaration","scope":100,"src":"6756:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":94,"name":"uint256","nodeType":"ElementaryTypeName","src":"6756:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6755:16:0"},"returnParameters":{"id":99,"nodeType":"ParameterList","parameters":[{"constant":false,"id":98,"mutability":"mutable","name":"assets","nameLocation":"6803:6:0","nodeType":"VariableDeclaration","scope":100,"src":"6795:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":97,"name":"uint256","nodeType":"ElementaryTypeName","src":"6795:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6794:16:0"},"scope":167,"src":"6735:76:0","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":101,"nodeType":"StructuredDocumentation","src":"6817:642:0","text":" @dev Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens.\n - MUST emit the Deposit event.\n - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the mint\n   execution, and are accounted for during mint.\n - MUST revert if all of shares cannot be minted (due to deposit limit being reached, slippage, the user not\n   approving enough underlying tokens to the Vault contract, etc).\n NOTE: most implementations will require pre-approval of the Vault with the Vault’s underlying asset token."},"functionSelector":"94bf804d","id":110,"implemented":false,"kind":"function","modifiers":[],"name":"mint","nameLocation":"7473:4:0","nodeType":"FunctionDefinition","parameters":{"id":106,"nodeType":"ParameterList","parameters":[{"constant":false,"id":103,"mutability":"mutable","name":"shares","nameLocation":"7486:6:0","nodeType":"VariableDeclaration","scope":110,"src":"7478:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":102,"name":"uint256","nodeType":"ElementaryTypeName","src":"7478:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":105,"mutability":"mutable","name":"receiver","nameLocation":"7502:8:0","nodeType":"VariableDeclaration","scope":110,"src":"7494:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":104,"name":"address","nodeType":"ElementaryTypeName","src":"7494:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"7477:34:0"},"returnParameters":{"id":109,"nodeType":"ParameterList","parameters":[{"constant":false,"id":108,"mutability":"mutable","name":"assets","nameLocation":"7538:6:0","nodeType":"VariableDeclaration","scope":110,"src":"7530:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":107,"name":"uint256","nodeType":"ElementaryTypeName","src":"7530:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7529:16:0"},"scope":167,"src":"7464:82:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":111,"nodeType":"StructuredDocumentation","src":"7552:293:0","text":" @dev Returns the maximum amount of the underlying asset that can be withdrawn from the owner balance in the\n Vault, through a withdraw call.\n - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\n - MUST NOT revert."},"functionSelector":"ce96cb77","id":118,"implemented":false,"kind":"function","modifiers":[],"name":"maxWithdraw","nameLocation":"7859:11:0","nodeType":"FunctionDefinition","parameters":{"id":114,"nodeType":"ParameterList","parameters":[{"constant":false,"id":113,"mutability":"mutable","name":"owner","nameLocation":"7879:5:0","nodeType":"VariableDeclaration","scope":118,"src":"7871:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":112,"name":"address","nodeType":"ElementaryTypeName","src":"7871:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"7870:15:0"},"returnParameters":{"id":117,"nodeType":"ParameterList","parameters":[{"constant":false,"id":116,"mutability":"mutable","name":"maxAssets","nameLocation":"7917:9:0","nodeType":"VariableDeclaration","scope":118,"src":"7909:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":115,"name":"uint256","nodeType":"ElementaryTypeName","src":"7909:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7908:19:0"},"scope":167,"src":"7850:78:0","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":119,"nodeType":"StructuredDocumentation","src":"7934:1034:0","text":" @dev Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block,\n given current on-chain conditions.\n - MUST return as close to and no fewer than the exact amount of Vault shares that would be burned in a withdraw\n   call in the same transaction. I.e. withdraw should return the same or fewer shares as previewWithdraw if\n   called\n   in the same transaction.\n - MUST NOT account for withdrawal limits like those returned from maxWithdraw and should always act as though\n   the withdrawal would be accepted, regardless if the user has enough shares, etc.\n - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\n - MUST NOT revert.\n NOTE: any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be considered slippage in\n share price or some other type of condition, meaning the depositor will lose assets by depositing."},"functionSelector":"0a28a477","id":126,"implemented":false,"kind":"function","modifiers":[],"name":"previewWithdraw","nameLocation":"8982:15:0","nodeType":"FunctionDefinition","parameters":{"id":122,"nodeType":"ParameterList","parameters":[{"constant":false,"id":121,"mutability":"mutable","name":"assets","nameLocation":"9006:6:0","nodeType":"VariableDeclaration","scope":126,"src":"8998:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":120,"name":"uint256","nodeType":"ElementaryTypeName","src":"8998:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8997:16:0"},"returnParameters":{"id":125,"nodeType":"ParameterList","parameters":[{"constant":false,"id":124,"mutability":"mutable","name":"shares","nameLocation":"9045:6:0","nodeType":"VariableDeclaration","scope":126,"src":"9037:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":123,"name":"uint256","nodeType":"ElementaryTypeName","src":"9037:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9036:16:0"},"scope":167,"src":"8973:80:0","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":127,"nodeType":"StructuredDocumentation","src":"9059:670:0","text":" @dev Burns shares from owner and sends exactly assets of underlying tokens to receiver.\n - MUST emit the Withdraw event.\n - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\n   withdraw execution, and are accounted for during withdraw.\n - MUST revert if all of assets cannot be withdrawn (due to withdrawal limit being reached, slippage, the owner\n   not having enough shares, etc).\n Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\n Those methods should be performed separately."},"functionSelector":"b460af94","id":138,"implemented":false,"kind":"function","modifiers":[],"name":"withdraw","nameLocation":"9743:8:0","nodeType":"FunctionDefinition","parameters":{"id":134,"nodeType":"ParameterList","parameters":[{"constant":false,"id":129,"mutability":"mutable","name":"assets","nameLocation":"9769:6:0","nodeType":"VariableDeclaration","scope":138,"src":"9761:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":128,"name":"uint256","nodeType":"ElementaryTypeName","src":"9761:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":131,"mutability":"mutable","name":"receiver","nameLocation":"9793:8:0","nodeType":"VariableDeclaration","scope":138,"src":"9785:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":130,"name":"address","nodeType":"ElementaryTypeName","src":"9785:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":133,"mutability":"mutable","name":"owner","nameLocation":"9819:5:0","nodeType":"VariableDeclaration","scope":138,"src":"9811:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":132,"name":"address","nodeType":"ElementaryTypeName","src":"9811:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"9751:79:0"},"returnParameters":{"id":137,"nodeType":"ParameterList","parameters":[{"constant":false,"id":136,"mutability":"mutable","name":"shares","nameLocation":"9857:6:0","nodeType":"VariableDeclaration","scope":138,"src":"9849:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":135,"name":"uint256","nodeType":"ElementaryTypeName","src":"9849:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9848:16:0"},"scope":167,"src":"9734:131:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":139,"nodeType":"StructuredDocumentation","src":"9871:381:0","text":" @dev Returns the maximum amount of Vault shares that can be redeemed from the owner balance in the Vault,\n through a redeem call.\n - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\n - MUST return balanceOf(owner) if owner is not subject to any withdrawal limit or timelock.\n - MUST NOT revert."},"functionSelector":"d905777e","id":146,"implemented":false,"kind":"function","modifiers":[],"name":"maxRedeem","nameLocation":"10266:9:0","nodeType":"FunctionDefinition","parameters":{"id":142,"nodeType":"ParameterList","parameters":[{"constant":false,"id":141,"mutability":"mutable","name":"owner","nameLocation":"10284:5:0","nodeType":"VariableDeclaration","scope":146,"src":"10276:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":140,"name":"address","nodeType":"ElementaryTypeName","src":"10276:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"10275:15:0"},"returnParameters":{"id":145,"nodeType":"ParameterList","parameters":[{"constant":false,"id":144,"mutability":"mutable","name":"maxShares","nameLocation":"10322:9:0","nodeType":"VariableDeclaration","scope":146,"src":"10314:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":143,"name":"uint256","nodeType":"ElementaryTypeName","src":"10314:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10313:19:0"},"scope":167,"src":"10257:76:0","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":147,"nodeType":"StructuredDocumentation","src":"10339:1010:0","text":" @dev Allows an on-chain or off-chain user to simulate the effects of their redeemption at the current block,\n given current on-chain conditions.\n - MUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call\n   in the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the\n   same transaction.\n - MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the\n   redemption would be accepted, regardless if the user has enough shares, etc.\n - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\n - MUST NOT revert.\n NOTE: any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in\n share price or some other type of condition, meaning the depositor will lose assets by redeeming."},"functionSelector":"4cdad506","id":154,"implemented":false,"kind":"function","modifiers":[],"name":"previewRedeem","nameLocation":"11363:13:0","nodeType":"FunctionDefinition","parameters":{"id":150,"nodeType":"ParameterList","parameters":[{"constant":false,"id":149,"mutability":"mutable","name":"shares","nameLocation":"11385:6:0","nodeType":"VariableDeclaration","scope":154,"src":"11377:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":148,"name":"uint256","nodeType":"ElementaryTypeName","src":"11377:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11376:16:0"},"returnParameters":{"id":153,"nodeType":"ParameterList","parameters":[{"constant":false,"id":152,"mutability":"mutable","name":"assets","nameLocation":"11424:6:0","nodeType":"VariableDeclaration","scope":154,"src":"11416:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":151,"name":"uint256","nodeType":"ElementaryTypeName","src":"11416:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11415:16:0"},"scope":167,"src":"11354:78:0","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":155,"nodeType":"StructuredDocumentation","src":"11438:661:0","text":" @dev Burns exactly shares from owner and sends assets of underlying tokens to receiver.\n - MUST emit the Withdraw event.\n - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\n   redeem execution, and are accounted for during redeem.\n - MUST revert if all of shares cannot be redeemed (due to withdrawal limit being reached, slippage, the owner\n   not having enough shares, etc).\n NOTE: some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\n Those methods should be performed separately."},"functionSelector":"ba087652","id":166,"implemented":false,"kind":"function","modifiers":[],"name":"redeem","nameLocation":"12113:6:0","nodeType":"FunctionDefinition","parameters":{"id":162,"nodeType":"ParameterList","parameters":[{"constant":false,"id":157,"mutability":"mutable","name":"shares","nameLocation":"12137:6:0","nodeType":"VariableDeclaration","scope":166,"src":"12129:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":156,"name":"uint256","nodeType":"ElementaryTypeName","src":"12129:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":159,"mutability":"mutable","name":"receiver","nameLocation":"12161:8:0","nodeType":"VariableDeclaration","scope":166,"src":"12153:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":158,"name":"address","nodeType":"ElementaryTypeName","src":"12153:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":161,"mutability":"mutable","name":"owner","nameLocation":"12187:5:0","nodeType":"VariableDeclaration","scope":166,"src":"12179:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":160,"name":"address","nodeType":"ElementaryTypeName","src":"12179:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"12119:79:0"},"returnParameters":{"id":165,"nodeType":"ParameterList","parameters":[{"constant":false,"id":164,"mutability":"mutable","name":"assets","nameLocation":"12225:6:0","nodeType":"VariableDeclaration","scope":166,"src":"12217:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":163,"name":"uint256","nodeType":"ElementaryTypeName","src":"12217:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12216:16:0"},"scope":167,"src":"12104:129:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":168,"src":"391:11844:0","usedErrors":[]}],"src":"107:12129:0"},"id":0},"@openzeppelin/contracts/token/ERC20/ERC20.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC20/ERC20.sol","exportedSymbols":{"Context":[2064],"ERC20":[753],"IERC20":[831],"IERC20Metadata":[1430]},"id":754,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":169,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"105:23:1"},{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","file":"./IERC20.sol","id":170,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":754,"sourceUnit":832,"src":"130:22:1","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol","file":"./extensions/IERC20Metadata.sol","id":171,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":754,"sourceUnit":1431,"src":"153:41:1","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"../../utils/Context.sol","id":172,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":754,"sourceUnit":2065,"src":"195:33:1","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":174,"name":"Context","nodeType":"IdentifierPath","referencedDeclaration":2064,"src":"1421:7:1"},"id":175,"nodeType":"InheritanceSpecifier","src":"1421:7:1"},{"baseName":{"id":176,"name":"IERC20","nodeType":"IdentifierPath","referencedDeclaration":831,"src":"1430:6:1"},"id":177,"nodeType":"InheritanceSpecifier","src":"1430:6:1"},{"baseName":{"id":178,"name":"IERC20Metadata","nodeType":"IdentifierPath","referencedDeclaration":1430,"src":"1438:14:1"},"id":179,"nodeType":"InheritanceSpecifier","src":"1438:14:1"}],"contractDependencies":[],"contractKind":"contract","documentation":{"id":173,"nodeType":"StructuredDocumentation","src":"230:1172:1","text":" @dev Implementation of the {IERC20} interface.\n This implementation is agnostic to the way tokens are created. This means\n that a supply mechanism has to be added in a derived contract using {_mint}.\n For a generic mechanism see {ERC20PresetMinterPauser}.\n TIP: For a detailed writeup see our guide\n https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n to implement supply mechanisms].\n We have followed general OpenZeppelin Contracts guidelines: functions revert\n instead returning `false` on failure. This behavior is nonetheless\n conventional and does not conflict with the expectations of ERC20\n applications.\n Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n This allows applications to reconstruct the allowance for all accounts just\n by listening to said events. Other implementations of the EIP may not emit\n these events, as it isn't required by the specification.\n Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n functions have been added to mitigate the well-known issues around setting\n allowances. See {IERC20-approve}."},"fullyImplemented":true,"id":753,"linearizedBaseContracts":[753,1430,831,2064],"name":"ERC20","nameLocation":"1412:5:1","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":183,"mutability":"mutable","name":"_balances","nameLocation":"1495:9:1","nodeType":"VariableDeclaration","scope":753,"src":"1459:45:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"typeName":{"id":182,"keyType":{"id":180,"name":"address","nodeType":"ElementaryTypeName","src":"1467:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1459:27:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueType":{"id":181,"name":"uint256","nodeType":"ElementaryTypeName","src":"1478:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"private"},{"constant":false,"id":189,"mutability":"mutable","name":"_allowances","nameLocation":"1567:11:1","nodeType":"VariableDeclaration","scope":753,"src":"1511:67:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"},"typeName":{"id":188,"keyType":{"id":184,"name":"address","nodeType":"ElementaryTypeName","src":"1519:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1511:47:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"},"valueType":{"id":187,"keyType":{"id":185,"name":"address","nodeType":"ElementaryTypeName","src":"1538:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1530:27:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueType":{"id":186,"name":"uint256","nodeType":"ElementaryTypeName","src":"1549:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}}},"visibility":"private"},{"constant":false,"id":191,"mutability":"mutable","name":"_totalSupply","nameLocation":"1601:12:1","nodeType":"VariableDeclaration","scope":753,"src":"1585:28:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":190,"name":"uint256","nodeType":"ElementaryTypeName","src":"1585:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"constant":false,"id":193,"mutability":"mutable","name":"_name","nameLocation":"1635:5:1","nodeType":"VariableDeclaration","scope":753,"src":"1620:20:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":192,"name":"string","nodeType":"ElementaryTypeName","src":"1620:6:1","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"private"},{"constant":false,"id":195,"mutability":"mutable","name":"_symbol","nameLocation":"1661:7:1","nodeType":"VariableDeclaration","scope":753,"src":"1646:22:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":194,"name":"string","nodeType":"ElementaryTypeName","src":"1646:6:1","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"private"},{"body":{"id":211,"nodeType":"Block","src":"2034:57:1","statements":[{"expression":{"id":205,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":203,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":193,"src":"2044:5:1","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":204,"name":"name_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":198,"src":"2052:5:1","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"2044:13:1","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":206,"nodeType":"ExpressionStatement","src":"2044:13:1"},{"expression":{"id":209,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":207,"name":"_symbol","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":195,"src":"2067:7:1","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":208,"name":"symbol_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":200,"src":"2077:7:1","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"2067:17:1","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":210,"nodeType":"ExpressionStatement","src":"2067:17:1"}]},"documentation":{"id":196,"nodeType":"StructuredDocumentation","src":"1675:298:1","text":" @dev Sets the values for {name} and {symbol}.\n The default value of {decimals} is 18. To select a different value for\n {decimals} you should overload it.\n All two of these values are immutable: they can only be set once during\n construction."},"id":212,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":201,"nodeType":"ParameterList","parameters":[{"constant":false,"id":198,"mutability":"mutable","name":"name_","nameLocation":"2004:5:1","nodeType":"VariableDeclaration","scope":212,"src":"1990:19:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":197,"name":"string","nodeType":"ElementaryTypeName","src":"1990:6:1","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":200,"mutability":"mutable","name":"symbol_","nameLocation":"2025:7:1","nodeType":"VariableDeclaration","scope":212,"src":"2011:21:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":199,"name":"string","nodeType":"ElementaryTypeName","src":"2011:6:1","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1989:44:1"},"returnParameters":{"id":202,"nodeType":"ParameterList","parameters":[],"src":"2034:0:1"},"scope":753,"src":"1978:113:1","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[1417],"body":{"id":221,"nodeType":"Block","src":"2225:29:1","statements":[{"expression":{"id":219,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":193,"src":"2242:5:1","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"functionReturnParameters":218,"id":220,"nodeType":"Return","src":"2235:12:1"}]},"documentation":{"id":213,"nodeType":"StructuredDocumentation","src":"2097:54:1","text":" @dev Returns the name of the token."},"functionSelector":"06fdde03","id":222,"implemented":true,"kind":"function","modifiers":[],"name":"name","nameLocation":"2165:4:1","nodeType":"FunctionDefinition","overrides":{"id":215,"nodeType":"OverrideSpecifier","overrides":[],"src":"2192:8:1"},"parameters":{"id":214,"nodeType":"ParameterList","parameters":[],"src":"2169:2:1"},"returnParameters":{"id":218,"nodeType":"ParameterList","parameters":[{"constant":false,"id":217,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":222,"src":"2210:13:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":216,"name":"string","nodeType":"ElementaryTypeName","src":"2210:6:1","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2209:15:1"},"scope":753,"src":"2156:98:1","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1423],"body":{"id":231,"nodeType":"Block","src":"2438:31:1","statements":[{"expression":{"id":229,"name":"_symbol","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":195,"src":"2455:7:1","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"functionReturnParameters":228,"id":230,"nodeType":"Return","src":"2448:14:1"}]},"documentation":{"id":223,"nodeType":"StructuredDocumentation","src":"2260:102:1","text":" @dev Returns the symbol of the token, usually a shorter version of the\n name."},"functionSelector":"95d89b41","id":232,"implemented":true,"kind":"function","modifiers":[],"name":"symbol","nameLocation":"2376:6:1","nodeType":"FunctionDefinition","overrides":{"id":225,"nodeType":"OverrideSpecifier","overrides":[],"src":"2405:8:1"},"parameters":{"id":224,"nodeType":"ParameterList","parameters":[],"src":"2382:2:1"},"returnParameters":{"id":228,"nodeType":"ParameterList","parameters":[{"constant":false,"id":227,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":232,"src":"2423:13:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":226,"name":"string","nodeType":"ElementaryTypeName","src":"2423:6:1","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2422:15:1"},"scope":753,"src":"2367:102:1","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1429],"body":{"id":241,"nodeType":"Block","src":"3158:26:1","statements":[{"expression":{"hexValue":"3138","id":239,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3175:2:1","typeDescriptions":{"typeIdentifier":"t_rational_18_by_1","typeString":"int_const 18"},"value":"18"},"functionReturnParameters":238,"id":240,"nodeType":"Return","src":"3168:9:1"}]},"documentation":{"id":233,"nodeType":"StructuredDocumentation","src":"2475:613:1","text":" @dev Returns the number of decimals used to get its user representation.\n For example, if `decimals` equals `2`, a balance of `505` tokens should\n be displayed to a user as `5.05` (`505 / 10 ** 2`).\n Tokens usually opt for a value of 18, imitating the relationship between\n Ether and Wei. This is the value {ERC20} uses, unless this function is\n overridden;\n NOTE: This information is only used for _display_ purposes: it in\n no way affects any of the arithmetic of the contract, including\n {IERC20-balanceOf} and {IERC20-transfer}."},"functionSelector":"313ce567","id":242,"implemented":true,"kind":"function","modifiers":[],"name":"decimals","nameLocation":"3102:8:1","nodeType":"FunctionDefinition","overrides":{"id":235,"nodeType":"OverrideSpecifier","overrides":[],"src":"3133:8:1"},"parameters":{"id":234,"nodeType":"ParameterList","parameters":[],"src":"3110:2:1"},"returnParameters":{"id":238,"nodeType":"ParameterList","parameters":[{"constant":false,"id":237,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":242,"src":"3151:5:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":236,"name":"uint8","nodeType":"ElementaryTypeName","src":"3151:5:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"3150:7:1"},"scope":753,"src":"3093:91:1","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[780],"body":{"id":251,"nodeType":"Block","src":"3314:36:1","statements":[{"expression":{"id":249,"name":"_totalSupply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":191,"src":"3331:12:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":248,"id":250,"nodeType":"Return","src":"3324:19:1"}]},"documentation":{"id":243,"nodeType":"StructuredDocumentation","src":"3190:49:1","text":" @dev See {IERC20-totalSupply}."},"functionSelector":"18160ddd","id":252,"implemented":true,"kind":"function","modifiers":[],"name":"totalSupply","nameLocation":"3253:11:1","nodeType":"FunctionDefinition","overrides":{"id":245,"nodeType":"OverrideSpecifier","overrides":[],"src":"3287:8:1"},"parameters":{"id":244,"nodeType":"ParameterList","parameters":[],"src":"3264:2:1"},"returnParameters":{"id":248,"nodeType":"ParameterList","parameters":[{"constant":false,"id":247,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":252,"src":"3305:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":246,"name":"uint256","nodeType":"ElementaryTypeName","src":"3305:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3304:9:1"},"scope":753,"src":"3244:106:1","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[788],"body":{"id":265,"nodeType":"Block","src":"3491:42:1","statements":[{"expression":{"baseExpression":{"id":261,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":183,"src":"3508:9:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":263,"indexExpression":{"id":262,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":255,"src":"3518:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3508:18:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":260,"id":264,"nodeType":"Return","src":"3501:25:1"}]},"documentation":{"id":253,"nodeType":"StructuredDocumentation","src":"3356:47:1","text":" @dev See {IERC20-balanceOf}."},"functionSelector":"70a08231","id":266,"implemented":true,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"3417:9:1","nodeType":"FunctionDefinition","overrides":{"id":257,"nodeType":"OverrideSpecifier","overrides":[],"src":"3464:8:1"},"parameters":{"id":256,"nodeType":"ParameterList","parameters":[{"constant":false,"id":255,"mutability":"mutable","name":"account","nameLocation":"3435:7:1","nodeType":"VariableDeclaration","scope":266,"src":"3427:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":254,"name":"address","nodeType":"ElementaryTypeName","src":"3427:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3426:17:1"},"returnParameters":{"id":260,"nodeType":"ParameterList","parameters":[{"constant":false,"id":259,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":266,"src":"3482:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":258,"name":"uint256","nodeType":"ElementaryTypeName","src":"3482:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3481:9:1"},"scope":753,"src":"3408:125:1","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[798],"body":{"id":290,"nodeType":"Block","src":"3814:104:1","statements":[{"assignments":[278],"declarations":[{"constant":false,"id":278,"mutability":"mutable","name":"owner","nameLocation":"3832:5:1","nodeType":"VariableDeclaration","scope":290,"src":"3824:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":277,"name":"address","nodeType":"ElementaryTypeName","src":"3824:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":281,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":279,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2054,"src":"3840:10:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":280,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3840:12:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"3824:28:1"},{"expression":{"arguments":[{"id":283,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":278,"src":"3872:5:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":284,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":269,"src":"3879:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":285,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":271,"src":"3883:6:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":282,"name":"_transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":514,"src":"3862:9:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":286,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3862:28:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":287,"nodeType":"ExpressionStatement","src":"3862:28:1"},{"expression":{"hexValue":"74727565","id":288,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3907:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":276,"id":289,"nodeType":"Return","src":"3900:11:1"}]},"documentation":{"id":267,"nodeType":"StructuredDocumentation","src":"3539:185:1","text":" @dev See {IERC20-transfer}.\n Requirements:\n - `to` cannot be the zero address.\n - the caller must have a balance of at least `amount`."},"functionSelector":"a9059cbb","id":291,"implemented":true,"kind":"function","modifiers":[],"name":"transfer","nameLocation":"3738:8:1","nodeType":"FunctionDefinition","overrides":{"id":273,"nodeType":"OverrideSpecifier","overrides":[],"src":"3790:8:1"},"parameters":{"id":272,"nodeType":"ParameterList","parameters":[{"constant":false,"id":269,"mutability":"mutable","name":"to","nameLocation":"3755:2:1","nodeType":"VariableDeclaration","scope":291,"src":"3747:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":268,"name":"address","nodeType":"ElementaryTypeName","src":"3747:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":271,"mutability":"mutable","name":"amount","nameLocation":"3767:6:1","nodeType":"VariableDeclaration","scope":291,"src":"3759:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":270,"name":"uint256","nodeType":"ElementaryTypeName","src":"3759:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3746:28:1"},"returnParameters":{"id":276,"nodeType":"ParameterList","parameters":[{"constant":false,"id":275,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":291,"src":"3808:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":274,"name":"bool","nodeType":"ElementaryTypeName","src":"3808:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3807:6:1"},"scope":753,"src":"3729:189:1","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[808],"body":{"id":308,"nodeType":"Block","src":"4074:51:1","statements":[{"expression":{"baseExpression":{"baseExpression":{"id":302,"name":"_allowances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":189,"src":"4091:11:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"}},"id":304,"indexExpression":{"id":303,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":294,"src":"4103:5:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4091:18:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":306,"indexExpression":{"id":305,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":296,"src":"4110:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4091:27:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":301,"id":307,"nodeType":"Return","src":"4084:34:1"}]},"documentation":{"id":292,"nodeType":"StructuredDocumentation","src":"3924:47:1","text":" @dev See {IERC20-allowance}."},"functionSelector":"dd62ed3e","id":309,"implemented":true,"kind":"function","modifiers":[],"name":"allowance","nameLocation":"3985:9:1","nodeType":"FunctionDefinition","overrides":{"id":298,"nodeType":"OverrideSpecifier","overrides":[],"src":"4047:8:1"},"parameters":{"id":297,"nodeType":"ParameterList","parameters":[{"constant":false,"id":294,"mutability":"mutable","name":"owner","nameLocation":"4003:5:1","nodeType":"VariableDeclaration","scope":309,"src":"3995:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":293,"name":"address","nodeType":"ElementaryTypeName","src":"3995:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":296,"mutability":"mutable","name":"spender","nameLocation":"4018:7:1","nodeType":"VariableDeclaration","scope":309,"src":"4010:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":295,"name":"address","nodeType":"ElementaryTypeName","src":"4010:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3994:32:1"},"returnParameters":{"id":301,"nodeType":"ParameterList","parameters":[{"constant":false,"id":300,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":309,"src":"4065:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":299,"name":"uint256","nodeType":"ElementaryTypeName","src":"4065:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4064:9:1"},"scope":753,"src":"3976:149:1","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[818],"body":{"id":333,"nodeType":"Block","src":"4522:108:1","statements":[{"assignments":[321],"declarations":[{"constant":false,"id":321,"mutability":"mutable","name":"owner","nameLocation":"4540:5:1","nodeType":"VariableDeclaration","scope":333,"src":"4532:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":320,"name":"address","nodeType":"ElementaryTypeName","src":"4532:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":324,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":322,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2054,"src":"4548:10:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":323,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4548:12:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"4532:28:1"},{"expression":{"arguments":[{"id":326,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":321,"src":"4579:5:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":327,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":312,"src":"4586:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":328,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":314,"src":"4595:6:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":325,"name":"_approve","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":687,"src":"4570:8:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":329,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4570:32:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":330,"nodeType":"ExpressionStatement","src":"4570:32:1"},{"expression":{"hexValue":"74727565","id":331,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"4619:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":319,"id":332,"nodeType":"Return","src":"4612:11:1"}]},"documentation":{"id":310,"nodeType":"StructuredDocumentation","src":"4131:297:1","text":" @dev See {IERC20-approve}.\n NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n `transferFrom`. This is semantically equivalent to an infinite approval.\n Requirements:\n - `spender` cannot be the zero address."},"functionSelector":"095ea7b3","id":334,"implemented":true,"kind":"function","modifiers":[],"name":"approve","nameLocation":"4442:7:1","nodeType":"FunctionDefinition","overrides":{"id":316,"nodeType":"OverrideSpecifier","overrides":[],"src":"4498:8:1"},"parameters":{"id":315,"nodeType":"ParameterList","parameters":[{"constant":false,"id":312,"mutability":"mutable","name":"spender","nameLocation":"4458:7:1","nodeType":"VariableDeclaration","scope":334,"src":"4450:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":311,"name":"address","nodeType":"ElementaryTypeName","src":"4450:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":314,"mutability":"mutable","name":"amount","nameLocation":"4475:6:1","nodeType":"VariableDeclaration","scope":334,"src":"4467:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":313,"name":"uint256","nodeType":"ElementaryTypeName","src":"4467:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4449:33:1"},"returnParameters":{"id":319,"nodeType":"ParameterList","parameters":[{"constant":false,"id":318,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":334,"src":"4516:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":317,"name":"bool","nodeType":"ElementaryTypeName","src":"4516:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4515:6:1"},"scope":753,"src":"4433:197:1","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[830],"body":{"id":366,"nodeType":"Block","src":"5325:153:1","statements":[{"assignments":[348],"declarations":[{"constant":false,"id":348,"mutability":"mutable","name":"spender","nameLocation":"5343:7:1","nodeType":"VariableDeclaration","scope":366,"src":"5335:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":347,"name":"address","nodeType":"ElementaryTypeName","src":"5335:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":351,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":349,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2054,"src":"5353:10:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":350,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5353:12:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"5335:30:1"},{"expression":{"arguments":[{"id":353,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":337,"src":"5391:4:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":354,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":348,"src":"5397:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":355,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":341,"src":"5406:6:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":352,"name":"_spendAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":730,"src":"5375:15:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":356,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5375:38:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":357,"nodeType":"ExpressionStatement","src":"5375:38:1"},{"expression":{"arguments":[{"id":359,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":337,"src":"5433:4:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":360,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":339,"src":"5439:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":361,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":341,"src":"5443:6:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":358,"name":"_transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":514,"src":"5423:9:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":362,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5423:27:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":363,"nodeType":"ExpressionStatement","src":"5423:27:1"},{"expression":{"hexValue":"74727565","id":364,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"5467:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":346,"id":365,"nodeType":"Return","src":"5460:11:1"}]},"documentation":{"id":335,"nodeType":"StructuredDocumentation","src":"4636:551:1","text":" @dev See {IERC20-transferFrom}.\n Emits an {Approval} event indicating the updated allowance. This is not\n required by the EIP. See the note at the beginning of {ERC20}.\n NOTE: Does not update the allowance if the current allowance\n is the maximum `uint256`.\n Requirements:\n - `from` and `to` cannot be the zero address.\n - `from` must have a balance of at least `amount`.\n - the caller must have allowance for ``from``'s tokens of at least\n `amount`."},"functionSelector":"23b872dd","id":367,"implemented":true,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"5201:12:1","nodeType":"FunctionDefinition","overrides":{"id":343,"nodeType":"OverrideSpecifier","overrides":[],"src":"5301:8:1"},"parameters":{"id":342,"nodeType":"ParameterList","parameters":[{"constant":false,"id":337,"mutability":"mutable","name":"from","nameLocation":"5231:4:1","nodeType":"VariableDeclaration","scope":367,"src":"5223:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":336,"name":"address","nodeType":"ElementaryTypeName","src":"5223:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":339,"mutability":"mutable","name":"to","nameLocation":"5253:2:1","nodeType":"VariableDeclaration","scope":367,"src":"5245:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":338,"name":"address","nodeType":"ElementaryTypeName","src":"5245:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":341,"mutability":"mutable","name":"amount","nameLocation":"5273:6:1","nodeType":"VariableDeclaration","scope":367,"src":"5265:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":340,"name":"uint256","nodeType":"ElementaryTypeName","src":"5265:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5213:72:1"},"returnParameters":{"id":346,"nodeType":"ParameterList","parameters":[{"constant":false,"id":345,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":367,"src":"5319:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":344,"name":"bool","nodeType":"ElementaryTypeName","src":"5319:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"5318:6:1"},"scope":753,"src":"5192:286:1","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":395,"nodeType":"Block","src":"5967:140:1","statements":[{"assignments":[378],"declarations":[{"constant":false,"id":378,"mutability":"mutable","name":"owner","nameLocation":"5985:5:1","nodeType":"VariableDeclaration","scope":395,"src":"5977:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":377,"name":"address","nodeType":"ElementaryTypeName","src":"5977:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":381,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":379,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2054,"src":"5993:10:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":380,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5993:12:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"5977:28:1"},{"expression":{"arguments":[{"id":383,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":378,"src":"6024:5:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":384,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":370,"src":"6031:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":390,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":386,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":378,"src":"6050:5:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":387,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":370,"src":"6057:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":385,"name":"allowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":309,"src":"6040:9:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view returns (uint256)"}},"id":388,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6040:25:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":389,"name":"addedValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":372,"src":"6068:10:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6040:38:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":382,"name":"_approve","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":687,"src":"6015:8:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":391,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6015:64:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":392,"nodeType":"ExpressionStatement","src":"6015:64:1"},{"expression":{"hexValue":"74727565","id":393,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"6096:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":376,"id":394,"nodeType":"Return","src":"6089:11:1"}]},"documentation":{"id":368,"nodeType":"StructuredDocumentation","src":"5484:384:1","text":" @dev Atomically increases the allowance granted to `spender` by the caller.\n This is an alternative to {approve} that can be used as a mitigation for\n problems described in {IERC20-approve}.\n Emits an {Approval} event indicating the updated allowance.\n Requirements:\n - `spender` cannot be the zero address."},"functionSelector":"39509351","id":396,"implemented":true,"kind":"function","modifiers":[],"name":"increaseAllowance","nameLocation":"5882:17:1","nodeType":"FunctionDefinition","parameters":{"id":373,"nodeType":"ParameterList","parameters":[{"constant":false,"id":370,"mutability":"mutable","name":"spender","nameLocation":"5908:7:1","nodeType":"VariableDeclaration","scope":396,"src":"5900:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":369,"name":"address","nodeType":"ElementaryTypeName","src":"5900:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":372,"mutability":"mutable","name":"addedValue","nameLocation":"5925:10:1","nodeType":"VariableDeclaration","scope":396,"src":"5917:18:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":371,"name":"uint256","nodeType":"ElementaryTypeName","src":"5917:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5899:37:1"},"returnParameters":{"id":376,"nodeType":"ParameterList","parameters":[{"constant":false,"id":375,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":396,"src":"5961:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":374,"name":"bool","nodeType":"ElementaryTypeName","src":"5961:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"5960:6:1"},"scope":753,"src":"5873:234:1","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":436,"nodeType":"Block","src":"6693:328:1","statements":[{"assignments":[407],"declarations":[{"constant":false,"id":407,"mutability":"mutable","name":"owner","nameLocation":"6711:5:1","nodeType":"VariableDeclaration","scope":436,"src":"6703:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":406,"name":"address","nodeType":"ElementaryTypeName","src":"6703:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":410,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":408,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2054,"src":"6719:10:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":409,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6719:12:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"6703:28:1"},{"assignments":[412],"declarations":[{"constant":false,"id":412,"mutability":"mutable","name":"currentAllowance","nameLocation":"6749:16:1","nodeType":"VariableDeclaration","scope":436,"src":"6741:24:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":411,"name":"uint256","nodeType":"ElementaryTypeName","src":"6741:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":417,"initialValue":{"arguments":[{"id":414,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":407,"src":"6778:5:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":415,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":399,"src":"6785:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":413,"name":"allowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":309,"src":"6768:9:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view returns (uint256)"}},"id":416,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6768:25:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6741:52:1"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":421,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":419,"name":"currentAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":412,"src":"6811:16:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":420,"name":"subtractedValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":401,"src":"6831:15:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6811:35:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f","id":422,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6848:39:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8","typeString":"literal_string \"ERC20: decreased allowance below zero\""},"value":"ERC20: decreased allowance below zero"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8","typeString":"literal_string \"ERC20: decreased allowance below zero\""}],"id":418,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6803:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":423,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6803:85:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":424,"nodeType":"ExpressionStatement","src":"6803:85:1"},{"id":433,"nodeType":"UncheckedBlock","src":"6898:95:1","statements":[{"expression":{"arguments":[{"id":426,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":407,"src":"6931:5:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":427,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":399,"src":"6938:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":430,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":428,"name":"currentAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":412,"src":"6947:16:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":429,"name":"subtractedValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":401,"src":"6966:15:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6947:34:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":425,"name":"_approve","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":687,"src":"6922:8:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":431,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6922:60:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":432,"nodeType":"ExpressionStatement","src":"6922:60:1"}]},{"expression":{"hexValue":"74727565","id":434,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"7010:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":405,"id":435,"nodeType":"Return","src":"7003:11:1"}]},"documentation":{"id":397,"nodeType":"StructuredDocumentation","src":"6113:476:1","text":" @dev Atomically decreases the allowance granted to `spender` by the caller.\n This is an alternative to {approve} that can be used as a mitigation for\n problems described in {IERC20-approve}.\n Emits an {Approval} event indicating the updated allowance.\n Requirements:\n - `spender` cannot be the zero address.\n - `spender` must have allowance for the caller of at least\n `subtractedValue`."},"functionSelector":"a457c2d7","id":437,"implemented":true,"kind":"function","modifiers":[],"name":"decreaseAllowance","nameLocation":"6603:17:1","nodeType":"FunctionDefinition","parameters":{"id":402,"nodeType":"ParameterList","parameters":[{"constant":false,"id":399,"mutability":"mutable","name":"spender","nameLocation":"6629:7:1","nodeType":"VariableDeclaration","scope":437,"src":"6621:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":398,"name":"address","nodeType":"ElementaryTypeName","src":"6621:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":401,"mutability":"mutable","name":"subtractedValue","nameLocation":"6646:15:1","nodeType":"VariableDeclaration","scope":437,"src":"6638:23:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":400,"name":"uint256","nodeType":"ElementaryTypeName","src":"6638:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6620:42:1"},"returnParameters":{"id":405,"nodeType":"ParameterList","parameters":[{"constant":false,"id":404,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":437,"src":"6687:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":403,"name":"bool","nodeType":"ElementaryTypeName","src":"6687:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6686:6:1"},"scope":753,"src":"6594:427:1","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":513,"nodeType":"Block","src":"7583:543:1","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":453,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":448,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":440,"src":"7601:4:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":451,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7617:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":450,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7609:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":449,"name":"address","nodeType":"ElementaryTypeName","src":"7609:7:1","typeDescriptions":{}}},"id":452,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7609:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7601:18:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a207472616e736665722066726f6d20746865207a65726f2061646472657373","id":454,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7621:39:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea","typeString":"literal_string \"ERC20: transfer from the zero address\""},"value":"ERC20: transfer from the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea","typeString":"literal_string \"ERC20: transfer from the zero address\""}],"id":447,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"7593:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":455,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7593:68:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":456,"nodeType":"ExpressionStatement","src":"7593:68:1"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":463,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":458,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":442,"src":"7679:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":461,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7693:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":460,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7685:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":459,"name":"address","nodeType":"ElementaryTypeName","src":"7685:7:1","typeDescriptions":{}}},"id":462,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7685:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7679:16:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a207472616e7366657220746f20746865207a65726f2061646472657373","id":464,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7697:37:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f","typeString":"literal_string \"ERC20: transfer to the zero address\""},"value":"ERC20: transfer to the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f","typeString":"literal_string \"ERC20: transfer to the zero address\""}],"id":457,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"7671:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":465,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7671:64:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":466,"nodeType":"ExpressionStatement","src":"7671:64:1"},{"expression":{"arguments":[{"id":468,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":440,"src":"7767:4:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":469,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":442,"src":"7773:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":470,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":444,"src":"7777:6:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":467,"name":"_beforeTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":741,"src":"7746:20:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":471,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7746:38:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":472,"nodeType":"ExpressionStatement","src":"7746:38:1"},{"assignments":[474],"declarations":[{"constant":false,"id":474,"mutability":"mutable","name":"fromBalance","nameLocation":"7803:11:1","nodeType":"VariableDeclaration","scope":513,"src":"7795:19:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":473,"name":"uint256","nodeType":"ElementaryTypeName","src":"7795:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":478,"initialValue":{"baseExpression":{"id":475,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":183,"src":"7817:9:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":477,"indexExpression":{"id":476,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":440,"src":"7827:4:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7817:15:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7795:37:1"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":482,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":480,"name":"fromBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":474,"src":"7850:11:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":481,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":444,"src":"7865:6:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7850:21:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e6365","id":483,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7873:40:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6","typeString":"literal_string \"ERC20: transfer amount exceeds balance\""},"value":"ERC20: transfer amount exceeds balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6","typeString":"literal_string \"ERC20: transfer amount exceeds balance\""}],"id":479,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"7842:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":484,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7842:72:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":485,"nodeType":"ExpressionStatement","src":"7842:72:1"},{"id":494,"nodeType":"UncheckedBlock","src":"7924:73:1","statements":[{"expression":{"id":492,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":486,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":183,"src":"7948:9:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":488,"indexExpression":{"id":487,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":440,"src":"7958:4:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"7948:15:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":491,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":489,"name":"fromBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":474,"src":"7966:11:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":490,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":444,"src":"7980:6:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7966:20:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7948:38:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":493,"nodeType":"ExpressionStatement","src":"7948:38:1"}]},{"expression":{"id":499,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":495,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":183,"src":"8006:9:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":497,"indexExpression":{"id":496,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":442,"src":"8016:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"8006:13:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":498,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":444,"src":"8023:6:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8006:23:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":500,"nodeType":"ExpressionStatement","src":"8006:23:1"},{"eventCall":{"arguments":[{"id":502,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":440,"src":"8054:4:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":503,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":442,"src":"8060:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":504,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":444,"src":"8064:6:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":501,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":765,"src":"8045:8:1","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":505,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8045:26:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":506,"nodeType":"EmitStatement","src":"8040:31:1"},{"expression":{"arguments":[{"id":508,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":440,"src":"8102:4:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":509,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":442,"src":"8108:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":510,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":444,"src":"8112:6:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":507,"name":"_afterTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":752,"src":"8082:19:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":511,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8082:37:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":512,"nodeType":"ExpressionStatement","src":"8082:37:1"}]},"documentation":{"id":438,"nodeType":"StructuredDocumentation","src":"7027:443:1","text":" @dev Moves `amount` of tokens from `from` to `to`.\n This internal function is equivalent to {transfer}, and can be used to\n e.g. implement automatic token fees, slashing mechanisms, etc.\n Emits a {Transfer} event.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `from` must have a balance of at least `amount`."},"id":514,"implemented":true,"kind":"function","modifiers":[],"name":"_transfer","nameLocation":"7484:9:1","nodeType":"FunctionDefinition","parameters":{"id":445,"nodeType":"ParameterList","parameters":[{"constant":false,"id":440,"mutability":"mutable","name":"from","nameLocation":"7511:4:1","nodeType":"VariableDeclaration","scope":514,"src":"7503:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":439,"name":"address","nodeType":"ElementaryTypeName","src":"7503:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":442,"mutability":"mutable","name":"to","nameLocation":"7533:2:1","nodeType":"VariableDeclaration","scope":514,"src":"7525:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":441,"name":"address","nodeType":"ElementaryTypeName","src":"7525:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":444,"mutability":"mutable","name":"amount","nameLocation":"7553:6:1","nodeType":"VariableDeclaration","scope":514,"src":"7545:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":443,"name":"uint256","nodeType":"ElementaryTypeName","src":"7545:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7493:72:1"},"returnParameters":{"id":446,"nodeType":"ParameterList","parameters":[],"src":"7583:0:1"},"scope":753,"src":"7475:651:1","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":569,"nodeType":"Block","src":"8467:324:1","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":528,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":523,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":517,"src":"8485:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":526,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8504:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":525,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8496:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":524,"name":"address","nodeType":"ElementaryTypeName","src":"8496:7:1","typeDescriptions":{}}},"id":527,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8496:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"8485:21:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a206d696e7420746f20746865207a65726f2061646472657373","id":529,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8508:33:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e","typeString":"literal_string \"ERC20: mint to the zero address\""},"value":"ERC20: mint to the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e","typeString":"literal_string \"ERC20: mint to the zero address\""}],"id":522,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"8477:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":530,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8477:65:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":531,"nodeType":"ExpressionStatement","src":"8477:65:1"},{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":535,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8582:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":534,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8574:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":533,"name":"address","nodeType":"ElementaryTypeName","src":"8574:7:1","typeDescriptions":{}}},"id":536,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8574:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":537,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":517,"src":"8586:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":538,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":519,"src":"8595:6:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":532,"name":"_beforeTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":741,"src":"8553:20:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":539,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8553:49:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":540,"nodeType":"ExpressionStatement","src":"8553:49:1"},{"expression":{"id":543,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":541,"name":"_totalSupply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":191,"src":"8613:12:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":542,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":519,"src":"8629:6:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8613:22:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":544,"nodeType":"ExpressionStatement","src":"8613:22:1"},{"expression":{"id":549,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":545,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":183,"src":"8645:9:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":547,"indexExpression":{"id":546,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":517,"src":"8655:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"8645:18:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":548,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":519,"src":"8667:6:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8645:28:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":550,"nodeType":"ExpressionStatement","src":"8645:28:1"},{"eventCall":{"arguments":[{"arguments":[{"hexValue":"30","id":554,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8705:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":553,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8697:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":552,"name":"address","nodeType":"ElementaryTypeName","src":"8697:7:1","typeDescriptions":{}}},"id":555,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8697:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":556,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":517,"src":"8709:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":557,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":519,"src":"8718:6:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":551,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":765,"src":"8688:8:1","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":558,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8688:37:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":559,"nodeType":"EmitStatement","src":"8683:42:1"},{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":563,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8764:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":562,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8756:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":561,"name":"address","nodeType":"ElementaryTypeName","src":"8756:7:1","typeDescriptions":{}}},"id":564,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8756:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":565,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":517,"src":"8768:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":566,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":519,"src":"8777:6:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":560,"name":"_afterTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":752,"src":"8736:19:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":567,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8736:48:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":568,"nodeType":"ExpressionStatement","src":"8736:48:1"}]},"documentation":{"id":515,"nodeType":"StructuredDocumentation","src":"8132:265:1","text":"@dev Creates `amount` tokens and assigns them to `account`, increasing\n the total supply.\n Emits a {Transfer} event with `from` set to the zero address.\n Requirements:\n - `account` cannot be the zero address."},"id":570,"implemented":true,"kind":"function","modifiers":[],"name":"_mint","nameLocation":"8411:5:1","nodeType":"FunctionDefinition","parameters":{"id":520,"nodeType":"ParameterList","parameters":[{"constant":false,"id":517,"mutability":"mutable","name":"account","nameLocation":"8425:7:1","nodeType":"VariableDeclaration","scope":570,"src":"8417:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":516,"name":"address","nodeType":"ElementaryTypeName","src":"8417:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":519,"mutability":"mutable","name":"amount","nameLocation":"8442:6:1","nodeType":"VariableDeclaration","scope":570,"src":"8434:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":518,"name":"uint256","nodeType":"ElementaryTypeName","src":"8434:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8416:33:1"},"returnParameters":{"id":521,"nodeType":"ParameterList","parameters":[],"src":"8467:0:1"},"scope":753,"src":"8402:389:1","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":641,"nodeType":"Block","src":"9176:511:1","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":584,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":579,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":573,"src":"9194:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":582,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9213:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":581,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9205:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":580,"name":"address","nodeType":"ElementaryTypeName","src":"9205:7:1","typeDescriptions":{}}},"id":583,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9205:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"9194:21:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a206275726e2066726f6d20746865207a65726f2061646472657373","id":585,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9217:35:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f","typeString":"literal_string \"ERC20: burn from the zero address\""},"value":"ERC20: burn from the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f","typeString":"literal_string \"ERC20: burn from the zero address\""}],"id":578,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"9186:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":586,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9186:67:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":587,"nodeType":"ExpressionStatement","src":"9186:67:1"},{"expression":{"arguments":[{"id":589,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":573,"src":"9285:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":592,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9302:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":591,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9294:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":590,"name":"address","nodeType":"ElementaryTypeName","src":"9294:7:1","typeDescriptions":{}}},"id":593,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9294:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":594,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":575,"src":"9306:6:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":588,"name":"_beforeTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":741,"src":"9264:20:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":595,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9264:49:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":596,"nodeType":"ExpressionStatement","src":"9264:49:1"},{"assignments":[598],"declarations":[{"constant":false,"id":598,"mutability":"mutable","name":"accountBalance","nameLocation":"9332:14:1","nodeType":"VariableDeclaration","scope":641,"src":"9324:22:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":597,"name":"uint256","nodeType":"ElementaryTypeName","src":"9324:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":602,"initialValue":{"baseExpression":{"id":599,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":183,"src":"9349:9:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":601,"indexExpression":{"id":600,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":573,"src":"9359:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9349:18:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9324:43:1"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":606,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":604,"name":"accountBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":598,"src":"9385:14:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":605,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":575,"src":"9403:6:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9385:24:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a206275726e20616d6f756e7420657863656564732062616c616e6365","id":607,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9411:36:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd","typeString":"literal_string \"ERC20: burn amount exceeds balance\""},"value":"ERC20: burn amount exceeds balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd","typeString":"literal_string \"ERC20: burn amount exceeds balance\""}],"id":603,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"9377:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":608,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9377:71:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":609,"nodeType":"ExpressionStatement","src":"9377:71:1"},{"id":618,"nodeType":"UncheckedBlock","src":"9458:79:1","statements":[{"expression":{"id":616,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":610,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":183,"src":"9482:9:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":612,"indexExpression":{"id":611,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":573,"src":"9492:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"9482:18:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":615,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":613,"name":"accountBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":598,"src":"9503:14:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":614,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":575,"src":"9520:6:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9503:23:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9482:44:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":617,"nodeType":"ExpressionStatement","src":"9482:44:1"}]},{"expression":{"id":621,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":619,"name":"_totalSupply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":191,"src":"9546:12:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":620,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":575,"src":"9562:6:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9546:22:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":622,"nodeType":"ExpressionStatement","src":"9546:22:1"},{"eventCall":{"arguments":[{"id":624,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":573,"src":"9593:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":627,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9610:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":626,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9602:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":625,"name":"address","nodeType":"ElementaryTypeName","src":"9602:7:1","typeDescriptions":{}}},"id":628,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9602:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":629,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":575,"src":"9614:6:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":623,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":765,"src":"9584:8:1","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":630,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9584:37:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":631,"nodeType":"EmitStatement","src":"9579:42:1"},{"expression":{"arguments":[{"id":633,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":573,"src":"9652:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":636,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9669:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":635,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9661:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":634,"name":"address","nodeType":"ElementaryTypeName","src":"9661:7:1","typeDescriptions":{}}},"id":637,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9661:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":638,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":575,"src":"9673:6:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":632,"name":"_afterTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":752,"src":"9632:19:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":639,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9632:48:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":640,"nodeType":"ExpressionStatement","src":"9632:48:1"}]},"documentation":{"id":571,"nodeType":"StructuredDocumentation","src":"8797:309:1","text":" @dev Destroys `amount` tokens from `account`, reducing the\n total supply.\n Emits a {Transfer} event with `to` set to the zero address.\n Requirements:\n - `account` cannot be the zero address.\n - `account` must have at least `amount` tokens."},"id":642,"implemented":true,"kind":"function","modifiers":[],"name":"_burn","nameLocation":"9120:5:1","nodeType":"FunctionDefinition","parameters":{"id":576,"nodeType":"ParameterList","parameters":[{"constant":false,"id":573,"mutability":"mutable","name":"account","nameLocation":"9134:7:1","nodeType":"VariableDeclaration","scope":642,"src":"9126:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":572,"name":"address","nodeType":"ElementaryTypeName","src":"9126:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":575,"mutability":"mutable","name":"amount","nameLocation":"9151:6:1","nodeType":"VariableDeclaration","scope":642,"src":"9143:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":574,"name":"uint256","nodeType":"ElementaryTypeName","src":"9143:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9125:33:1"},"returnParameters":{"id":577,"nodeType":"ParameterList","parameters":[],"src":"9176:0:1"},"scope":753,"src":"9111:576:1","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":686,"nodeType":"Block","src":"10223:257:1","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":658,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":653,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":645,"src":"10241:5:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":656,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10258:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":655,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10250:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":654,"name":"address","nodeType":"ElementaryTypeName","src":"10250:7:1","typeDescriptions":{}}},"id":657,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10250:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"10241:19:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a20617070726f76652066726f6d20746865207a65726f2061646472657373","id":659,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"10262:38:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208","typeString":"literal_string \"ERC20: approve from the zero address\""},"value":"ERC20: approve from the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208","typeString":"literal_string \"ERC20: approve from the zero address\""}],"id":652,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"10233:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":660,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10233:68:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":661,"nodeType":"ExpressionStatement","src":"10233:68:1"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":668,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":663,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":647,"src":"10319:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":666,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10338:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":665,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10330:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":664,"name":"address","nodeType":"ElementaryTypeName","src":"10330:7:1","typeDescriptions":{}}},"id":667,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10330:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"10319:21:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a20617070726f766520746f20746865207a65726f2061646472657373","id":669,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"10342:36:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029","typeString":"literal_string \"ERC20: approve to the zero address\""},"value":"ERC20: approve to the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029","typeString":"literal_string \"ERC20: approve to the zero address\""}],"id":662,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"10311:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":670,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10311:68:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":671,"nodeType":"ExpressionStatement","src":"10311:68:1"},{"expression":{"id":678,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":672,"name":"_allowances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":189,"src":"10390:11:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"}},"id":675,"indexExpression":{"id":673,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":645,"src":"10402:5:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10390:18:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":676,"indexExpression":{"id":674,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":647,"src":"10409:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"10390:27:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":677,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":649,"src":"10420:6:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10390:36:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":679,"nodeType":"ExpressionStatement","src":"10390:36:1"},{"eventCall":{"arguments":[{"id":681,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":645,"src":"10450:5:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":682,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":647,"src":"10457:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":683,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":649,"src":"10466:6:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":680,"name":"Approval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":774,"src":"10441:8:1","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":684,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10441:32:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":685,"nodeType":"EmitStatement","src":"10436:37:1"}]},"documentation":{"id":643,"nodeType":"StructuredDocumentation","src":"9693:412:1","text":" @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n This internal function is equivalent to `approve`, and can be used to\n e.g. set automatic allowances for certain subsystems, etc.\n Emits an {Approval} event.\n Requirements:\n - `owner` cannot be the zero address.\n - `spender` cannot be the zero address."},"id":687,"implemented":true,"kind":"function","modifiers":[],"name":"_approve","nameLocation":"10119:8:1","nodeType":"FunctionDefinition","parameters":{"id":650,"nodeType":"ParameterList","parameters":[{"constant":false,"id":645,"mutability":"mutable","name":"owner","nameLocation":"10145:5:1","nodeType":"VariableDeclaration","scope":687,"src":"10137:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":644,"name":"address","nodeType":"ElementaryTypeName","src":"10137:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":647,"mutability":"mutable","name":"spender","nameLocation":"10168:7:1","nodeType":"VariableDeclaration","scope":687,"src":"10160:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":646,"name":"address","nodeType":"ElementaryTypeName","src":"10160:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":649,"mutability":"mutable","name":"amount","nameLocation":"10193:6:1","nodeType":"VariableDeclaration","scope":687,"src":"10185:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":648,"name":"uint256","nodeType":"ElementaryTypeName","src":"10185:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10127:78:1"},"returnParameters":{"id":651,"nodeType":"ParameterList","parameters":[],"src":"10223:0:1"},"scope":753,"src":"10110:370:1","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":729,"nodeType":"Block","src":"10881:321:1","statements":[{"assignments":[698],"declarations":[{"constant":false,"id":698,"mutability":"mutable","name":"currentAllowance","nameLocation":"10899:16:1","nodeType":"VariableDeclaration","scope":729,"src":"10891:24:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":697,"name":"uint256","nodeType":"ElementaryTypeName","src":"10891:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":703,"initialValue":{"arguments":[{"id":700,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":690,"src":"10928:5:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":701,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":692,"src":"10935:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":699,"name":"allowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":309,"src":"10918:9:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view returns (uint256)"}},"id":702,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10918:25:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"10891:52:1"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":710,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":704,"name":"currentAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":698,"src":"10957:16:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"arguments":[{"id":707,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10982:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":706,"name":"uint256","nodeType":"ElementaryTypeName","src":"10982:7:1","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"}],"id":705,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"10977:4:1","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":708,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10977:13:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint256","typeString":"type(uint256)"}},"id":709,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"max","nodeType":"MemberAccess","src":"10977:17:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10957:37:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":728,"nodeType":"IfStatement","src":"10953:243:1","trueBody":{"id":727,"nodeType":"Block","src":"10996:200:1","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":714,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":712,"name":"currentAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":698,"src":"11018:16:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":713,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":694,"src":"11038:6:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11018:26:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a20696e73756666696369656e7420616c6c6f77616e6365","id":715,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"11046:31:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe","typeString":"literal_string \"ERC20: insufficient allowance\""},"value":"ERC20: insufficient allowance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe","typeString":"literal_string \"ERC20: insufficient allowance\""}],"id":711,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"11010:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":716,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11010:68:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":717,"nodeType":"ExpressionStatement","src":"11010:68:1"},{"id":726,"nodeType":"UncheckedBlock","src":"11092:94:1","statements":[{"expression":{"arguments":[{"id":719,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":690,"src":"11129:5:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":720,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":692,"src":"11136:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":723,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":721,"name":"currentAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":698,"src":"11145:16:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":722,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":694,"src":"11164:6:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11145:25:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":718,"name":"_approve","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":687,"src":"11120:8:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":724,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11120:51:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":725,"nodeType":"ExpressionStatement","src":"11120:51:1"}]}]}}]},"documentation":{"id":688,"nodeType":"StructuredDocumentation","src":"10486:270:1","text":" @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n Does not update the allowance amount in case of infinite allowance.\n Revert if not enough allowance is available.\n Might emit an {Approval} event."},"id":730,"implemented":true,"kind":"function","modifiers":[],"name":"_spendAllowance","nameLocation":"10770:15:1","nodeType":"FunctionDefinition","parameters":{"id":695,"nodeType":"ParameterList","parameters":[{"constant":false,"id":690,"mutability":"mutable","name":"owner","nameLocation":"10803:5:1","nodeType":"VariableDeclaration","scope":730,"src":"10795:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":689,"name":"address","nodeType":"ElementaryTypeName","src":"10795:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":692,"mutability":"mutable","name":"spender","nameLocation":"10826:7:1","nodeType":"VariableDeclaration","scope":730,"src":"10818:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":691,"name":"address","nodeType":"ElementaryTypeName","src":"10818:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":694,"mutability":"mutable","name":"amount","nameLocation":"10851:6:1","nodeType":"VariableDeclaration","scope":730,"src":"10843:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":693,"name":"uint256","nodeType":"ElementaryTypeName","src":"10843:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10785:78:1"},"returnParameters":{"id":696,"nodeType":"ParameterList","parameters":[],"src":"10881:0:1"},"scope":753,"src":"10761:441:1","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":740,"nodeType":"Block","src":"11905:2:1","statements":[]},"documentation":{"id":731,"nodeType":"StructuredDocumentation","src":"11208:573:1","text":" @dev Hook that is called before any transfer of tokens. This includes\n minting and burning.\n Calling conditions:\n - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n will be transferred to `to`.\n - when `from` is zero, `amount` tokens will be minted for `to`.\n - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n - `from` and `to` are never both zero.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."},"id":741,"implemented":true,"kind":"function","modifiers":[],"name":"_beforeTokenTransfer","nameLocation":"11795:20:1","nodeType":"FunctionDefinition","parameters":{"id":738,"nodeType":"ParameterList","parameters":[{"constant":false,"id":733,"mutability":"mutable","name":"from","nameLocation":"11833:4:1","nodeType":"VariableDeclaration","scope":741,"src":"11825:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":732,"name":"address","nodeType":"ElementaryTypeName","src":"11825:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":735,"mutability":"mutable","name":"to","nameLocation":"11855:2:1","nodeType":"VariableDeclaration","scope":741,"src":"11847:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":734,"name":"address","nodeType":"ElementaryTypeName","src":"11847:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":737,"mutability":"mutable","name":"amount","nameLocation":"11875:6:1","nodeType":"VariableDeclaration","scope":741,"src":"11867:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":736,"name":"uint256","nodeType":"ElementaryTypeName","src":"11867:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11815:72:1"},"returnParameters":{"id":739,"nodeType":"ParameterList","parameters":[],"src":"11905:0:1"},"scope":753,"src":"11786:121:1","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":751,"nodeType":"Block","src":"12613:2:1","statements":[]},"documentation":{"id":742,"nodeType":"StructuredDocumentation","src":"11913:577:1","text":" @dev Hook that is called after any transfer of tokens. This includes\n minting and burning.\n Calling conditions:\n - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n has been transferred to `to`.\n - when `from` is zero, `amount` tokens have been minted for `to`.\n - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n - `from` and `to` are never both zero.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."},"id":752,"implemented":true,"kind":"function","modifiers":[],"name":"_afterTokenTransfer","nameLocation":"12504:19:1","nodeType":"FunctionDefinition","parameters":{"id":749,"nodeType":"ParameterList","parameters":[{"constant":false,"id":744,"mutability":"mutable","name":"from","nameLocation":"12541:4:1","nodeType":"VariableDeclaration","scope":752,"src":"12533:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":743,"name":"address","nodeType":"ElementaryTypeName","src":"12533:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":746,"mutability":"mutable","name":"to","nameLocation":"12563:2:1","nodeType":"VariableDeclaration","scope":752,"src":"12555:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":745,"name":"address","nodeType":"ElementaryTypeName","src":"12555:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":748,"mutability":"mutable","name":"amount","nameLocation":"12583:6:1","nodeType":"VariableDeclaration","scope":752,"src":"12575:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":747,"name":"uint256","nodeType":"ElementaryTypeName","src":"12575:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12523:72:1"},"returnParameters":{"id":750,"nodeType":"ParameterList","parameters":[],"src":"12613:0:1"},"scope":753,"src":"12495:120:1","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":754,"src":"1403:11214:1","usedErrors":[]}],"src":"105:12513:1"},"id":1},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","exportedSymbols":{"IERC20":[831]},"id":832,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":755,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"106:23:2"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"interface","documentation":{"id":756,"nodeType":"StructuredDocumentation","src":"131:70:2","text":" @dev Interface of the ERC20 standard as defined in the EIP."},"fullyImplemented":false,"id":831,"linearizedBaseContracts":[831],"name":"IERC20","nameLocation":"212:6:2","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":757,"nodeType":"StructuredDocumentation","src":"225:158:2","text":" @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."},"id":765,"name":"Transfer","nameLocation":"394:8:2","nodeType":"EventDefinition","parameters":{"id":764,"nodeType":"ParameterList","parameters":[{"constant":false,"id":759,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"419:4:2","nodeType":"VariableDeclaration","scope":765,"src":"403:20:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":758,"name":"address","nodeType":"ElementaryTypeName","src":"403:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":761,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"441:2:2","nodeType":"VariableDeclaration","scope":765,"src":"425:18:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":760,"name":"address","nodeType":"ElementaryTypeName","src":"425:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":763,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"453:5:2","nodeType":"VariableDeclaration","scope":765,"src":"445:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":762,"name":"uint256","nodeType":"ElementaryTypeName","src":"445:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"402:57:2"},"src":"388:72:2"},{"anonymous":false,"documentation":{"id":766,"nodeType":"StructuredDocumentation","src":"466:148:2","text":" @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."},"id":774,"name":"Approval","nameLocation":"625:8:2","nodeType":"EventDefinition","parameters":{"id":773,"nodeType":"ParameterList","parameters":[{"constant":false,"id":768,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"650:5:2","nodeType":"VariableDeclaration","scope":774,"src":"634:21:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":767,"name":"address","nodeType":"ElementaryTypeName","src":"634:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":770,"indexed":true,"mutability":"mutable","name":"spender","nameLocation":"673:7:2","nodeType":"VariableDeclaration","scope":774,"src":"657:23:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":769,"name":"address","nodeType":"ElementaryTypeName","src":"657:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":772,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"690:5:2","nodeType":"VariableDeclaration","scope":774,"src":"682:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":771,"name":"uint256","nodeType":"ElementaryTypeName","src":"682:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"633:63:2"},"src":"619:78:2"},{"documentation":{"id":775,"nodeType":"StructuredDocumentation","src":"703:66:2","text":" @dev Returns the amount of tokens in existence."},"functionSelector":"18160ddd","id":780,"implemented":false,"kind":"function","modifiers":[],"name":"totalSupply","nameLocation":"783:11:2","nodeType":"FunctionDefinition","parameters":{"id":776,"nodeType":"ParameterList","parameters":[],"src":"794:2:2"},"returnParameters":{"id":779,"nodeType":"ParameterList","parameters":[{"constant":false,"id":778,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":780,"src":"820:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":777,"name":"uint256","nodeType":"ElementaryTypeName","src":"820:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"819:9:2"},"scope":831,"src":"774:55:2","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":781,"nodeType":"StructuredDocumentation","src":"835:72:2","text":" @dev Returns the amount of tokens owned by `account`."},"functionSelector":"70a08231","id":788,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"921:9:2","nodeType":"FunctionDefinition","parameters":{"id":784,"nodeType":"ParameterList","parameters":[{"constant":false,"id":783,"mutability":"mutable","name":"account","nameLocation":"939:7:2","nodeType":"VariableDeclaration","scope":788,"src":"931:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":782,"name":"address","nodeType":"ElementaryTypeName","src":"931:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"930:17:2"},"returnParameters":{"id":787,"nodeType":"ParameterList","parameters":[{"constant":false,"id":786,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":788,"src":"971:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":785,"name":"uint256","nodeType":"ElementaryTypeName","src":"971:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"970:9:2"},"scope":831,"src":"912:68:2","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":789,"nodeType":"StructuredDocumentation","src":"986:202:2","text":" @dev Moves `amount` tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."},"functionSelector":"a9059cbb","id":798,"implemented":false,"kind":"function","modifiers":[],"name":"transfer","nameLocation":"1202:8:2","nodeType":"FunctionDefinition","parameters":{"id":794,"nodeType":"ParameterList","parameters":[{"constant":false,"id":791,"mutability":"mutable","name":"to","nameLocation":"1219:2:2","nodeType":"VariableDeclaration","scope":798,"src":"1211:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":790,"name":"address","nodeType":"ElementaryTypeName","src":"1211:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":793,"mutability":"mutable","name":"amount","nameLocation":"1231:6:2","nodeType":"VariableDeclaration","scope":798,"src":"1223:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":792,"name":"uint256","nodeType":"ElementaryTypeName","src":"1223:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1210:28:2"},"returnParameters":{"id":797,"nodeType":"ParameterList","parameters":[{"constant":false,"id":796,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":798,"src":"1257:4:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":795,"name":"bool","nodeType":"ElementaryTypeName","src":"1257:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1256:6:2"},"scope":831,"src":"1193:70:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":799,"nodeType":"StructuredDocumentation","src":"1269:264:2","text":" @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."},"functionSelector":"dd62ed3e","id":808,"implemented":false,"kind":"function","modifiers":[],"name":"allowance","nameLocation":"1547:9:2","nodeType":"FunctionDefinition","parameters":{"id":804,"nodeType":"ParameterList","parameters":[{"constant":false,"id":801,"mutability":"mutable","name":"owner","nameLocation":"1565:5:2","nodeType":"VariableDeclaration","scope":808,"src":"1557:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":800,"name":"address","nodeType":"ElementaryTypeName","src":"1557:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":803,"mutability":"mutable","name":"spender","nameLocation":"1580:7:2","nodeType":"VariableDeclaration","scope":808,"src":"1572:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":802,"name":"address","nodeType":"ElementaryTypeName","src":"1572:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1556:32:2"},"returnParameters":{"id":807,"nodeType":"ParameterList","parameters":[{"constant":false,"id":806,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":808,"src":"1612:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":805,"name":"uint256","nodeType":"ElementaryTypeName","src":"1612:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1611:9:2"},"scope":831,"src":"1538:83:2","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":809,"nodeType":"StructuredDocumentation","src":"1627:642:2","text":" @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."},"functionSelector":"095ea7b3","id":818,"implemented":false,"kind":"function","modifiers":[],"name":"approve","nameLocation":"2283:7:2","nodeType":"FunctionDefinition","parameters":{"id":814,"nodeType":"ParameterList","parameters":[{"constant":false,"id":811,"mutability":"mutable","name":"spender","nameLocation":"2299:7:2","nodeType":"VariableDeclaration","scope":818,"src":"2291:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":810,"name":"address","nodeType":"ElementaryTypeName","src":"2291:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":813,"mutability":"mutable","name":"amount","nameLocation":"2316:6:2","nodeType":"VariableDeclaration","scope":818,"src":"2308:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":812,"name":"uint256","nodeType":"ElementaryTypeName","src":"2308:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2290:33:2"},"returnParameters":{"id":817,"nodeType":"ParameterList","parameters":[{"constant":false,"id":816,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":818,"src":"2342:4:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":815,"name":"bool","nodeType":"ElementaryTypeName","src":"2342:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2341:6:2"},"scope":831,"src":"2274:74:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":819,"nodeType":"StructuredDocumentation","src":"2354:287:2","text":" @dev Moves `amount` tokens from `from` to `to` using the\n allowance mechanism. `amount` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."},"functionSelector":"23b872dd","id":830,"implemented":false,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"2655:12:2","nodeType":"FunctionDefinition","parameters":{"id":826,"nodeType":"ParameterList","parameters":[{"constant":false,"id":821,"mutability":"mutable","name":"from","nameLocation":"2685:4:2","nodeType":"VariableDeclaration","scope":830,"src":"2677:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":820,"name":"address","nodeType":"ElementaryTypeName","src":"2677:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":823,"mutability":"mutable","name":"to","nameLocation":"2707:2:2","nodeType":"VariableDeclaration","scope":830,"src":"2699:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":822,"name":"address","nodeType":"ElementaryTypeName","src":"2699:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":825,"mutability":"mutable","name":"amount","nameLocation":"2727:6:2","nodeType":"VariableDeclaration","scope":830,"src":"2719:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":824,"name":"uint256","nodeType":"ElementaryTypeName","src":"2719:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2667:72:2"},"returnParameters":{"id":829,"nodeType":"ParameterList","parameters":[{"constant":false,"id":828,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":830,"src":"2758:4:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":827,"name":"bool","nodeType":"ElementaryTypeName","src":"2758:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2757:6:2"},"scope":831,"src":"2646:118:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":832,"src":"202:2564:2","usedErrors":[]}],"src":"106:2661:2"},"id":2},"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol","exportedSymbols":{"Address":[2042],"Context":[2064],"ERC20":[753],"ERC4626":[1405],"IERC20":[831],"IERC20Metadata":[1430],"IERC20Permit":[1466],"IERC4626":[167],"Math":[2568],"SafeERC20":[1747]},"id":1406,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":833,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"118:23:3"},{"absolutePath":"@openzeppelin/contracts/token/ERC20/ERC20.sol","file":"../ERC20.sol","id":834,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1406,"sourceUnit":754,"src":"143:22:3","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol","file":"../utils/SafeERC20.sol","id":835,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1406,"sourceUnit":1748,"src":"166:32:3","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/interfaces/IERC4626.sol","file":"../../../interfaces/IERC4626.sol","id":836,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1406,"sourceUnit":168,"src":"199:42:3","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/math/Math.sol","file":"../../../utils/math/Math.sol","id":837,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1406,"sourceUnit":2569,"src":"242:38:3","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":839,"name":"ERC20","nodeType":"IdentifierPath","referencedDeclaration":753,"src":"1222:5:3"},"id":840,"nodeType":"InheritanceSpecifier","src":"1222:5:3"},{"baseName":{"id":841,"name":"IERC4626","nodeType":"IdentifierPath","referencedDeclaration":167,"src":"1229:8:3"},"id":842,"nodeType":"InheritanceSpecifier","src":"1229:8:3"}],"contractDependencies":[],"contractKind":"contract","documentation":{"id":838,"nodeType":"StructuredDocumentation","src":"282:910:3","text":" @dev Implementation of the ERC4626 \"Tokenized Vault Standard\" as defined in\n https://eips.ethereum.org/EIPS/eip-4626[EIP-4626].\n This extension allows the minting and burning of \"shares\" (represented using the ERC20 inheritance) in exchange for\n underlying \"assets\" through standardized {deposit}, {mint}, {redeem} and {burn} workflows. This contract extends\n the ERC20 standard. Any additional extensions included along it would affect the \"shares\" token represented by this\n contract and not the \"assets\" token which is an independent contract.\n CAUTION: Deposits and withdrawals may incur unexpected slippage. Users should verify that the amount received of\n shares or assets is as expected. EOAs should operate through a wrapper that performs these checks such as\n https://github.com/fei-protocol/ERC4626#erc4626router-and-base[ERC4626Router].\n _Available since v4.7._"},"fullyImplemented":false,"id":1405,"linearizedBaseContracts":[1405,167,753,1430,831,2064],"name":"ERC4626","nameLocation":"1211:7:3","nodeType":"ContractDefinition","nodes":[{"id":845,"libraryName":{"id":843,"name":"Math","nodeType":"IdentifierPath","referencedDeclaration":2568,"src":"1250:4:3"},"nodeType":"UsingForDirective","src":"1244:23:3","typeName":{"id":844,"name":"uint256","nodeType":"ElementaryTypeName","src":"1259:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},{"constant":false,"id":848,"mutability":"immutable","name":"_asset","nameLocation":"1306:6:3","nodeType":"VariableDeclaration","scope":1405,"src":"1273:39:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Metadata_$1430","typeString":"contract IERC20Metadata"},"typeName":{"id":847,"nodeType":"UserDefinedTypeName","pathNode":{"id":846,"name":"IERC20Metadata","nodeType":"IdentifierPath","referencedDeclaration":1430,"src":"1273:14:3"},"referencedDeclaration":1430,"src":"1273:14:3","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Metadata_$1430","typeString":"contract IERC20Metadata"}},"visibility":"private"},{"body":{"id":859,"nodeType":"Block","src":"1478:32:3","statements":[{"expression":{"id":857,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":855,"name":"_asset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":848,"src":"1488:6:3","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Metadata_$1430","typeString":"contract IERC20Metadata"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":856,"name":"asset_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":852,"src":"1497:6:3","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Metadata_$1430","typeString":"contract IERC20Metadata"}},"src":"1488:15:3","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Metadata_$1430","typeString":"contract IERC20Metadata"}},"id":858,"nodeType":"ExpressionStatement","src":"1488:15:3"}]},"documentation":{"id":849,"nodeType":"StructuredDocumentation","src":"1319:119:3","text":" @dev Set the underlying asset contract. This must be an ERC20-compatible contract (ERC20 or ERC777)."},"id":860,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":853,"nodeType":"ParameterList","parameters":[{"constant":false,"id":852,"mutability":"mutable","name":"asset_","nameLocation":"1470:6:3","nodeType":"VariableDeclaration","scope":860,"src":"1455:21:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Metadata_$1430","typeString":"contract IERC20Metadata"},"typeName":{"id":851,"nodeType":"UserDefinedTypeName","pathNode":{"id":850,"name":"IERC20Metadata","nodeType":"IdentifierPath","referencedDeclaration":1430,"src":"1455:14:3"},"referencedDeclaration":1430,"src":"1455:14:3","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Metadata_$1430","typeString":"contract IERC20Metadata"}},"visibility":"internal"}],"src":"1454:23:3"},"returnParameters":{"id":854,"nodeType":"ParameterList","parameters":[],"src":"1478:0:3"},"scope":1405,"src":"1443:67:3","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"baseFunctions":[36],"body":{"id":872,"nodeType":"Block","src":"1618:39:3","statements":[{"expression":{"arguments":[{"id":869,"name":"_asset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":848,"src":"1643:6:3","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Metadata_$1430","typeString":"contract IERC20Metadata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20Metadata_$1430","typeString":"contract IERC20Metadata"}],"id":868,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1635:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":867,"name":"address","nodeType":"ElementaryTypeName","src":"1635:7:3","typeDescriptions":{}}},"id":870,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1635:15:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":866,"id":871,"nodeType":"Return","src":"1628:22:3"}]},"documentation":{"id":861,"nodeType":"StructuredDocumentation","src":"1516:33:3","text":"@dev See {IERC4262-asset}. "},"functionSelector":"38d52e0f","id":873,"implemented":true,"kind":"function","modifiers":[],"name":"asset","nameLocation":"1563:5:3","nodeType":"FunctionDefinition","overrides":{"id":863,"nodeType":"OverrideSpecifier","overrides":[],"src":"1591:8:3"},"parameters":{"id":862,"nodeType":"ParameterList","parameters":[],"src":"1568:2:3"},"returnParameters":{"id":866,"nodeType":"ParameterList","parameters":[{"constant":false,"id":865,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":873,"src":"1609:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":864,"name":"address","nodeType":"ElementaryTypeName","src":"1609:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1608:9:3"},"scope":1405,"src":"1554:103:3","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[42],"body":{"id":888,"nodeType":"Block","src":"1777:55:3","statements":[{"expression":{"arguments":[{"arguments":[{"id":884,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"1819:4:3","typeDescriptions":{"typeIdentifier":"t_contract$_ERC4626_$1405","typeString":"contract ERC4626"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_ERC4626_$1405","typeString":"contract ERC4626"}],"id":883,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1811:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":882,"name":"address","nodeType":"ElementaryTypeName","src":"1811:7:3","typeDescriptions":{}}},"id":885,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1811:13:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":880,"name":"_asset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":848,"src":"1794:6:3","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Metadata_$1430","typeString":"contract IERC20Metadata"}},"id":881,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"balanceOf","nodeType":"MemberAccess","referencedDeclaration":788,"src":"1794:16:3","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view external returns (uint256)"}},"id":886,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1794:31:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":879,"id":887,"nodeType":"Return","src":"1787:38:3"}]},"documentation":{"id":874,"nodeType":"StructuredDocumentation","src":"1663:39:3","text":"@dev See {IERC4262-totalAssets}. "},"functionSelector":"01e1d114","id":889,"implemented":true,"kind":"function","modifiers":[],"name":"totalAssets","nameLocation":"1716:11:3","nodeType":"FunctionDefinition","overrides":{"id":876,"nodeType":"OverrideSpecifier","overrides":[],"src":"1750:8:3"},"parameters":{"id":875,"nodeType":"ParameterList","parameters":[],"src":"1727:2:3"},"returnParameters":{"id":879,"nodeType":"ParameterList","parameters":[{"constant":false,"id":878,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":889,"src":"1768:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":877,"name":"uint256","nodeType":"ElementaryTypeName","src":"1768:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1767:9:3"},"scope":1405,"src":"1707:125:3","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[50],"body":{"id":905,"nodeType":"Block","src":"1981:68:3","statements":[{"expression":{"arguments":[{"id":899,"name":"assets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":892,"src":"2015:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"expression":{"id":900,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2568,"src":"2023:4:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Math_$2568_$","typeString":"type(library Math)"}},"id":901,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"Rounding","nodeType":"MemberAccess","referencedDeclaration":2071,"src":"2023:13:3","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$2071_$","typeString":"type(enum Math.Rounding)"}},"id":902,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"Down","nodeType":"MemberAccess","referencedDeclaration":2068,"src":"2023:18:3","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2071","typeString":"enum Math.Rounding"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_enum$_Rounding_$2071","typeString":"enum Math.Rounding"}],"id":898,"name":"_convertToShares","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1261,"src":"1998:16:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$_t_enum$_Rounding_$2071_$returns$_t_uint256_$","typeString":"function (uint256,enum Math.Rounding) view returns (uint256)"}},"id":903,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1998:44:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":897,"id":904,"nodeType":"Return","src":"1991:51:3"}]},"documentation":{"id":890,"nodeType":"StructuredDocumentation","src":"1838:43:3","text":"@dev See {IERC4262-convertToShares}. "},"functionSelector":"c6e6f592","id":906,"implemented":true,"kind":"function","modifiers":[],"name":"convertToShares","nameLocation":"1895:15:3","nodeType":"FunctionDefinition","overrides":{"id":894,"nodeType":"OverrideSpecifier","overrides":[],"src":"1947:8:3"},"parameters":{"id":893,"nodeType":"ParameterList","parameters":[{"constant":false,"id":892,"mutability":"mutable","name":"assets","nameLocation":"1919:6:3","nodeType":"VariableDeclaration","scope":906,"src":"1911:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":891,"name":"uint256","nodeType":"ElementaryTypeName","src":"1911:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1910:16:3"},"returnParameters":{"id":897,"nodeType":"ParameterList","parameters":[{"constant":false,"id":896,"mutability":"mutable","name":"shares","nameLocation":"1973:6:3","nodeType":"VariableDeclaration","scope":906,"src":"1965:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":895,"name":"uint256","nodeType":"ElementaryTypeName","src":"1965:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1964:16:3"},"scope":1405,"src":"1886:163:3","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[58],"body":{"id":922,"nodeType":"Block","src":"2198:68:3","statements":[{"expression":{"arguments":[{"id":916,"name":"shares","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":909,"src":"2232:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"expression":{"id":917,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2568,"src":"2240:4:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Math_$2568_$","typeString":"type(library Math)"}},"id":918,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"Rounding","nodeType":"MemberAccess","referencedDeclaration":2071,"src":"2240:13:3","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$2071_$","typeString":"type(enum Math.Rounding)"}},"id":919,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"Down","nodeType":"MemberAccess","referencedDeclaration":2068,"src":"2240:18:3","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2071","typeString":"enum Math.Rounding"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_enum$_Rounding_$2071","typeString":"enum Math.Rounding"}],"id":915,"name":"_convertToAssets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1304,"src":"2215:16:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$_t_enum$_Rounding_$2071_$returns$_t_uint256_$","typeString":"function (uint256,enum Math.Rounding) view returns (uint256)"}},"id":920,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2215:44:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":914,"id":921,"nodeType":"Return","src":"2208:51:3"}]},"documentation":{"id":907,"nodeType":"StructuredDocumentation","src":"2055:43:3","text":"@dev See {IERC4262-convertToAssets}. "},"functionSelector":"07a2d13a","id":923,"implemented":true,"kind":"function","modifiers":[],"name":"convertToAssets","nameLocation":"2112:15:3","nodeType":"FunctionDefinition","overrides":{"id":911,"nodeType":"OverrideSpecifier","overrides":[],"src":"2164:8:3"},"parameters":{"id":910,"nodeType":"ParameterList","parameters":[{"constant":false,"id":909,"mutability":"mutable","name":"shares","nameLocation":"2136:6:3","nodeType":"VariableDeclaration","scope":923,"src":"2128:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":908,"name":"uint256","nodeType":"ElementaryTypeName","src":"2128:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2127:16:3"},"returnParameters":{"id":914,"nodeType":"ParameterList","parameters":[{"constant":false,"id":913,"mutability":"mutable","name":"assets","nameLocation":"2190:6:3","nodeType":"VariableDeclaration","scope":923,"src":"2182:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":912,"name":"uint256","nodeType":"ElementaryTypeName","src":"2182:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2181:16:3"},"scope":1405,"src":"2103:163:3","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[66],"body":{"id":942,"nodeType":"Block","src":"2391:72:3","statements":[{"expression":{"condition":{"arguments":[],"expression":{"argumentTypes":[],"id":932,"name":"_isVaultCollateralized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1404,"src":"2408:22:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bool_$","typeString":"function () view returns (bool)"}},"id":933,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2408:24:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":939,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2455:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":940,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"2408:48:3","trueExpression":{"expression":{"arguments":[{"id":936,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2440:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":935,"name":"uint256","nodeType":"ElementaryTypeName","src":"2440:7:3","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"}],"id":934,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"2435:4:3","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":937,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2435:13:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint256","typeString":"type(uint256)"}},"id":938,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"max","nodeType":"MemberAccess","src":"2435:17:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":931,"id":941,"nodeType":"Return","src":"2401:55:3"}]},"documentation":{"id":924,"nodeType":"StructuredDocumentation","src":"2272:38:3","text":"@dev See {IERC4262-maxDeposit}. "},"functionSelector":"402d267d","id":943,"implemented":true,"kind":"function","modifiers":[],"name":"maxDeposit","nameLocation":"2324:10:3","nodeType":"FunctionDefinition","overrides":{"id":928,"nodeType":"OverrideSpecifier","overrides":[],"src":"2364:8:3"},"parameters":{"id":927,"nodeType":"ParameterList","parameters":[{"constant":false,"id":926,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":943,"src":"2335:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":925,"name":"address","nodeType":"ElementaryTypeName","src":"2335:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2334:9:3"},"returnParameters":{"id":931,"nodeType":"ParameterList","parameters":[{"constant":false,"id":930,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":943,"src":"2382:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":929,"name":"uint256","nodeType":"ElementaryTypeName","src":"2382:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2381:9:3"},"scope":1405,"src":"2315:148:3","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[92],"body":{"id":958,"nodeType":"Block","src":"2582:41:3","statements":[{"expression":{"expression":{"arguments":[{"id":954,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2604:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":953,"name":"uint256","nodeType":"ElementaryTypeName","src":"2604:7:3","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"}],"id":952,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"2599:4:3","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":955,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2599:13:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint256","typeString":"type(uint256)"}},"id":956,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"max","nodeType":"MemberAccess","src":"2599:17:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":951,"id":957,"nodeType":"Return","src":"2592:24:3"}]},"documentation":{"id":944,"nodeType":"StructuredDocumentation","src":"2469:35:3","text":"@dev See {IERC4262-maxMint}. "},"functionSelector":"c63d75b6","id":959,"implemented":true,"kind":"function","modifiers":[],"name":"maxMint","nameLocation":"2518:7:3","nodeType":"FunctionDefinition","overrides":{"id":948,"nodeType":"OverrideSpecifier","overrides":[],"src":"2555:8:3"},"parameters":{"id":947,"nodeType":"ParameterList","parameters":[{"constant":false,"id":946,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":959,"src":"2526:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":945,"name":"address","nodeType":"ElementaryTypeName","src":"2526:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2525:9:3"},"returnParameters":{"id":951,"nodeType":"ParameterList","parameters":[{"constant":false,"id":950,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":959,"src":"2573:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":949,"name":"uint256","nodeType":"ElementaryTypeName","src":"2573:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2572:9:3"},"scope":1405,"src":"2509:114:3","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[118],"body":{"id":977,"nodeType":"Block","src":"2756:78:3","statements":[{"expression":{"arguments":[{"arguments":[{"id":970,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":962,"src":"2800:5:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":969,"name":"balanceOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":266,"src":"2790:9:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view returns (uint256)"}},"id":971,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2790:16:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"expression":{"id":972,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2568,"src":"2808:4:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Math_$2568_$","typeString":"type(library Math)"}},"id":973,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"Rounding","nodeType":"MemberAccess","referencedDeclaration":2071,"src":"2808:13:3","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$2071_$","typeString":"type(enum Math.Rounding)"}},"id":974,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"Down","nodeType":"MemberAccess","referencedDeclaration":2068,"src":"2808:18:3","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2071","typeString":"enum Math.Rounding"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_enum$_Rounding_$2071","typeString":"enum Math.Rounding"}],"id":968,"name":"_convertToAssets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1304,"src":"2773:16:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$_t_enum$_Rounding_$2071_$returns$_t_uint256_$","typeString":"function (uint256,enum Math.Rounding) view returns (uint256)"}},"id":975,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2773:54:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":967,"id":976,"nodeType":"Return","src":"2766:61:3"}]},"documentation":{"id":960,"nodeType":"StructuredDocumentation","src":"2629:39:3","text":"@dev See {IERC4262-maxWithdraw}. "},"functionSelector":"ce96cb77","id":978,"implemented":true,"kind":"function","modifiers":[],"name":"maxWithdraw","nameLocation":"2682:11:3","nodeType":"FunctionDefinition","overrides":{"id":964,"nodeType":"OverrideSpecifier","overrides":[],"src":"2729:8:3"},"parameters":{"id":963,"nodeType":"ParameterList","parameters":[{"constant":false,"id":962,"mutability":"mutable","name":"owner","nameLocation":"2702:5:3","nodeType":"VariableDeclaration","scope":978,"src":"2694:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":961,"name":"address","nodeType":"ElementaryTypeName","src":"2694:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2693:15:3"},"returnParameters":{"id":967,"nodeType":"ParameterList","parameters":[{"constant":false,"id":966,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":978,"src":"2747:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":965,"name":"uint256","nodeType":"ElementaryTypeName","src":"2747:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2746:9:3"},"scope":1405,"src":"2673:161:3","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[146],"body":{"id":991,"nodeType":"Block","src":"2963:40:3","statements":[{"expression":{"arguments":[{"id":988,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":981,"src":"2990:5:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":987,"name":"balanceOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":266,"src":"2980:9:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view returns (uint256)"}},"id":989,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2980:16:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":986,"id":990,"nodeType":"Return","src":"2973:23:3"}]},"documentation":{"id":979,"nodeType":"StructuredDocumentation","src":"2840:37:3","text":"@dev See {IERC4262-maxRedeem}. "},"functionSelector":"d905777e","id":992,"implemented":true,"kind":"function","modifiers":[],"name":"maxRedeem","nameLocation":"2891:9:3","nodeType":"FunctionDefinition","overrides":{"id":983,"nodeType":"OverrideSpecifier","overrides":[],"src":"2936:8:3"},"parameters":{"id":982,"nodeType":"ParameterList","parameters":[{"constant":false,"id":981,"mutability":"mutable","name":"owner","nameLocation":"2909:5:3","nodeType":"VariableDeclaration","scope":992,"src":"2901:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":980,"name":"address","nodeType":"ElementaryTypeName","src":"2901:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2900:15:3"},"returnParameters":{"id":986,"nodeType":"ParameterList","parameters":[{"constant":false,"id":985,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":992,"src":"2954:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":984,"name":"uint256","nodeType":"ElementaryTypeName","src":"2954:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2953:9:3"},"scope":1405,"src":"2882:121:3","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[74],"body":{"id":1008,"nodeType":"Block","src":"3143:68:3","statements":[{"expression":{"arguments":[{"id":1002,"name":"assets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":995,"src":"3177:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"expression":{"id":1003,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2568,"src":"3185:4:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Math_$2568_$","typeString":"type(library Math)"}},"id":1004,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"Rounding","nodeType":"MemberAccess","referencedDeclaration":2071,"src":"3185:13:3","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$2071_$","typeString":"type(enum Math.Rounding)"}},"id":1005,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"Down","nodeType":"MemberAccess","referencedDeclaration":2068,"src":"3185:18:3","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2071","typeString":"enum Math.Rounding"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_enum$_Rounding_$2071","typeString":"enum Math.Rounding"}],"id":1001,"name":"_convertToShares","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1261,"src":"3160:16:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$_t_enum$_Rounding_$2071_$returns$_t_uint256_$","typeString":"function (uint256,enum Math.Rounding) view returns (uint256)"}},"id":1006,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3160:44:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1000,"id":1007,"nodeType":"Return","src":"3153:51:3"}]},"documentation":{"id":993,"nodeType":"StructuredDocumentation","src":"3009:42:3","text":"@dev See {IERC4262-previewDeposit}. "},"functionSelector":"ef8b30f7","id":1009,"implemented":true,"kind":"function","modifiers":[],"name":"previewDeposit","nameLocation":"3065:14:3","nodeType":"FunctionDefinition","overrides":{"id":997,"nodeType":"OverrideSpecifier","overrides":[],"src":"3116:8:3"},"parameters":{"id":996,"nodeType":"ParameterList","parameters":[{"constant":false,"id":995,"mutability":"mutable","name":"assets","nameLocation":"3088:6:3","nodeType":"VariableDeclaration","scope":1009,"src":"3080:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":994,"name":"uint256","nodeType":"ElementaryTypeName","src":"3080:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3079:16:3"},"returnParameters":{"id":1000,"nodeType":"ParameterList","parameters":[{"constant":false,"id":999,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1009,"src":"3134:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":998,"name":"uint256","nodeType":"ElementaryTypeName","src":"3134:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3133:9:3"},"scope":1405,"src":"3056:155:3","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[100],"body":{"id":1025,"nodeType":"Block","src":"3345:66:3","statements":[{"expression":{"arguments":[{"id":1019,"name":"shares","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1012,"src":"3379:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"expression":{"id":1020,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2568,"src":"3387:4:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Math_$2568_$","typeString":"type(library Math)"}},"id":1021,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"Rounding","nodeType":"MemberAccess","referencedDeclaration":2071,"src":"3387:13:3","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$2071_$","typeString":"type(enum Math.Rounding)"}},"id":1022,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":2069,"src":"3387:16:3","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2071","typeString":"enum Math.Rounding"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_enum$_Rounding_$2071","typeString":"enum Math.Rounding"}],"id":1018,"name":"_convertToAssets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1304,"src":"3362:16:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$_t_enum$_Rounding_$2071_$returns$_t_uint256_$","typeString":"function (uint256,enum Math.Rounding) view returns (uint256)"}},"id":1023,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3362:42:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1017,"id":1024,"nodeType":"Return","src":"3355:49:3"}]},"documentation":{"id":1010,"nodeType":"StructuredDocumentation","src":"3217:39:3","text":"@dev See {IERC4262-previewMint}. "},"functionSelector":"b3d7f6b9","id":1026,"implemented":true,"kind":"function","modifiers":[],"name":"previewMint","nameLocation":"3270:11:3","nodeType":"FunctionDefinition","overrides":{"id":1014,"nodeType":"OverrideSpecifier","overrides":[],"src":"3318:8:3"},"parameters":{"id":1013,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1012,"mutability":"mutable","name":"shares","nameLocation":"3290:6:3","nodeType":"VariableDeclaration","scope":1026,"src":"3282:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1011,"name":"uint256","nodeType":"ElementaryTypeName","src":"3282:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3281:16:3"},"returnParameters":{"id":1017,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1016,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1026,"src":"3336:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1015,"name":"uint256","nodeType":"ElementaryTypeName","src":"3336:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3335:9:3"},"scope":1405,"src":"3261:150:3","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[126],"body":{"id":1042,"nodeType":"Block","src":"3553:66:3","statements":[{"expression":{"arguments":[{"id":1036,"name":"assets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1029,"src":"3587:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"expression":{"id":1037,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2568,"src":"3595:4:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Math_$2568_$","typeString":"type(library Math)"}},"id":1038,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"Rounding","nodeType":"MemberAccess","referencedDeclaration":2071,"src":"3595:13:3","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$2071_$","typeString":"type(enum Math.Rounding)"}},"id":1039,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":2069,"src":"3595:16:3","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2071","typeString":"enum Math.Rounding"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_enum$_Rounding_$2071","typeString":"enum Math.Rounding"}],"id":1035,"name":"_convertToShares","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1261,"src":"3570:16:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$_t_enum$_Rounding_$2071_$returns$_t_uint256_$","typeString":"function (uint256,enum Math.Rounding) view returns (uint256)"}},"id":1040,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3570:42:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1034,"id":1041,"nodeType":"Return","src":"3563:49:3"}]},"documentation":{"id":1027,"nodeType":"StructuredDocumentation","src":"3417:43:3","text":"@dev See {IERC4262-previewWithdraw}. "},"functionSelector":"0a28a477","id":1043,"implemented":true,"kind":"function","modifiers":[],"name":"previewWithdraw","nameLocation":"3474:15:3","nodeType":"FunctionDefinition","overrides":{"id":1031,"nodeType":"OverrideSpecifier","overrides":[],"src":"3526:8:3"},"parameters":{"id":1030,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1029,"mutability":"mutable","name":"assets","nameLocation":"3498:6:3","nodeType":"VariableDeclaration","scope":1043,"src":"3490:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1028,"name":"uint256","nodeType":"ElementaryTypeName","src":"3490:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3489:16:3"},"returnParameters":{"id":1034,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1033,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1043,"src":"3544:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1032,"name":"uint256","nodeType":"ElementaryTypeName","src":"3544:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3543:9:3"},"scope":1405,"src":"3465:154:3","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[154],"body":{"id":1059,"nodeType":"Block","src":"3757:68:3","statements":[{"expression":{"arguments":[{"id":1053,"name":"shares","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1046,"src":"3791:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"expression":{"id":1054,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2568,"src":"3799:4:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Math_$2568_$","typeString":"type(library Math)"}},"id":1055,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"Rounding","nodeType":"MemberAccess","referencedDeclaration":2071,"src":"3799:13:3","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$2071_$","typeString":"type(enum Math.Rounding)"}},"id":1056,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"Down","nodeType":"MemberAccess","referencedDeclaration":2068,"src":"3799:18:3","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2071","typeString":"enum Math.Rounding"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_enum$_Rounding_$2071","typeString":"enum Math.Rounding"}],"id":1052,"name":"_convertToAssets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1304,"src":"3774:16:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$_t_enum$_Rounding_$2071_$returns$_t_uint256_$","typeString":"function (uint256,enum Math.Rounding) view returns (uint256)"}},"id":1057,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3774:44:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1051,"id":1058,"nodeType":"Return","src":"3767:51:3"}]},"documentation":{"id":1044,"nodeType":"StructuredDocumentation","src":"3625:41:3","text":"@dev See {IERC4262-previewRedeem}. "},"functionSelector":"4cdad506","id":1060,"implemented":true,"kind":"function","modifiers":[],"name":"previewRedeem","nameLocation":"3680:13:3","nodeType":"FunctionDefinition","overrides":{"id":1048,"nodeType":"OverrideSpecifier","overrides":[],"src":"3730:8:3"},"parameters":{"id":1047,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1046,"mutability":"mutable","name":"shares","nameLocation":"3702:6:3","nodeType":"VariableDeclaration","scope":1060,"src":"3694:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1045,"name":"uint256","nodeType":"ElementaryTypeName","src":"3694:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3693:16:3"},"returnParameters":{"id":1051,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1050,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1060,"src":"3748:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1049,"name":"uint256","nodeType":"ElementaryTypeName","src":"3748:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3747:9:3"},"scope":1405,"src":"3671:154:3","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[84],"body":{"id":1096,"nodeType":"Block","src":"3964:222:3","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1076,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1072,"name":"assets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1063,"src":"3982:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"arguments":[{"id":1074,"name":"receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1065,"src":"4003:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1073,"name":"maxDeposit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":943,"src":"3992:10:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view returns (uint256)"}},"id":1075,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3992:20:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3982:30:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243343632363a206465706f736974206d6f7265207468616e206d6178","id":1077,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4014:32:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_942dfdb1d5d5ae526782b9f85d1470d0ba794a7c694ad01b5b8d1ba2521ed1a1","typeString":"literal_string \"ERC4626: deposit more than max\""},"value":"ERC4626: deposit more than max"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_942dfdb1d5d5ae526782b9f85d1470d0ba794a7c694ad01b5b8d1ba2521ed1a1","typeString":"literal_string \"ERC4626: deposit more than max\""}],"id":1071,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3974:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1078,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3974:73:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1079,"nodeType":"ExpressionStatement","src":"3974:73:3"},{"assignments":[1081],"declarations":[{"constant":false,"id":1081,"mutability":"mutable","name":"shares","nameLocation":"4066:6:3","nodeType":"VariableDeclaration","scope":1096,"src":"4058:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1080,"name":"uint256","nodeType":"ElementaryTypeName","src":"4058:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1085,"initialValue":{"arguments":[{"id":1083,"name":"assets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1063,"src":"4090:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1082,"name":"previewDeposit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1009,"src":"4075:14:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) view returns (uint256)"}},"id":1084,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4075:22:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4058:39:3"},{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":1087,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2054,"src":"4116:10:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1088,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4116:12:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1089,"name":"receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1065,"src":"4130:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1090,"name":"assets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1063,"src":"4140:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1091,"name":"shares","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1081,"src":"4148:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1086,"name":"_deposit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1341,"src":"4107:8:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256,uint256)"}},"id":1092,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4107:48:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1093,"nodeType":"ExpressionStatement","src":"4107:48:3"},{"expression":{"id":1094,"name":"shares","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1081,"src":"4173:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1070,"id":1095,"nodeType":"Return","src":"4166:13:3"}]},"documentation":{"id":1061,"nodeType":"StructuredDocumentation","src":"3831:35:3","text":"@dev See {IERC4262-deposit}. "},"functionSelector":"6e553f65","id":1097,"implemented":true,"kind":"function","modifiers":[],"name":"deposit","nameLocation":"3880:7:3","nodeType":"FunctionDefinition","overrides":{"id":1067,"nodeType":"OverrideSpecifier","overrides":[],"src":"3937:8:3"},"parameters":{"id":1066,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1063,"mutability":"mutable","name":"assets","nameLocation":"3896:6:3","nodeType":"VariableDeclaration","scope":1097,"src":"3888:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1062,"name":"uint256","nodeType":"ElementaryTypeName","src":"3888:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1065,"mutability":"mutable","name":"receiver","nameLocation":"3912:8:3","nodeType":"VariableDeclaration","scope":1097,"src":"3904:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1064,"name":"address","nodeType":"ElementaryTypeName","src":"3904:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3887:34:3"},"returnParameters":{"id":1070,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1069,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1097,"src":"3955:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1068,"name":"uint256","nodeType":"ElementaryTypeName","src":"3955:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3954:9:3"},"scope":1405,"src":"3871:315:3","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[110],"body":{"id":1133,"nodeType":"Block","src":"4319:213:3","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1113,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1109,"name":"shares","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1100,"src":"4337:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"arguments":[{"id":1111,"name":"receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1102,"src":"4355:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1110,"name":"maxMint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":959,"src":"4347:7:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view returns (uint256)"}},"id":1112,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4347:17:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4337:27:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243343632363a206d696e74206d6f7265207468616e206d6178","id":1114,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4366:29:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_a4a897ed07dc1191e15e1ac5726d86067d87f89bebeded2b310bdf1e25a3dac3","typeString":"literal_string \"ERC4626: mint more than max\""},"value":"ERC4626: mint more than max"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_a4a897ed07dc1191e15e1ac5726d86067d87f89bebeded2b310bdf1e25a3dac3","typeString":"literal_string \"ERC4626: mint more than max\""}],"id":1108,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4329:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1115,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4329:67:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1116,"nodeType":"ExpressionStatement","src":"4329:67:3"},{"assignments":[1118],"declarations":[{"constant":false,"id":1118,"mutability":"mutable","name":"assets","nameLocation":"4415:6:3","nodeType":"VariableDeclaration","scope":1133,"src":"4407:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1117,"name":"uint256","nodeType":"ElementaryTypeName","src":"4407:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1122,"initialValue":{"arguments":[{"id":1120,"name":"shares","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1100,"src":"4436:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1119,"name":"previewMint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1026,"src":"4424:11:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) view returns (uint256)"}},"id":1121,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4424:19:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4407:36:3"},{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":1124,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2054,"src":"4462:10:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1125,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4462:12:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1126,"name":"receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1102,"src":"4476:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1127,"name":"assets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1118,"src":"4486:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1128,"name":"shares","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1100,"src":"4494:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1123,"name":"_deposit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1341,"src":"4453:8:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256,uint256)"}},"id":1129,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4453:48:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1130,"nodeType":"ExpressionStatement","src":"4453:48:3"},{"expression":{"id":1131,"name":"assets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1118,"src":"4519:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1107,"id":1132,"nodeType":"Return","src":"4512:13:3"}]},"documentation":{"id":1098,"nodeType":"StructuredDocumentation","src":"4192:32:3","text":"@dev See {IERC4262-mint}. "},"functionSelector":"94bf804d","id":1134,"implemented":true,"kind":"function","modifiers":[],"name":"mint","nameLocation":"4238:4:3","nodeType":"FunctionDefinition","overrides":{"id":1104,"nodeType":"OverrideSpecifier","overrides":[],"src":"4292:8:3"},"parameters":{"id":1103,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1100,"mutability":"mutable","name":"shares","nameLocation":"4251:6:3","nodeType":"VariableDeclaration","scope":1134,"src":"4243:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1099,"name":"uint256","nodeType":"ElementaryTypeName","src":"4243:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1102,"mutability":"mutable","name":"receiver","nameLocation":"4267:8:3","nodeType":"VariableDeclaration","scope":1134,"src":"4259:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1101,"name":"address","nodeType":"ElementaryTypeName","src":"4259:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4242:34:3"},"returnParameters":{"id":1107,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1106,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1134,"src":"4310:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1105,"name":"uint256","nodeType":"ElementaryTypeName","src":"4310:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4309:9:3"},"scope":1405,"src":"4229:303:3","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[138],"body":{"id":1173,"nodeType":"Block","src":"4718:230:3","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1152,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1148,"name":"assets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1137,"src":"4736:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"arguments":[{"id":1150,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1141,"src":"4758:5:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1149,"name":"maxWithdraw","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":978,"src":"4746:11:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view returns (uint256)"}},"id":1151,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4746:18:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4736:28:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243343632363a207769746864726177206d6f7265207468616e206d6178","id":1153,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4766:33:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_6d33bd82b6352ef75960e453c6162657943d72f718df3c8a607eeb1427f0aa42","typeString":"literal_string \"ERC4626: withdraw more than max\""},"value":"ERC4626: withdraw more than max"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_6d33bd82b6352ef75960e453c6162657943d72f718df3c8a607eeb1427f0aa42","typeString":"literal_string \"ERC4626: withdraw more than max\""}],"id":1147,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4728:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1154,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4728:72:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1155,"nodeType":"ExpressionStatement","src":"4728:72:3"},{"assignments":[1157],"declarations":[{"constant":false,"id":1157,"mutability":"mutable","name":"shares","nameLocation":"4819:6:3","nodeType":"VariableDeclaration","scope":1173,"src":"4811:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1156,"name":"uint256","nodeType":"ElementaryTypeName","src":"4811:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1161,"initialValue":{"arguments":[{"id":1159,"name":"assets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1137,"src":"4844:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1158,"name":"previewWithdraw","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1043,"src":"4828:15:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) view returns (uint256)"}},"id":1160,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4828:23:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4811:40:3"},{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":1163,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2054,"src":"4871:10:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1164,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4871:12:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1165,"name":"receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1139,"src":"4885:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1166,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1141,"src":"4895:5:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1167,"name":"assets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1137,"src":"4902:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1168,"name":"shares","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1157,"src":"4910:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1162,"name":"_withdraw","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1388,"src":"4861:9:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,address,uint256,uint256)"}},"id":1169,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4861:56:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1170,"nodeType":"ExpressionStatement","src":"4861:56:3"},{"expression":{"id":1171,"name":"shares","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1157,"src":"4935:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1146,"id":1172,"nodeType":"Return","src":"4928:13:3"}]},"documentation":{"id":1135,"nodeType":"StructuredDocumentation","src":"4538:36:3","text":"@dev See {IERC4262-withdraw}. "},"functionSelector":"b460af94","id":1174,"implemented":true,"kind":"function","modifiers":[],"name":"withdraw","nameLocation":"4588:8:3","nodeType":"FunctionDefinition","overrides":{"id":1143,"nodeType":"OverrideSpecifier","overrides":[],"src":"4691:8:3"},"parameters":{"id":1142,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1137,"mutability":"mutable","name":"assets","nameLocation":"4614:6:3","nodeType":"VariableDeclaration","scope":1174,"src":"4606:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1136,"name":"uint256","nodeType":"ElementaryTypeName","src":"4606:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1139,"mutability":"mutable","name":"receiver","nameLocation":"4638:8:3","nodeType":"VariableDeclaration","scope":1174,"src":"4630:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1138,"name":"address","nodeType":"ElementaryTypeName","src":"4630:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1141,"mutability":"mutable","name":"owner","nameLocation":"4664:5:3","nodeType":"VariableDeclaration","scope":1174,"src":"4656:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1140,"name":"address","nodeType":"ElementaryTypeName","src":"4656:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4596:79:3"},"returnParameters":{"id":1146,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1145,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1174,"src":"4709:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1144,"name":"uint256","nodeType":"ElementaryTypeName","src":"4709:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4708:9:3"},"scope":1405,"src":"4579:369:3","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[166],"body":{"id":1213,"nodeType":"Block","src":"5130:224:3","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1192,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1188,"name":"shares","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1177,"src":"5148:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"arguments":[{"id":1190,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1181,"src":"5168:5:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1189,"name":"maxRedeem","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":992,"src":"5158:9:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view returns (uint256)"}},"id":1191,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5158:16:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5148:26:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243343632363a2072656465656d206d6f7265207468616e206d6178","id":1193,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5176:31:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_3cf75848883fee8cd3a46e6e14bbbd331bc8d0caaef08fbe607c62e5fba35c6d","typeString":"literal_string \"ERC4626: redeem more than max\""},"value":"ERC4626: redeem more than max"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_3cf75848883fee8cd3a46e6e14bbbd331bc8d0caaef08fbe607c62e5fba35c6d","typeString":"literal_string \"ERC4626: redeem more than max\""}],"id":1187,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5140:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1194,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5140:68:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1195,"nodeType":"ExpressionStatement","src":"5140:68:3"},{"assignments":[1197],"declarations":[{"constant":false,"id":1197,"mutability":"mutable","name":"assets","nameLocation":"5227:6:3","nodeType":"VariableDeclaration","scope":1213,"src":"5219:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1196,"name":"uint256","nodeType":"ElementaryTypeName","src":"5219:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1201,"initialValue":{"arguments":[{"id":1199,"name":"shares","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1177,"src":"5250:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1198,"name":"previewRedeem","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1060,"src":"5236:13:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) view returns (uint256)"}},"id":1200,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5236:21:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5219:38:3"},{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":1203,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2054,"src":"5277:10:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1204,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5277:12:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1205,"name":"receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1179,"src":"5291:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1206,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1181,"src":"5301:5:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1207,"name":"assets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1197,"src":"5308:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1208,"name":"shares","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1177,"src":"5316:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1202,"name":"_withdraw","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1388,"src":"5267:9:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,address,uint256,uint256)"}},"id":1209,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5267:56:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1210,"nodeType":"ExpressionStatement","src":"5267:56:3"},{"expression":{"id":1211,"name":"assets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1197,"src":"5341:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1186,"id":1212,"nodeType":"Return","src":"5334:13:3"}]},"documentation":{"id":1175,"nodeType":"StructuredDocumentation","src":"4954:34:3","text":"@dev See {IERC4262-redeem}. "},"functionSelector":"ba087652","id":1214,"implemented":true,"kind":"function","modifiers":[],"name":"redeem","nameLocation":"5002:6:3","nodeType":"FunctionDefinition","overrides":{"id":1183,"nodeType":"OverrideSpecifier","overrides":[],"src":"5103:8:3"},"parameters":{"id":1182,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1177,"mutability":"mutable","name":"shares","nameLocation":"5026:6:3","nodeType":"VariableDeclaration","scope":1214,"src":"5018:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1176,"name":"uint256","nodeType":"ElementaryTypeName","src":"5018:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1179,"mutability":"mutable","name":"receiver","nameLocation":"5050:8:3","nodeType":"VariableDeclaration","scope":1214,"src":"5042:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1178,"name":"address","nodeType":"ElementaryTypeName","src":"5042:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1181,"mutability":"mutable","name":"owner","nameLocation":"5076:5:3","nodeType":"VariableDeclaration","scope":1214,"src":"5068:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1180,"name":"address","nodeType":"ElementaryTypeName","src":"5068:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5008:79:3"},"returnParameters":{"id":1186,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1185,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1214,"src":"5121:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1184,"name":"uint256","nodeType":"ElementaryTypeName","src":"5121:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5120:9:3"},"scope":1405,"src":"4993:361:3","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":1260,"nodeType":"Block","src":"5764:250:3","statements":[{"assignments":[1226],"declarations":[{"constant":false,"id":1226,"mutability":"mutable","name":"supply","nameLocation":"5782:6:3","nodeType":"VariableDeclaration","scope":1260,"src":"5774:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1225,"name":"uint256","nodeType":"ElementaryTypeName","src":"5774:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1229,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":1227,"name":"totalSupply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":252,"src":"5791:11:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_uint256_$","typeString":"function () view returns (uint256)"}},"id":1228,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5791:13:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5774:30:3"},{"expression":{"condition":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1236,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1232,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1230,"name":"assets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1217,"src":"5834:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1231,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5844:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5834:11:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1235,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1233,"name":"supply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1226,"src":"5849:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1234,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5859:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5849:11:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"5834:26:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":1237,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"5833:28:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"arguments":[{"id":1253,"name":"supply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1226,"src":"5975:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[],"expression":{"argumentTypes":[],"id":1254,"name":"totalAssets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":889,"src":"5983:11:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_uint256_$","typeString":"function () view returns (uint256)"}},"id":1255,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5983:13:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1256,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1220,"src":"5998:8:3","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2071","typeString":"enum Math.Rounding"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_enum$_Rounding_$2071","typeString":"enum Math.Rounding"}],"expression":{"id":1251,"name":"assets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1217,"src":"5961:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1252,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"mulDiv","nodeType":"MemberAccess","referencedDeclaration":2321,"src":"5961:13:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$_t_enum$_Rounding_$2071_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256,uint256,enum Math.Rounding) pure returns (uint256)"}},"id":1257,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5961:46:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1258,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"5833:174:3","trueExpression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1243,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1240,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5894:2:3","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":1241,"name":"decimals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":242,"src":"5898:8:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_uint8_$","typeString":"function () view returns (uint8)"}},"id":1242,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5898:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"5894:14:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1248,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1244,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5910:2:3","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1245,"name":"_asset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":848,"src":"5914:6:3","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Metadata_$1430","typeString":"contract IERC20Metadata"}},"id":1246,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"decimals","nodeType":"MemberAccess","referencedDeclaration":1429,"src":"5914:15:3","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_uint8_$","typeString":"function () view external returns (uint8)"}},"id":1247,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5914:17:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"5910:21:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1249,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1220,"src":"5933:8:3","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2071","typeString":"enum Math.Rounding"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_enum$_Rounding_$2071","typeString":"enum Math.Rounding"}],"expression":{"id":1238,"name":"assets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1217,"src":"5880:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1239,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"mulDiv","nodeType":"MemberAccess","referencedDeclaration":2321,"src":"5880:13:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$_t_enum$_Rounding_$2071_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256,uint256,enum Math.Rounding) pure returns (uint256)"}},"id":1250,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5880:62:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1224,"id":1259,"nodeType":"Return","src":"5814:193:3"}]},"documentation":{"id":1215,"nodeType":"StructuredDocumentation","src":"5360:286:3","text":" @dev Internal conversion function (from assets to shares) with support for rounding direction.\n Will revert if assets > 0, totalSupply > 0 and totalAssets = 0. That corresponds to a case where any asset\n would represent an infinite amout of shares."},"id":1261,"implemented":true,"kind":"function","modifiers":[],"name":"_convertToShares","nameLocation":"5660:16:3","nodeType":"FunctionDefinition","parameters":{"id":1221,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1217,"mutability":"mutable","name":"assets","nameLocation":"5685:6:3","nodeType":"VariableDeclaration","scope":1261,"src":"5677:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1216,"name":"uint256","nodeType":"ElementaryTypeName","src":"5677:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1220,"mutability":"mutable","name":"rounding","nameLocation":"5707:8:3","nodeType":"VariableDeclaration","scope":1261,"src":"5693:22:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2071","typeString":"enum Math.Rounding"},"typeName":{"id":1219,"nodeType":"UserDefinedTypeName","pathNode":{"id":1218,"name":"Math.Rounding","nodeType":"IdentifierPath","referencedDeclaration":2071,"src":"5693:13:3"},"referencedDeclaration":2071,"src":"5693:13:3","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2071","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"5676:40:3"},"returnParameters":{"id":1224,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1223,"mutability":"mutable","name":"shares","nameLocation":"5756:6:3","nodeType":"VariableDeclaration","scope":1261,"src":"5748:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1222,"name":"uint256","nodeType":"ElementaryTypeName","src":"5748:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5747:16:3"},"scope":1405,"src":"5651:363:3","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":1303,"nodeType":"Block","src":"6251:235:3","statements":[{"assignments":[1273],"declarations":[{"constant":false,"id":1273,"mutability":"mutable","name":"supply","nameLocation":"6269:6:3","nodeType":"VariableDeclaration","scope":1303,"src":"6261:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1272,"name":"uint256","nodeType":"ElementaryTypeName","src":"6261:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1276,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":1274,"name":"totalSupply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":252,"src":"6278:11:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_uint256_$","typeString":"function () view returns (uint256)"}},"id":1275,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6278:13:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6261:30:3"},{"expression":{"condition":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1279,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1277,"name":"supply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1273,"src":"6321:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1278,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6331:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6321:11:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":1280,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6320:13:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":1296,"name":"totalAssets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":889,"src":"6447:11:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_uint256_$","typeString":"function () view returns (uint256)"}},"id":1297,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6447:13:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1298,"name":"supply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1273,"src":"6462:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1299,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1267,"src":"6470:8:3","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2071","typeString":"enum Math.Rounding"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_enum$_Rounding_$2071","typeString":"enum Math.Rounding"}],"expression":{"id":1294,"name":"shares","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1264,"src":"6433:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1295,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"mulDiv","nodeType":"MemberAccess","referencedDeclaration":2321,"src":"6433:13:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$_t_enum$_Rounding_$2071_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256,uint256,enum Math.Rounding) pure returns (uint256)"}},"id":1300,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6433:46:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1301,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"6320:159:3","trueExpression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1287,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1283,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6366:2:3","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1284,"name":"_asset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":848,"src":"6370:6:3","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Metadata_$1430","typeString":"contract IERC20Metadata"}},"id":1285,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"decimals","nodeType":"MemberAccess","referencedDeclaration":1429,"src":"6370:15:3","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_uint8_$","typeString":"function () view external returns (uint8)"}},"id":1286,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6370:17:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"6366:21:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1291,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1288,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6389:2:3","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":1289,"name":"decimals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":242,"src":"6393:8:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_uint8_$","typeString":"function () view returns (uint8)"}},"id":1290,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6393:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"6389:14:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1292,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1267,"src":"6405:8:3","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2071","typeString":"enum Math.Rounding"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_enum$_Rounding_$2071","typeString":"enum Math.Rounding"}],"expression":{"id":1281,"name":"shares","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1264,"src":"6352:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1282,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"mulDiv","nodeType":"MemberAccess","referencedDeclaration":2321,"src":"6352:13:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$_t_enum$_Rounding_$2071_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256,uint256,enum Math.Rounding) pure returns (uint256)"}},"id":1293,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6352:62:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1271,"id":1302,"nodeType":"Return","src":"6301:178:3"}]},"documentation":{"id":1262,"nodeType":"StructuredDocumentation","src":"6020:113:3","text":" @dev Internal conversion function (from shares to assets) with support for rounding direction."},"id":1304,"implemented":true,"kind":"function","modifiers":[],"name":"_convertToAssets","nameLocation":"6147:16:3","nodeType":"FunctionDefinition","parameters":{"id":1268,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1264,"mutability":"mutable","name":"shares","nameLocation":"6172:6:3","nodeType":"VariableDeclaration","scope":1304,"src":"6164:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1263,"name":"uint256","nodeType":"ElementaryTypeName","src":"6164:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1267,"mutability":"mutable","name":"rounding","nameLocation":"6194:8:3","nodeType":"VariableDeclaration","scope":1304,"src":"6180:22:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2071","typeString":"enum Math.Rounding"},"typeName":{"id":1266,"nodeType":"UserDefinedTypeName","pathNode":{"id":1265,"name":"Math.Rounding","nodeType":"IdentifierPath","referencedDeclaration":2071,"src":"6180:13:3"},"referencedDeclaration":2071,"src":"6180:13:3","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2071","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"6163:40:3"},"returnParameters":{"id":1271,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1270,"mutability":"mutable","name":"assets","nameLocation":"6243:6:3","nodeType":"VariableDeclaration","scope":1304,"src":"6235:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1269,"name":"uint256","nodeType":"ElementaryTypeName","src":"6235:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6234:16:3"},"scope":1405,"src":"6138:348:3","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":1340,"nodeType":"Block","src":"6689:729:3","statements":[{"expression":{"arguments":[{"id":1319,"name":"_asset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":848,"src":"7283:6:3","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Metadata_$1430","typeString":"contract IERC20Metadata"}},{"id":1320,"name":"caller","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1307,"src":"7291:6:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"id":1323,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"7307:4:3","typeDescriptions":{"typeIdentifier":"t_contract$_ERC4626_$1405","typeString":"contract ERC4626"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_ERC4626_$1405","typeString":"contract ERC4626"}],"id":1322,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7299:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1321,"name":"address","nodeType":"ElementaryTypeName","src":"7299:7:3","typeDescriptions":{}}},"id":1324,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7299:13:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1325,"name":"assets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1311,"src":"7314:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20Metadata_$1430","typeString":"contract IERC20Metadata"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1316,"name":"SafeERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1747,"src":"7256:9:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SafeERC20_$1747_$","typeString":"type(library SafeERC20)"}},"id":1318,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"safeTransferFrom","nodeType":"MemberAccess","referencedDeclaration":1524,"src":"7256:26:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$831_$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (contract IERC20,address,address,uint256)"}},"id":1326,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7256:65:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1327,"nodeType":"ExpressionStatement","src":"7256:65:3"},{"expression":{"arguments":[{"id":1329,"name":"receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1309,"src":"7337:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1330,"name":"shares","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1313,"src":"7347:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1328,"name":"_mint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":570,"src":"7331:5:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":1331,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7331:23:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1332,"nodeType":"ExpressionStatement","src":"7331:23:3"},{"eventCall":{"arguments":[{"id":1334,"name":"caller","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1307,"src":"7378:6:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1335,"name":"receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1309,"src":"7386:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1336,"name":"assets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1311,"src":"7396:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1337,"name":"shares","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1313,"src":"7404:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1333,"name":"Deposit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":18,"src":"7370:7:3","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256,uint256)"}},"id":1338,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7370:41:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1339,"nodeType":"EmitStatement","src":"7365:46:3"}]},"documentation":{"id":1305,"nodeType":"StructuredDocumentation","src":"6492:53:3","text":" @dev Deposit/mint common workflow."},"id":1341,"implemented":true,"kind":"function","modifiers":[],"name":"_deposit","nameLocation":"6559:8:3","nodeType":"FunctionDefinition","parameters":{"id":1314,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1307,"mutability":"mutable","name":"caller","nameLocation":"6585:6:3","nodeType":"VariableDeclaration","scope":1341,"src":"6577:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1306,"name":"address","nodeType":"ElementaryTypeName","src":"6577:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1309,"mutability":"mutable","name":"receiver","nameLocation":"6609:8:3","nodeType":"VariableDeclaration","scope":1341,"src":"6601:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1308,"name":"address","nodeType":"ElementaryTypeName","src":"6601:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1311,"mutability":"mutable","name":"assets","nameLocation":"6635:6:3","nodeType":"VariableDeclaration","scope":1341,"src":"6627:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1310,"name":"uint256","nodeType":"ElementaryTypeName","src":"6627:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1313,"mutability":"mutable","name":"shares","nameLocation":"6659:6:3","nodeType":"VariableDeclaration","scope":1341,"src":"6651:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1312,"name":"uint256","nodeType":"ElementaryTypeName","src":"6651:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6567:104:3"},"returnParameters":{"id":1315,"nodeType":"ParameterList","parameters":[],"src":"6689:0:3"},"scope":1405,"src":"6550:868:3","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1387,"nodeType":"Block","src":"7648:750:3","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1357,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1355,"name":"caller","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1344,"src":"7662:6:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":1356,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1348,"src":"7672:5:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7662:15:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1365,"nodeType":"IfStatement","src":"7658:84:3","trueBody":{"id":1364,"nodeType":"Block","src":"7679:63:3","statements":[{"expression":{"arguments":[{"id":1359,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1348,"src":"7709:5:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1360,"name":"caller","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1344,"src":"7716:6:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1361,"name":"shares","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1352,"src":"7724:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1358,"name":"_spendAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":730,"src":"7693:15:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1362,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7693:38:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1363,"nodeType":"ExpressionStatement","src":"7693:38:3"}]}},{"expression":{"arguments":[{"id":1367,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1348,"src":"8254:5:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1368,"name":"shares","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1352,"src":"8261:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1366,"name":"_burn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":642,"src":"8248:5:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":1369,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8248:20:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1370,"nodeType":"ExpressionStatement","src":"8248:20:3"},{"expression":{"arguments":[{"id":1374,"name":"_asset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":848,"src":"8301:6:3","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Metadata_$1430","typeString":"contract IERC20Metadata"}},{"id":1375,"name":"receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1346,"src":"8309:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1376,"name":"assets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1350,"src":"8319:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20Metadata_$1430","typeString":"contract IERC20Metadata"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1371,"name":"SafeERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1747,"src":"8278:9:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SafeERC20_$1747_$","typeString":"type(library SafeERC20)"}},"id":1373,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"safeTransfer","nodeType":"MemberAccess","referencedDeclaration":1498,"src":"8278:22:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$831_$_t_address_$_t_uint256_$returns$__$","typeString":"function (contract IERC20,address,uint256)"}},"id":1377,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8278:48:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1378,"nodeType":"ExpressionStatement","src":"8278:48:3"},{"eventCall":{"arguments":[{"id":1380,"name":"caller","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1344,"src":"8351:6:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1381,"name":"receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1346,"src":"8359:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1382,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1348,"src":"8369:5:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1383,"name":"assets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1350,"src":"8376:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1384,"name":"shares","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1352,"src":"8384:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1379,"name":"Withdraw","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":30,"src":"8342:8:3","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,address,uint256,uint256)"}},"id":1385,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8342:49:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1386,"nodeType":"EmitStatement","src":"8337:54:3"}]},"documentation":{"id":1342,"nodeType":"StructuredDocumentation","src":"7424:56:3","text":" @dev Withdraw/redeem common workflow."},"id":1388,"implemented":true,"kind":"function","modifiers":[],"name":"_withdraw","nameLocation":"7494:9:3","nodeType":"FunctionDefinition","parameters":{"id":1353,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1344,"mutability":"mutable","name":"caller","nameLocation":"7521:6:3","nodeType":"VariableDeclaration","scope":1388,"src":"7513:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1343,"name":"address","nodeType":"ElementaryTypeName","src":"7513:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1346,"mutability":"mutable","name":"receiver","nameLocation":"7545:8:3","nodeType":"VariableDeclaration","scope":1388,"src":"7537:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1345,"name":"address","nodeType":"ElementaryTypeName","src":"7537:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1348,"mutability":"mutable","name":"owner","nameLocation":"7571:5:3","nodeType":"VariableDeclaration","scope":1388,"src":"7563:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1347,"name":"address","nodeType":"ElementaryTypeName","src":"7563:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1350,"mutability":"mutable","name":"assets","nameLocation":"7594:6:3","nodeType":"VariableDeclaration","scope":1388,"src":"7586:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1349,"name":"uint256","nodeType":"ElementaryTypeName","src":"7586:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1352,"mutability":"mutable","name":"shares","nameLocation":"7618:6:3","nodeType":"VariableDeclaration","scope":1388,"src":"7610:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1351,"name":"uint256","nodeType":"ElementaryTypeName","src":"7610:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7503:127:3"},"returnParameters":{"id":1354,"nodeType":"ParameterList","parameters":[],"src":"7648:0:3"},"scope":1405,"src":"7485:913:3","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1403,"nodeType":"Block","src":"8466:63:3","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1401,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1396,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":1393,"name":"totalAssets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":889,"src":"8483:11:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_uint256_$","typeString":"function () view returns (uint256)"}},"id":1394,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8483:13:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1395,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8499:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8483:17:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1400,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":1397,"name":"totalSupply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":252,"src":"8504:11:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_uint256_$","typeString":"function () view returns (uint256)"}},"id":1398,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8504:13:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1399,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8521:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8504:18:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"8483:39:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1392,"id":1402,"nodeType":"Return","src":"8476:46:3"}]},"id":1404,"implemented":true,"kind":"function","modifiers":[],"name":"_isVaultCollateralized","nameLocation":"8413:22:3","nodeType":"FunctionDefinition","parameters":{"id":1389,"nodeType":"ParameterList","parameters":[],"src":"8435:2:3"},"returnParameters":{"id":1392,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1391,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1404,"src":"8460:4:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1390,"name":"bool","nodeType":"ElementaryTypeName","src":"8460:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"8459:6:3"},"scope":1405,"src":"8404:125:3","stateMutability":"view","virtual":false,"visibility":"private"}],"scope":1406,"src":"1193:7338:3","usedErrors":[]}],"src":"118:8414:3"},"id":3},"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol","exportedSymbols":{"IERC20":[831],"IERC20Metadata":[1430]},"id":1431,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1407,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"110:23:4"},{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","file":"../IERC20.sol","id":1408,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1431,"sourceUnit":832,"src":"135:23:4","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":1410,"name":"IERC20","nodeType":"IdentifierPath","referencedDeclaration":831,"src":"305:6:4"},"id":1411,"nodeType":"InheritanceSpecifier","src":"305:6:4"}],"contractDependencies":[],"contractKind":"interface","documentation":{"id":1409,"nodeType":"StructuredDocumentation","src":"160:116:4","text":" @dev Interface for the optional metadata functions from the ERC20 standard.\n _Available since v4.1._"},"fullyImplemented":false,"id":1430,"linearizedBaseContracts":[1430,831],"name":"IERC20Metadata","nameLocation":"287:14:4","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1412,"nodeType":"StructuredDocumentation","src":"318:54:4","text":" @dev Returns the name of the token."},"functionSelector":"06fdde03","id":1417,"implemented":false,"kind":"function","modifiers":[],"name":"name","nameLocation":"386:4:4","nodeType":"FunctionDefinition","parameters":{"id":1413,"nodeType":"ParameterList","parameters":[],"src":"390:2:4"},"returnParameters":{"id":1416,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1415,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1417,"src":"416:13:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1414,"name":"string","nodeType":"ElementaryTypeName","src":"416:6:4","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"415:15:4"},"scope":1430,"src":"377:54:4","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1418,"nodeType":"StructuredDocumentation","src":"437:56:4","text":" @dev Returns the symbol of the token."},"functionSelector":"95d89b41","id":1423,"implemented":false,"kind":"function","modifiers":[],"name":"symbol","nameLocation":"507:6:4","nodeType":"FunctionDefinition","parameters":{"id":1419,"nodeType":"ParameterList","parameters":[],"src":"513:2:4"},"returnParameters":{"id":1422,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1421,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1423,"src":"539:13:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1420,"name":"string","nodeType":"ElementaryTypeName","src":"539:6:4","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"538:15:4"},"scope":1430,"src":"498:56:4","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1424,"nodeType":"StructuredDocumentation","src":"560:65:4","text":" @dev Returns the decimals places of the token."},"functionSelector":"313ce567","id":1429,"implemented":false,"kind":"function","modifiers":[],"name":"decimals","nameLocation":"639:8:4","nodeType":"FunctionDefinition","parameters":{"id":1425,"nodeType":"ParameterList","parameters":[],"src":"647:2:4"},"returnParameters":{"id":1428,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1427,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1429,"src":"673:5:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1426,"name":"uint8","nodeType":"ElementaryTypeName","src":"673:5:4","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"672:7:4"},"scope":1430,"src":"630:50:4","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":1431,"src":"277:405:4","usedErrors":[]}],"src":"110:573:4"},"id":4},"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol","exportedSymbols":{"IERC20Permit":[1466]},"id":1467,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1432,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"114:23:5"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"interface","documentation":{"id":1433,"nodeType":"StructuredDocumentation","src":"139:480:5","text":" @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n need to send a transaction, and thus is not required to hold Ether at all."},"fullyImplemented":false,"id":1466,"linearizedBaseContracts":[1466],"name":"IERC20Permit","nameLocation":"630:12:5","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1434,"nodeType":"StructuredDocumentation","src":"649:792:5","text":" @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n given ``owner``'s signed approval.\n IMPORTANT: The same issues {IERC20-approve} has related to transaction\n ordering also apply here.\n Emits an {Approval} event.\n Requirements:\n - `spender` cannot be the zero address.\n - `deadline` must be a timestamp in the future.\n - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n over the EIP712-formatted function arguments.\n - the signature must use ``owner``'s current nonce (see {nonces}).\n For more information on the signature format, see the\n https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n section]."},"functionSelector":"d505accf","id":1451,"implemented":false,"kind":"function","modifiers":[],"name":"permit","nameLocation":"1455:6:5","nodeType":"FunctionDefinition","parameters":{"id":1449,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1436,"mutability":"mutable","name":"owner","nameLocation":"1479:5:5","nodeType":"VariableDeclaration","scope":1451,"src":"1471:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1435,"name":"address","nodeType":"ElementaryTypeName","src":"1471:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1438,"mutability":"mutable","name":"spender","nameLocation":"1502:7:5","nodeType":"VariableDeclaration","scope":1451,"src":"1494:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1437,"name":"address","nodeType":"ElementaryTypeName","src":"1494:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1440,"mutability":"mutable","name":"value","nameLocation":"1527:5:5","nodeType":"VariableDeclaration","scope":1451,"src":"1519:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1439,"name":"uint256","nodeType":"ElementaryTypeName","src":"1519:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1442,"mutability":"mutable","name":"deadline","nameLocation":"1550:8:5","nodeType":"VariableDeclaration","scope":1451,"src":"1542:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1441,"name":"uint256","nodeType":"ElementaryTypeName","src":"1542:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1444,"mutability":"mutable","name":"v","nameLocation":"1574:1:5","nodeType":"VariableDeclaration","scope":1451,"src":"1568:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1443,"name":"uint8","nodeType":"ElementaryTypeName","src":"1568:5:5","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":1446,"mutability":"mutable","name":"r","nameLocation":"1593:1:5","nodeType":"VariableDeclaration","scope":1451,"src":"1585:9:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1445,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1585:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1448,"mutability":"mutable","name":"s","nameLocation":"1612:1:5","nodeType":"VariableDeclaration","scope":1451,"src":"1604:9:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1447,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1604:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1461:158:5"},"returnParameters":{"id":1450,"nodeType":"ParameterList","parameters":[],"src":"1628:0:5"},"scope":1466,"src":"1446:183:5","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1452,"nodeType":"StructuredDocumentation","src":"1635:294:5","text":" @dev Returns the current nonce for `owner`. This value must be\n included whenever a signature is generated for {permit}.\n Every successful call to {permit} increases ``owner``'s nonce by one. This\n prevents a signature from being used multiple times."},"functionSelector":"7ecebe00","id":1459,"implemented":false,"kind":"function","modifiers":[],"name":"nonces","nameLocation":"1943:6:5","nodeType":"FunctionDefinition","parameters":{"id":1455,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1454,"mutability":"mutable","name":"owner","nameLocation":"1958:5:5","nodeType":"VariableDeclaration","scope":1459,"src":"1950:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1453,"name":"address","nodeType":"ElementaryTypeName","src":"1950:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1949:15:5"},"returnParameters":{"id":1458,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1457,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1459,"src":"1988:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1456,"name":"uint256","nodeType":"ElementaryTypeName","src":"1988:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1987:9:5"},"scope":1466,"src":"1934:63:5","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1460,"nodeType":"StructuredDocumentation","src":"2003:128:5","text":" @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."},"functionSelector":"3644e515","id":1465,"implemented":false,"kind":"function","modifiers":[],"name":"DOMAIN_SEPARATOR","nameLocation":"2198:16:5","nodeType":"FunctionDefinition","parameters":{"id":1461,"nodeType":"ParameterList","parameters":[],"src":"2214:2:5"},"returnParameters":{"id":1464,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1463,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1465,"src":"2240:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1462,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2240:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2239:9:5"},"scope":1466,"src":"2189:60:5","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":1467,"src":"620:1631:5","usedErrors":[]}],"src":"114:2138:5"},"id":5},"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol","exportedSymbols":{"Address":[2042],"IERC20":[831],"IERC20Permit":[1466],"SafeERC20":[1747]},"id":1748,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1468,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"115:23:6"},{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","file":"../IERC20.sol","id":1469,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1748,"sourceUnit":832,"src":"140:23:6","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol","file":"../extensions/draft-IERC20Permit.sol","id":1470,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1748,"sourceUnit":1467,"src":"164:46:6","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Address.sol","file":"../../../utils/Address.sol","id":1471,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1748,"sourceUnit":2043,"src":"211:36:6","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"library","documentation":{"id":1472,"nodeType":"StructuredDocumentation","src":"249:457:6","text":" @title SafeERC20\n @dev Wrappers around ERC20 operations that throw on failure (when the token\n contract returns false). Tokens that return no value (and instead revert or\n throw on failure) are also supported, non-reverting calls are assumed to be\n successful.\n To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n which allows you to call the safe operations as `token.safeTransfer(...)`, etc."},"fullyImplemented":true,"id":1747,"linearizedBaseContracts":[1747],"name":"SafeERC20","nameLocation":"715:9:6","nodeType":"ContractDefinition","nodes":[{"id":1475,"libraryName":{"id":1473,"name":"Address","nodeType":"IdentifierPath","referencedDeclaration":2042,"src":"737:7:6"},"nodeType":"UsingForDirective","src":"731:26:6","typeName":{"id":1474,"name":"address","nodeType":"ElementaryTypeName","src":"749:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},{"body":{"id":1497,"nodeType":"Block","src":"865:103:6","statements":[{"expression":{"arguments":[{"id":1486,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1478,"src":"895:5:6","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$831","typeString":"contract IERC20"}},{"arguments":[{"expression":{"expression":{"id":1489,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1478,"src":"925:5:6","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$831","typeString":"contract IERC20"}},"id":1490,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"transfer","nodeType":"MemberAccess","referencedDeclaration":798,"src":"925:14:6","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":1491,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"selector","nodeType":"MemberAccess","src":"925:23:6","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":1492,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1480,"src":"950:2:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1493,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1482,"src":"954:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1487,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"902:3:6","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1488,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"902:22:6","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":1494,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"902:58:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$831","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1485,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1746,"src":"875:19:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$831_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":1495,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"875:86:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1496,"nodeType":"ExpressionStatement","src":"875:86:6"}]},"id":1498,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransfer","nameLocation":"772:12:6","nodeType":"FunctionDefinition","parameters":{"id":1483,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1478,"mutability":"mutable","name":"token","nameLocation":"801:5:6","nodeType":"VariableDeclaration","scope":1498,"src":"794:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$831","typeString":"contract IERC20"},"typeName":{"id":1477,"nodeType":"UserDefinedTypeName","pathNode":{"id":1476,"name":"IERC20","nodeType":"IdentifierPath","referencedDeclaration":831,"src":"794:6:6"},"referencedDeclaration":831,"src":"794:6:6","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$831","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":1480,"mutability":"mutable","name":"to","nameLocation":"824:2:6","nodeType":"VariableDeclaration","scope":1498,"src":"816:10:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1479,"name":"address","nodeType":"ElementaryTypeName","src":"816:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1482,"mutability":"mutable","name":"value","nameLocation":"844:5:6","nodeType":"VariableDeclaration","scope":1498,"src":"836:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1481,"name":"uint256","nodeType":"ElementaryTypeName","src":"836:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"784:71:6"},"returnParameters":{"id":1484,"nodeType":"ParameterList","parameters":[],"src":"865:0:6"},"scope":1747,"src":"763:205:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1523,"nodeType":"Block","src":"1102:113:6","statements":[{"expression":{"arguments":[{"id":1511,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1501,"src":"1132:5:6","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$831","typeString":"contract IERC20"}},{"arguments":[{"expression":{"expression":{"id":1514,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1501,"src":"1162:5:6","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$831","typeString":"contract IERC20"}},"id":1515,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"transferFrom","nodeType":"MemberAccess","referencedDeclaration":830,"src":"1162:18:6","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,address,uint256) external returns (bool)"}},"id":1516,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"selector","nodeType":"MemberAccess","src":"1162:27:6","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":1517,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1503,"src":"1191:4:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1518,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1505,"src":"1197:2:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1519,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1507,"src":"1201:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1512,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1139:3:6","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1513,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"1139:22:6","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":1520,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1139:68:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$831","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1510,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1746,"src":"1112:19:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$831_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":1521,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1112:96:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1522,"nodeType":"ExpressionStatement","src":"1112:96:6"}]},"id":1524,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"983:16:6","nodeType":"FunctionDefinition","parameters":{"id":1508,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1501,"mutability":"mutable","name":"token","nameLocation":"1016:5:6","nodeType":"VariableDeclaration","scope":1524,"src":"1009:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$831","typeString":"contract IERC20"},"typeName":{"id":1500,"nodeType":"UserDefinedTypeName","pathNode":{"id":1499,"name":"IERC20","nodeType":"IdentifierPath","referencedDeclaration":831,"src":"1009:6:6"},"referencedDeclaration":831,"src":"1009:6:6","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$831","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":1503,"mutability":"mutable","name":"from","nameLocation":"1039:4:6","nodeType":"VariableDeclaration","scope":1524,"src":"1031:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1502,"name":"address","nodeType":"ElementaryTypeName","src":"1031:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1505,"mutability":"mutable","name":"to","nameLocation":"1061:2:6","nodeType":"VariableDeclaration","scope":1524,"src":"1053:10:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1504,"name":"address","nodeType":"ElementaryTypeName","src":"1053:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1507,"mutability":"mutable","name":"value","nameLocation":"1081:5:6","nodeType":"VariableDeclaration","scope":1524,"src":"1073:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1506,"name":"uint256","nodeType":"ElementaryTypeName","src":"1073:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"999:93:6"},"returnParameters":{"id":1509,"nodeType":"ParameterList","parameters":[],"src":"1102:0:6"},"scope":1747,"src":"974:241:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1567,"nodeType":"Block","src":"1581:497:6","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1551,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1538,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1536,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1532,"src":"1830:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1537,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1839:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1830:10:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":1539,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1829:12:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1549,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"id":1544,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"1870:4:6","typeDescriptions":{"typeIdentifier":"t_contract$_SafeERC20_$1747","typeString":"library SafeERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_SafeERC20_$1747","typeString":"library SafeERC20"}],"id":1543,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1862:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1542,"name":"address","nodeType":"ElementaryTypeName","src":"1862:7:6","typeDescriptions":{}}},"id":1545,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1862:13:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1546,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1530,"src":"1877:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":1540,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1528,"src":"1846:5:6","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$831","typeString":"contract IERC20"}},"id":1541,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"allowance","nodeType":"MemberAccess","referencedDeclaration":808,"src":"1846:15:6","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view external returns (uint256)"}},"id":1547,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1846:39:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1548,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1889:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1846:44:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":1550,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1845:46:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1829:62:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365","id":1552,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1905:56:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25","typeString":"literal_string \"SafeERC20: approve from non-zero to non-zero allowance\""},"value":"SafeERC20: approve from non-zero to non-zero allowance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25","typeString":"literal_string \"SafeERC20: approve from non-zero to non-zero allowance\""}],"id":1535,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1808:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1553,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1808:163:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1554,"nodeType":"ExpressionStatement","src":"1808:163:6"},{"expression":{"arguments":[{"id":1556,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1528,"src":"2001:5:6","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$831","typeString":"contract IERC20"}},{"arguments":[{"expression":{"expression":{"id":1559,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1528,"src":"2031:5:6","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$831","typeString":"contract IERC20"}},"id":1560,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":818,"src":"2031:13:6","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":1561,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"selector","nodeType":"MemberAccess","src":"2031:22:6","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":1562,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1530,"src":"2055:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1563,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1532,"src":"2064:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1557,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2008:3:6","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1558,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"2008:22:6","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":1564,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2008:62:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$831","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1555,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1746,"src":"1981:19:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$831_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":1565,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1981:90:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1566,"nodeType":"ExpressionStatement","src":"1981:90:6"}]},"documentation":{"id":1525,"nodeType":"StructuredDocumentation","src":"1221:249:6","text":" @dev Deprecated. This function has issues similar to the ones found in\n {IERC20-approve}, and its usage is discouraged.\n Whenever possible, use {safeIncreaseAllowance} and\n {safeDecreaseAllowance} instead."},"id":1568,"implemented":true,"kind":"function","modifiers":[],"name":"safeApprove","nameLocation":"1484:11:6","nodeType":"FunctionDefinition","parameters":{"id":1533,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1528,"mutability":"mutable","name":"token","nameLocation":"1512:5:6","nodeType":"VariableDeclaration","scope":1568,"src":"1505:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$831","typeString":"contract IERC20"},"typeName":{"id":1527,"nodeType":"UserDefinedTypeName","pathNode":{"id":1526,"name":"IERC20","nodeType":"IdentifierPath","referencedDeclaration":831,"src":"1505:6:6"},"referencedDeclaration":831,"src":"1505:6:6","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$831","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":1530,"mutability":"mutable","name":"spender","nameLocation":"1535:7:6","nodeType":"VariableDeclaration","scope":1568,"src":"1527:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1529,"name":"address","nodeType":"ElementaryTypeName","src":"1527:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1532,"mutability":"mutable","name":"value","nameLocation":"1560:5:6","nodeType":"VariableDeclaration","scope":1568,"src":"1552:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1531,"name":"uint256","nodeType":"ElementaryTypeName","src":"1552:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1495:76:6"},"returnParameters":{"id":1534,"nodeType":"ParameterList","parameters":[],"src":"1581:0:6"},"scope":1747,"src":"1475:603:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1603,"nodeType":"Block","src":"2200:194:6","statements":[{"assignments":[1579],"declarations":[{"constant":false,"id":1579,"mutability":"mutable","name":"newAllowance","nameLocation":"2218:12:6","nodeType":"VariableDeclaration","scope":1603,"src":"2210:20:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1578,"name":"uint256","nodeType":"ElementaryTypeName","src":"2210:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1590,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1589,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"id":1584,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2257:4:6","typeDescriptions":{"typeIdentifier":"t_contract$_SafeERC20_$1747","typeString":"library SafeERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_SafeERC20_$1747","typeString":"library SafeERC20"}],"id":1583,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2249:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1582,"name":"address","nodeType":"ElementaryTypeName","src":"2249:7:6","typeDescriptions":{}}},"id":1585,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2249:13:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1586,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1573,"src":"2264:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":1580,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1571,"src":"2233:5:6","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$831","typeString":"contract IERC20"}},"id":1581,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"allowance","nodeType":"MemberAccess","referencedDeclaration":808,"src":"2233:15:6","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view external returns (uint256)"}},"id":1587,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2233:39:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":1588,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1575,"src":"2275:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2233:47:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2210:70:6"},{"expression":{"arguments":[{"id":1592,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1571,"src":"2310:5:6","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$831","typeString":"contract IERC20"}},{"arguments":[{"expression":{"expression":{"id":1595,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1571,"src":"2340:5:6","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$831","typeString":"contract IERC20"}},"id":1596,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":818,"src":"2340:13:6","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":1597,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"selector","nodeType":"MemberAccess","src":"2340:22:6","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":1598,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1573,"src":"2364:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1599,"name":"newAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1579,"src":"2373:12:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1593,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2317:3:6","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1594,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"2317:22:6","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":1600,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2317:69:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$831","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1591,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1746,"src":"2290:19:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$831_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":1601,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2290:97:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1602,"nodeType":"ExpressionStatement","src":"2290:97:6"}]},"id":1604,"implemented":true,"kind":"function","modifiers":[],"name":"safeIncreaseAllowance","nameLocation":"2093:21:6","nodeType":"FunctionDefinition","parameters":{"id":1576,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1571,"mutability":"mutable","name":"token","nameLocation":"2131:5:6","nodeType":"VariableDeclaration","scope":1604,"src":"2124:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$831","typeString":"contract IERC20"},"typeName":{"id":1570,"nodeType":"UserDefinedTypeName","pathNode":{"id":1569,"name":"IERC20","nodeType":"IdentifierPath","referencedDeclaration":831,"src":"2124:6:6"},"referencedDeclaration":831,"src":"2124:6:6","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$831","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":1573,"mutability":"mutable","name":"spender","nameLocation":"2154:7:6","nodeType":"VariableDeclaration","scope":1604,"src":"2146:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1572,"name":"address","nodeType":"ElementaryTypeName","src":"2146:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1575,"mutability":"mutable","name":"value","nameLocation":"2179:5:6","nodeType":"VariableDeclaration","scope":1604,"src":"2171:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1574,"name":"uint256","nodeType":"ElementaryTypeName","src":"2171:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2114:76:6"},"returnParameters":{"id":1577,"nodeType":"ParameterList","parameters":[],"src":"2200:0:6"},"scope":1747,"src":"2084:310:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1651,"nodeType":"Block","src":"2516:370:6","statements":[{"id":1650,"nodeType":"UncheckedBlock","src":"2526:354:6","statements":[{"assignments":[1615],"declarations":[{"constant":false,"id":1615,"mutability":"mutable","name":"oldAllowance","nameLocation":"2558:12:6","nodeType":"VariableDeclaration","scope":1650,"src":"2550:20:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1614,"name":"uint256","nodeType":"ElementaryTypeName","src":"2550:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1624,"initialValue":{"arguments":[{"arguments":[{"id":1620,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2597:4:6","typeDescriptions":{"typeIdentifier":"t_contract$_SafeERC20_$1747","typeString":"library SafeERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_SafeERC20_$1747","typeString":"library SafeERC20"}],"id":1619,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2589:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1618,"name":"address","nodeType":"ElementaryTypeName","src":"2589:7:6","typeDescriptions":{}}},"id":1621,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2589:13:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1622,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1609,"src":"2604:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":1616,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1607,"src":"2573:5:6","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$831","typeString":"contract IERC20"}},"id":1617,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"allowance","nodeType":"MemberAccess","referencedDeclaration":808,"src":"2573:15:6","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view external returns (uint256)"}},"id":1623,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2573:39:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2550:62:6"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1628,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1626,"name":"oldAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1615,"src":"2634:12:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1627,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1611,"src":"2650:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2634:21:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5361666545524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f","id":1629,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2657:43:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_2c3af60974a758b7e72e108c9bf0943ecc9e4f2e8af4695da5f52fbf57a63d3a","typeString":"literal_string \"SafeERC20: decreased allowance below zero\""},"value":"SafeERC20: decreased allowance below zero"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_2c3af60974a758b7e72e108c9bf0943ecc9e4f2e8af4695da5f52fbf57a63d3a","typeString":"literal_string \"SafeERC20: decreased allowance below zero\""}],"id":1625,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2626:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1630,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2626:75:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1631,"nodeType":"ExpressionStatement","src":"2626:75:6"},{"assignments":[1633],"declarations":[{"constant":false,"id":1633,"mutability":"mutable","name":"newAllowance","nameLocation":"2723:12:6","nodeType":"VariableDeclaration","scope":1650,"src":"2715:20:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1632,"name":"uint256","nodeType":"ElementaryTypeName","src":"2715:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1637,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1636,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1634,"name":"oldAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1615,"src":"2738:12:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":1635,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1611,"src":"2753:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2738:20:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2715:43:6"},{"expression":{"arguments":[{"id":1639,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1607,"src":"2792:5:6","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$831","typeString":"contract IERC20"}},{"arguments":[{"expression":{"expression":{"id":1642,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1607,"src":"2822:5:6","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$831","typeString":"contract IERC20"}},"id":1643,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":818,"src":"2822:13:6","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":1644,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"selector","nodeType":"MemberAccess","src":"2822:22:6","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":1645,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1609,"src":"2846:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1646,"name":"newAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1633,"src":"2855:12:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1640,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2799:3:6","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1641,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"2799:22:6","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":1647,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2799:69:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$831","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1638,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1746,"src":"2772:19:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$831_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":1648,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2772:97:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1649,"nodeType":"ExpressionStatement","src":"2772:97:6"}]}]},"id":1652,"implemented":true,"kind":"function","modifiers":[],"name":"safeDecreaseAllowance","nameLocation":"2409:21:6","nodeType":"FunctionDefinition","parameters":{"id":1612,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1607,"mutability":"mutable","name":"token","nameLocation":"2447:5:6","nodeType":"VariableDeclaration","scope":1652,"src":"2440:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$831","typeString":"contract IERC20"},"typeName":{"id":1606,"nodeType":"UserDefinedTypeName","pathNode":{"id":1605,"name":"IERC20","nodeType":"IdentifierPath","referencedDeclaration":831,"src":"2440:6:6"},"referencedDeclaration":831,"src":"2440:6:6","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$831","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":1609,"mutability":"mutable","name":"spender","nameLocation":"2470:7:6","nodeType":"VariableDeclaration","scope":1652,"src":"2462:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1608,"name":"address","nodeType":"ElementaryTypeName","src":"2462:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1611,"mutability":"mutable","name":"value","nameLocation":"2495:5:6","nodeType":"VariableDeclaration","scope":1652,"src":"2487:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1610,"name":"uint256","nodeType":"ElementaryTypeName","src":"2487:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2430:76:6"},"returnParameters":{"id":1613,"nodeType":"ParameterList","parameters":[],"src":"2516:0:6"},"scope":1747,"src":"2400:486:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1707,"nodeType":"Block","src":"3107:257:6","statements":[{"assignments":[1673],"declarations":[{"constant":false,"id":1673,"mutability":"mutable","name":"nonceBefore","nameLocation":"3125:11:6","nodeType":"VariableDeclaration","scope":1707,"src":"3117:19:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1672,"name":"uint256","nodeType":"ElementaryTypeName","src":"3117:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1678,"initialValue":{"arguments":[{"id":1676,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1657,"src":"3152:5:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":1674,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1655,"src":"3139:5:6","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Permit_$1466","typeString":"contract IERC20Permit"}},"id":1675,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"nonces","nodeType":"MemberAccess","referencedDeclaration":1459,"src":"3139:12:6","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view external returns (uint256)"}},"id":1677,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3139:19:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3117:41:6"},{"expression":{"arguments":[{"id":1682,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1657,"src":"3181:5:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1683,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1659,"src":"3188:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1684,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1661,"src":"3197:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1685,"name":"deadline","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1663,"src":"3204:8:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1686,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1665,"src":"3214:1:6","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":1687,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1667,"src":"3217:1:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1688,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1669,"src":"3220:1:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":1679,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1655,"src":"3168:5:6","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Permit_$1466","typeString":"contract IERC20Permit"}},"id":1681,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"permit","nodeType":"MemberAccess","referencedDeclaration":1451,"src":"3168:12:6","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$__$","typeString":"function (address,address,uint256,uint256,uint8,bytes32,bytes32) external"}},"id":1689,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3168:54:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1690,"nodeType":"ExpressionStatement","src":"3168:54:6"},{"assignments":[1692],"declarations":[{"constant":false,"id":1692,"mutability":"mutable","name":"nonceAfter","nameLocation":"3240:10:6","nodeType":"VariableDeclaration","scope":1707,"src":"3232:18:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1691,"name":"uint256","nodeType":"ElementaryTypeName","src":"3232:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1697,"initialValue":{"arguments":[{"id":1695,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1657,"src":"3266:5:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":1693,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1655,"src":"3253:5:6","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Permit_$1466","typeString":"contract IERC20Permit"}},"id":1694,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"nonces","nodeType":"MemberAccess","referencedDeclaration":1459,"src":"3253:12:6","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view external returns (uint256)"}},"id":1696,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3253:19:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3232:40:6"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1703,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1699,"name":"nonceAfter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1692,"src":"3290:10:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1702,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1700,"name":"nonceBefore","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1673,"src":"3304:11:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1701,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3318:1:6","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3304:15:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3290:29:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5361666545524332303a207065726d697420646964206e6f742073756363656564","id":1704,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3321:35:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_cde8e927812a7a656f8f04e89ac4f4113d47940dd2125d11fcb8e0bd36bfc59d","typeString":"literal_string \"SafeERC20: permit did not succeed\""},"value":"SafeERC20: permit did not succeed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_cde8e927812a7a656f8f04e89ac4f4113d47940dd2125d11fcb8e0bd36bfc59d","typeString":"literal_string \"SafeERC20: permit did not succeed\""}],"id":1698,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3282:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1705,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3282:75:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1706,"nodeType":"ExpressionStatement","src":"3282:75:6"}]},"id":1708,"implemented":true,"kind":"function","modifiers":[],"name":"safePermit","nameLocation":"2901:10:6","nodeType":"FunctionDefinition","parameters":{"id":1670,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1655,"mutability":"mutable","name":"token","nameLocation":"2934:5:6","nodeType":"VariableDeclaration","scope":1708,"src":"2921:18:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Permit_$1466","typeString":"contract IERC20Permit"},"typeName":{"id":1654,"nodeType":"UserDefinedTypeName","pathNode":{"id":1653,"name":"IERC20Permit","nodeType":"IdentifierPath","referencedDeclaration":1466,"src":"2921:12:6"},"referencedDeclaration":1466,"src":"2921:12:6","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Permit_$1466","typeString":"contract IERC20Permit"}},"visibility":"internal"},{"constant":false,"id":1657,"mutability":"mutable","name":"owner","nameLocation":"2957:5:6","nodeType":"VariableDeclaration","scope":1708,"src":"2949:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1656,"name":"address","nodeType":"ElementaryTypeName","src":"2949:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1659,"mutability":"mutable","name":"spender","nameLocation":"2980:7:6","nodeType":"VariableDeclaration","scope":1708,"src":"2972:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1658,"name":"address","nodeType":"ElementaryTypeName","src":"2972:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1661,"mutability":"mutable","name":"value","nameLocation":"3005:5:6","nodeType":"VariableDeclaration","scope":1708,"src":"2997:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1660,"name":"uint256","nodeType":"ElementaryTypeName","src":"2997:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1663,"mutability":"mutable","name":"deadline","nameLocation":"3028:8:6","nodeType":"VariableDeclaration","scope":1708,"src":"3020:16:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1662,"name":"uint256","nodeType":"ElementaryTypeName","src":"3020:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1665,"mutability":"mutable","name":"v","nameLocation":"3052:1:6","nodeType":"VariableDeclaration","scope":1708,"src":"3046:7:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1664,"name":"uint8","nodeType":"ElementaryTypeName","src":"3046:5:6","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":1667,"mutability":"mutable","name":"r","nameLocation":"3071:1:6","nodeType":"VariableDeclaration","scope":1708,"src":"3063:9:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1666,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3063:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1669,"mutability":"mutable","name":"s","nameLocation":"3090:1:6","nodeType":"VariableDeclaration","scope":1708,"src":"3082:9:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1668,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3082:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2911:186:6"},"returnParameters":{"id":1671,"nodeType":"ParameterList","parameters":[],"src":"3107:0:6"},"scope":1747,"src":"2892:472:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1745,"nodeType":"Block","src":"3817:636:6","statements":[{"assignments":[1718],"declarations":[{"constant":false,"id":1718,"mutability":"mutable","name":"returndata","nameLocation":"4179:10:6","nodeType":"VariableDeclaration","scope":1745,"src":"4166:23:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1717,"name":"bytes","nodeType":"ElementaryTypeName","src":"4166:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1727,"initialValue":{"arguments":[{"id":1724,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1714,"src":"4220:4:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564","id":1725,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4226:34:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_47fb62c2c272651d2f0f342bac006756b8ba07f21cc5cb87e0fbb9d50c0c585b","typeString":"literal_string \"SafeERC20: low-level call failed\""},"value":"SafeERC20: low-level call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_47fb62c2c272651d2f0f342bac006756b8ba07f21cc5cb87e0fbb9d50c0c585b","typeString":"literal_string \"SafeERC20: low-level call failed\""}],"expression":{"arguments":[{"id":1721,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1712,"src":"4200:5:6","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$831","typeString":"contract IERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$831","typeString":"contract IERC20"}],"id":1720,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4192:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1719,"name":"address","nodeType":"ElementaryTypeName","src":"4192:7:6","typeDescriptions":{}}},"id":1722,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4192:14:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1723,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"functionCall","nodeType":"MemberAccess","referencedDeclaration":1836,"src":"4192:27:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$bound_to$_t_address_$","typeString":"function (address,bytes memory,string memory) returns (bytes memory)"}},"id":1726,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4192:69:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"4166:95:6"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1731,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1728,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1718,"src":"4275:10:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1729,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"4275:17:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1730,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4295:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"4275:21:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1744,"nodeType":"IfStatement","src":"4271:176:6","trueBody":{"id":1743,"nodeType":"Block","src":"4298:149:6","statements":[{"expression":{"arguments":[{"arguments":[{"id":1735,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1718,"src":"4370:10:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"components":[{"id":1737,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4383:4:6","typeDescriptions":{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"},"typeName":{"id":1736,"name":"bool","nodeType":"ElementaryTypeName","src":"4383:4:6","typeDescriptions":{}}}],"id":1738,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"4382:6:6","typeDescriptions":{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"}],"expression":{"id":1733,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"4359:3:6","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1734,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"decode","nodeType":"MemberAccess","src":"4359:10:6","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":1739,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4359:30:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564","id":1740,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4391:44:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd","typeString":"literal_string \"SafeERC20: ERC20 operation did not succeed\""},"value":"SafeERC20: ERC20 operation did not succeed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd","typeString":"literal_string \"SafeERC20: ERC20 operation did not succeed\""}],"id":1732,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4351:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1741,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4351:85:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1742,"nodeType":"ExpressionStatement","src":"4351:85:6"}]}}]},"documentation":{"id":1709,"nodeType":"StructuredDocumentation","src":"3370:372:6","text":" @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n on the return value: the return value is optional (but if data is returned, it must not be false).\n @param token The token targeted by the call.\n @param data The call data (encoded using abi.encode or one of its variants)."},"id":1746,"implemented":true,"kind":"function","modifiers":[],"name":"_callOptionalReturn","nameLocation":"3756:19:6","nodeType":"FunctionDefinition","parameters":{"id":1715,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1712,"mutability":"mutable","name":"token","nameLocation":"3783:5:6","nodeType":"VariableDeclaration","scope":1746,"src":"3776:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$831","typeString":"contract IERC20"},"typeName":{"id":1711,"nodeType":"UserDefinedTypeName","pathNode":{"id":1710,"name":"IERC20","nodeType":"IdentifierPath","referencedDeclaration":831,"src":"3776:6:6"},"referencedDeclaration":831,"src":"3776:6:6","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$831","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":1714,"mutability":"mutable","name":"data","nameLocation":"3803:4:6","nodeType":"VariableDeclaration","scope":1746,"src":"3790:17:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1713,"name":"bytes","nodeType":"ElementaryTypeName","src":"3790:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3775:33:6"},"returnParameters":{"id":1716,"nodeType":"ParameterList","parameters":[],"src":"3817:0:6"},"scope":1747,"src":"3747:706:6","stateMutability":"nonpayable","virtual":false,"visibility":"private"}],"scope":1748,"src":"707:3748:6","usedErrors":[]}],"src":"115:4341:6"},"id":6},"@openzeppelin/contracts/utils/Address.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Address.sol","exportedSymbols":{"Address":[2042]},"id":2043,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1749,"literals":["solidity","^","0.8",".1"],"nodeType":"PragmaDirective","src":"101:23:7"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"library","documentation":{"id":1750,"nodeType":"StructuredDocumentation","src":"126:67:7","text":" @dev Collection of functions related to the address type"},"fullyImplemented":true,"id":2042,"linearizedBaseContracts":[2042],"name":"Address","nameLocation":"202:7:7","nodeType":"ContractDefinition","nodes":[{"body":{"id":1764,"nodeType":"Block","src":"1241:254:7","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1762,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":1758,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1753,"src":"1465:7:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1759,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"code","nodeType":"MemberAccess","src":"1465:12:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1760,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"1465:19:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1761,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1487:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1465:23:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1757,"id":1763,"nodeType":"Return","src":"1458:30:7"}]},"documentation":{"id":1751,"nodeType":"StructuredDocumentation","src":"216:954:7","text":" @dev Returns true if `account` is a contract.\n [IMPORTANT]\n ====\n It is unsafe to assume that an address for which this function returns\n false is an externally-owned account (EOA) and not a contract.\n Among others, `isContract` will return false for the following\n types of addresses:\n  - an externally-owned account\n  - a contract in construction\n  - an address where a contract will be created\n  - an address where a contract lived, but was destroyed\n ====\n [IMPORTANT]\n ====\n You shouldn't rely on `isContract` to protect against flash loan attacks!\n Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n constructor.\n ===="},"id":1765,"implemented":true,"kind":"function","modifiers":[],"name":"isContract","nameLocation":"1184:10:7","nodeType":"FunctionDefinition","parameters":{"id":1754,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1753,"mutability":"mutable","name":"account","nameLocation":"1203:7:7","nodeType":"VariableDeclaration","scope":1765,"src":"1195:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1752,"name":"address","nodeType":"ElementaryTypeName","src":"1195:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1194:17:7"},"returnParameters":{"id":1757,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1756,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1765,"src":"1235:4:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1755,"name":"bool","nodeType":"ElementaryTypeName","src":"1235:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1234:6:7"},"scope":2042,"src":"1175:320:7","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1798,"nodeType":"Block","src":"2483:241:7","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1780,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":1776,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2509:4:7","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$2042","typeString":"library Address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Address_$2042","typeString":"library Address"}],"id":1775,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2501:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1774,"name":"address","nodeType":"ElementaryTypeName","src":"2501:7:7","typeDescriptions":{}}},"id":1777,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2501:13:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1778,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"balance","nodeType":"MemberAccess","src":"2501:21:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1779,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1770,"src":"2526:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2501:31:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e6365","id":1781,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2534:31:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""},"value":"Address: insufficient balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""}],"id":1773,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2493:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1782,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2493:73:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1783,"nodeType":"ExpressionStatement","src":"2493:73:7"},{"assignments":[1785,null],"declarations":[{"constant":false,"id":1785,"mutability":"mutable","name":"success","nameLocation":"2583:7:7","nodeType":"VariableDeclaration","scope":1798,"src":"2578:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1784,"name":"bool","nodeType":"ElementaryTypeName","src":"2578:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":1792,"initialValue":{"arguments":[{"hexValue":"","id":1790,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2626:2:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"id":1786,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1768,"src":"2596:9:7","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":1787,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"call","nodeType":"MemberAccess","src":"2596:14:7","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1789,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":1788,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1770,"src":"2618:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"2596:29:7","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1791,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2596:33:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"2577:52:7"},{"expression":{"arguments":[{"id":1794,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1785,"src":"2647:7:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564","id":1795,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2656:60:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""},"value":"Address: unable to send value, recipient may have reverted"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""}],"id":1793,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2639:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1796,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2639:78:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1797,"nodeType":"ExpressionStatement","src":"2639:78:7"}]},"documentation":{"id":1766,"nodeType":"StructuredDocumentation","src":"1501:906:7","text":" @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."},"id":1799,"implemented":true,"kind":"function","modifiers":[],"name":"sendValue","nameLocation":"2421:9:7","nodeType":"FunctionDefinition","parameters":{"id":1771,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1768,"mutability":"mutable","name":"recipient","nameLocation":"2447:9:7","nodeType":"VariableDeclaration","scope":1799,"src":"2431:25:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":1767,"name":"address","nodeType":"ElementaryTypeName","src":"2431:15:7","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"},{"constant":false,"id":1770,"mutability":"mutable","name":"amount","nameLocation":"2466:6:7","nodeType":"VariableDeclaration","scope":1799,"src":"2458:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1769,"name":"uint256","nodeType":"ElementaryTypeName","src":"2458:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2430:43:7"},"returnParameters":{"id":1772,"nodeType":"ParameterList","parameters":[],"src":"2483:0:7"},"scope":2042,"src":"2412:312:7","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1815,"nodeType":"Block","src":"3555:84:7","statements":[{"expression":{"arguments":[{"id":1810,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1802,"src":"3585:6:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1811,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1804,"src":"3593:4:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564","id":1812,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3599:32:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""},"value":"Address: low-level call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""}],"id":1809,"name":"functionCall","nodeType":"Identifier","overloadedDeclarations":[1816,1836],"referencedDeclaration":1836,"src":"3572:12:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) returns (bytes memory)"}},"id":1813,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3572:60:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1808,"id":1814,"nodeType":"Return","src":"3565:67:7"}]},"documentation":{"id":1800,"nodeType":"StructuredDocumentation","src":"2730:731:7","text":" @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason, it is bubbled up by this\n function (like regular Solidity function calls).\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert.\n _Available since v3.1._"},"id":1816,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"3475:12:7","nodeType":"FunctionDefinition","parameters":{"id":1805,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1802,"mutability":"mutable","name":"target","nameLocation":"3496:6:7","nodeType":"VariableDeclaration","scope":1816,"src":"3488:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1801,"name":"address","nodeType":"ElementaryTypeName","src":"3488:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1804,"mutability":"mutable","name":"data","nameLocation":"3517:4:7","nodeType":"VariableDeclaration","scope":1816,"src":"3504:17:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1803,"name":"bytes","nodeType":"ElementaryTypeName","src":"3504:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3487:35:7"},"returnParameters":{"id":1808,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1807,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1816,"src":"3541:12:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1806,"name":"bytes","nodeType":"ElementaryTypeName","src":"3541:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3540:14:7"},"scope":2042,"src":"3466:173:7","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1835,"nodeType":"Block","src":"4008:76:7","statements":[{"expression":{"arguments":[{"id":1829,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1819,"src":"4047:6:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1830,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1821,"src":"4055:4:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":1831,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4061:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"id":1832,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1823,"src":"4064:12:7","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1828,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[1856,1906],"referencedDeclaration":1906,"src":"4025:21:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":1833,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4025:52:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1827,"id":1834,"nodeType":"Return","src":"4018:59:7"}]},"documentation":{"id":1817,"nodeType":"StructuredDocumentation","src":"3645:211:7","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":1836,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"3870:12:7","nodeType":"FunctionDefinition","parameters":{"id":1824,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1819,"mutability":"mutable","name":"target","nameLocation":"3900:6:7","nodeType":"VariableDeclaration","scope":1836,"src":"3892:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1818,"name":"address","nodeType":"ElementaryTypeName","src":"3892:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1821,"mutability":"mutable","name":"data","nameLocation":"3929:4:7","nodeType":"VariableDeclaration","scope":1836,"src":"3916:17:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1820,"name":"bytes","nodeType":"ElementaryTypeName","src":"3916:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1823,"mutability":"mutable","name":"errorMessage","nameLocation":"3957:12:7","nodeType":"VariableDeclaration","scope":1836,"src":"3943:26:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1822,"name":"string","nodeType":"ElementaryTypeName","src":"3943:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3882:93:7"},"returnParameters":{"id":1827,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1826,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1836,"src":"3994:12:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1825,"name":"bytes","nodeType":"ElementaryTypeName","src":"3994:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3993:14:7"},"scope":2042,"src":"3861:223:7","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1855,"nodeType":"Block","src":"4589:111:7","statements":[{"expression":{"arguments":[{"id":1849,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1839,"src":"4628:6:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1850,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1841,"src":"4636:4:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1851,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1843,"src":"4642:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564","id":1852,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4649:43:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""},"value":"Address: low-level call with value failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""}],"id":1848,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[1856,1906],"referencedDeclaration":1906,"src":"4606:21:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":1853,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4606:87:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1847,"id":1854,"nodeType":"Return","src":"4599:94:7"}]},"documentation":{"id":1837,"nodeType":"StructuredDocumentation","src":"4090:351:7","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`.\n _Available since v3.1._"},"id":1856,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"4455:21:7","nodeType":"FunctionDefinition","parameters":{"id":1844,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1839,"mutability":"mutable","name":"target","nameLocation":"4494:6:7","nodeType":"VariableDeclaration","scope":1856,"src":"4486:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1838,"name":"address","nodeType":"ElementaryTypeName","src":"4486:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1841,"mutability":"mutable","name":"data","nameLocation":"4523:4:7","nodeType":"VariableDeclaration","scope":1856,"src":"4510:17:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1840,"name":"bytes","nodeType":"ElementaryTypeName","src":"4510:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1843,"mutability":"mutable","name":"value","nameLocation":"4545:5:7","nodeType":"VariableDeclaration","scope":1856,"src":"4537:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1842,"name":"uint256","nodeType":"ElementaryTypeName","src":"4537:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4476:80:7"},"returnParameters":{"id":1847,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1846,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1856,"src":"4575:12:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1845,"name":"bytes","nodeType":"ElementaryTypeName","src":"4575:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4574:14:7"},"scope":2042,"src":"4446:254:7","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1905,"nodeType":"Block","src":"5127:320:7","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1877,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":1873,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"5153:4:7","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$2042","typeString":"library Address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Address_$2042","typeString":"library Address"}],"id":1872,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5145:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1871,"name":"address","nodeType":"ElementaryTypeName","src":"5145:7:7","typeDescriptions":{}}},"id":1874,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5145:13:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1875,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"balance","nodeType":"MemberAccess","src":"5145:21:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1876,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1863,"src":"5170:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5145:30:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c","id":1878,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5177:40:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""},"value":"Address: insufficient balance for call"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""}],"id":1870,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5137:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1879,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5137:81:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1880,"nodeType":"ExpressionStatement","src":"5137:81:7"},{"expression":{"arguments":[{"arguments":[{"id":1883,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1859,"src":"5247:6:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1882,"name":"isContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1765,"src":"5236:10:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":1884,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5236:18:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374","id":1885,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5256:31:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""},"value":"Address: call to non-contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""}],"id":1881,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5228:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1886,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5228:60:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1887,"nodeType":"ExpressionStatement","src":"5228:60:7"},{"assignments":[1889,1891],"declarations":[{"constant":false,"id":1889,"mutability":"mutable","name":"success","nameLocation":"5305:7:7","nodeType":"VariableDeclaration","scope":1905,"src":"5300:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1888,"name":"bool","nodeType":"ElementaryTypeName","src":"5300:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1891,"mutability":"mutable","name":"returndata","nameLocation":"5327:10:7","nodeType":"VariableDeclaration","scope":1905,"src":"5314:23:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1890,"name":"bytes","nodeType":"ElementaryTypeName","src":"5314:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1898,"initialValue":{"arguments":[{"id":1896,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1861,"src":"5367:4:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1892,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1859,"src":"5341:6:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1893,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"call","nodeType":"MemberAccess","src":"5341:11:7","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1895,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":1894,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1863,"src":"5360:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"5341:25:7","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1897,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5341:31:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"5299:73:7"},{"expression":{"arguments":[{"id":1900,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1889,"src":"5406:7:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":1901,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1891,"src":"5415:10:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1902,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1865,"src":"5427:12:7","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1899,"name":"verifyCallResult","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2041,"src":"5389:16:7","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (bool,bytes memory,string memory) pure returns (bytes memory)"}},"id":1903,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5389:51:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1869,"id":1904,"nodeType":"Return","src":"5382:58:7"}]},"documentation":{"id":1857,"nodeType":"StructuredDocumentation","src":"4706:237:7","text":" @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n with `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":1906,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"4957:21:7","nodeType":"FunctionDefinition","parameters":{"id":1866,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1859,"mutability":"mutable","name":"target","nameLocation":"4996:6:7","nodeType":"VariableDeclaration","scope":1906,"src":"4988:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1858,"name":"address","nodeType":"ElementaryTypeName","src":"4988:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1861,"mutability":"mutable","name":"data","nameLocation":"5025:4:7","nodeType":"VariableDeclaration","scope":1906,"src":"5012:17:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1860,"name":"bytes","nodeType":"ElementaryTypeName","src":"5012:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1863,"mutability":"mutable","name":"value","nameLocation":"5047:5:7","nodeType":"VariableDeclaration","scope":1906,"src":"5039:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1862,"name":"uint256","nodeType":"ElementaryTypeName","src":"5039:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1865,"mutability":"mutable","name":"errorMessage","nameLocation":"5076:12:7","nodeType":"VariableDeclaration","scope":1906,"src":"5062:26:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1864,"name":"string","nodeType":"ElementaryTypeName","src":"5062:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"4978:116:7"},"returnParameters":{"id":1869,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1868,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1906,"src":"5113:12:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1867,"name":"bytes","nodeType":"ElementaryTypeName","src":"5113:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5112:14:7"},"scope":2042,"src":"4948:499:7","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1922,"nodeType":"Block","src":"5724:97:7","statements":[{"expression":{"arguments":[{"id":1917,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1909,"src":"5760:6:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1918,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1911,"src":"5768:4:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564","id":1919,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5774:39:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""},"value":"Address: low-level static call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""}],"id":1916,"name":"functionStaticCall","nodeType":"Identifier","overloadedDeclarations":[1923,1958],"referencedDeclaration":1958,"src":"5741:18:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) view returns (bytes memory)"}},"id":1920,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5741:73:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1915,"id":1921,"nodeType":"Return","src":"5734:80:7"}]},"documentation":{"id":1907,"nodeType":"StructuredDocumentation","src":"5453:166:7","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":1923,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"5633:18:7","nodeType":"FunctionDefinition","parameters":{"id":1912,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1909,"mutability":"mutable","name":"target","nameLocation":"5660:6:7","nodeType":"VariableDeclaration","scope":1923,"src":"5652:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1908,"name":"address","nodeType":"ElementaryTypeName","src":"5652:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1911,"mutability":"mutable","name":"data","nameLocation":"5681:4:7","nodeType":"VariableDeclaration","scope":1923,"src":"5668:17:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1910,"name":"bytes","nodeType":"ElementaryTypeName","src":"5668:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5651:35:7"},"returnParameters":{"id":1915,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1914,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1923,"src":"5710:12:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1913,"name":"bytes","nodeType":"ElementaryTypeName","src":"5710:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5709:14:7"},"scope":2042,"src":"5624:197:7","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1957,"nodeType":"Block","src":"6163:228:7","statements":[{"expression":{"arguments":[{"arguments":[{"id":1937,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1926,"src":"6192:6:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1936,"name":"isContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1765,"src":"6181:10:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":1938,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6181:18:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a207374617469632063616c6c20746f206e6f6e2d636f6e7472616374","id":1939,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6201:38:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_c79cc78e4f16ce3933a42b84c73868f93bb4a59c031a0acf576679de98c608a9","typeString":"literal_string \"Address: static call to non-contract\""},"value":"Address: static call to non-contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_c79cc78e4f16ce3933a42b84c73868f93bb4a59c031a0acf576679de98c608a9","typeString":"literal_string \"Address: static call to non-contract\""}],"id":1935,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6173:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1940,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6173:67:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1941,"nodeType":"ExpressionStatement","src":"6173:67:7"},{"assignments":[1943,1945],"declarations":[{"constant":false,"id":1943,"mutability":"mutable","name":"success","nameLocation":"6257:7:7","nodeType":"VariableDeclaration","scope":1957,"src":"6252:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1942,"name":"bool","nodeType":"ElementaryTypeName","src":"6252:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1945,"mutability":"mutable","name":"returndata","nameLocation":"6279:10:7","nodeType":"VariableDeclaration","scope":1957,"src":"6266:23:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1944,"name":"bytes","nodeType":"ElementaryTypeName","src":"6266:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1950,"initialValue":{"arguments":[{"id":1948,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1928,"src":"6311:4:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1946,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1926,"src":"6293:6:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1947,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"staticcall","nodeType":"MemberAccess","src":"6293:17:7","typeDescriptions":{"typeIdentifier":"t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) view returns (bool,bytes memory)"}},"id":1949,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6293:23:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"6251:65:7"},{"expression":{"arguments":[{"id":1952,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1943,"src":"6350:7:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":1953,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1945,"src":"6359:10:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1954,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1930,"src":"6371:12:7","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1951,"name":"verifyCallResult","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2041,"src":"6333:16:7","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (bool,bytes memory,string memory) pure returns (bytes memory)"}},"id":1955,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6333:51:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1934,"id":1956,"nodeType":"Return","src":"6326:58:7"}]},"documentation":{"id":1924,"nodeType":"StructuredDocumentation","src":"5827:173:7","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":1958,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"6014:18:7","nodeType":"FunctionDefinition","parameters":{"id":1931,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1926,"mutability":"mutable","name":"target","nameLocation":"6050:6:7","nodeType":"VariableDeclaration","scope":1958,"src":"6042:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1925,"name":"address","nodeType":"ElementaryTypeName","src":"6042:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1928,"mutability":"mutable","name":"data","nameLocation":"6079:4:7","nodeType":"VariableDeclaration","scope":1958,"src":"6066:17:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1927,"name":"bytes","nodeType":"ElementaryTypeName","src":"6066:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1930,"mutability":"mutable","name":"errorMessage","nameLocation":"6107:12:7","nodeType":"VariableDeclaration","scope":1958,"src":"6093:26:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1929,"name":"string","nodeType":"ElementaryTypeName","src":"6093:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"6032:93:7"},"returnParameters":{"id":1934,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1933,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1958,"src":"6149:12:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1932,"name":"bytes","nodeType":"ElementaryTypeName","src":"6149:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6148:14:7"},"scope":2042,"src":"6005:386:7","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1974,"nodeType":"Block","src":"6667:101:7","statements":[{"expression":{"arguments":[{"id":1969,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1961,"src":"6705:6:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1970,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1963,"src":"6713:4:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564","id":1971,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6719:41:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""},"value":"Address: low-level delegate call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""}],"id":1968,"name":"functionDelegateCall","nodeType":"Identifier","overloadedDeclarations":[1975,2010],"referencedDeclaration":2010,"src":"6684:20:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) returns (bytes memory)"}},"id":1972,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6684:77:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1967,"id":1973,"nodeType":"Return","src":"6677:84:7"}]},"documentation":{"id":1959,"nodeType":"StructuredDocumentation","src":"6397:168:7","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"},"id":1975,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"6579:20:7","nodeType":"FunctionDefinition","parameters":{"id":1964,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1961,"mutability":"mutable","name":"target","nameLocation":"6608:6:7","nodeType":"VariableDeclaration","scope":1975,"src":"6600:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1960,"name":"address","nodeType":"ElementaryTypeName","src":"6600:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1963,"mutability":"mutable","name":"data","nameLocation":"6629:4:7","nodeType":"VariableDeclaration","scope":1975,"src":"6616:17:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1962,"name":"bytes","nodeType":"ElementaryTypeName","src":"6616:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6599:35:7"},"returnParameters":{"id":1967,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1966,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1975,"src":"6653:12:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1965,"name":"bytes","nodeType":"ElementaryTypeName","src":"6653:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6652:14:7"},"scope":2042,"src":"6570:198:7","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2009,"nodeType":"Block","src":"7109:232:7","statements":[{"expression":{"arguments":[{"arguments":[{"id":1989,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1978,"src":"7138:6:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1988,"name":"isContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1765,"src":"7127:10:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":1990,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7127:18:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6e7472616374","id":1991,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7147:40:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520","typeString":"literal_string \"Address: delegate call to non-contract\""},"value":"Address: delegate call to non-contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520","typeString":"literal_string \"Address: delegate call to non-contract\""}],"id":1987,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"7119:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1992,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7119:69:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1993,"nodeType":"ExpressionStatement","src":"7119:69:7"},{"assignments":[1995,1997],"declarations":[{"constant":false,"id":1995,"mutability":"mutable","name":"success","nameLocation":"7205:7:7","nodeType":"VariableDeclaration","scope":2009,"src":"7200:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1994,"name":"bool","nodeType":"ElementaryTypeName","src":"7200:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1997,"mutability":"mutable","name":"returndata","nameLocation":"7227:10:7","nodeType":"VariableDeclaration","scope":2009,"src":"7214:23:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1996,"name":"bytes","nodeType":"ElementaryTypeName","src":"7214:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":2002,"initialValue":{"arguments":[{"id":2000,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1980,"src":"7261:4:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1998,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1978,"src":"7241:6:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1999,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"delegatecall","nodeType":"MemberAccess","src":"7241:19:7","typeDescriptions":{"typeIdentifier":"t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) returns (bool,bytes memory)"}},"id":2001,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7241:25:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"7199:67:7"},{"expression":{"arguments":[{"id":2004,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1995,"src":"7300:7:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":2005,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1997,"src":"7309:10:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":2006,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1982,"src":"7321:12:7","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2003,"name":"verifyCallResult","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2041,"src":"7283:16:7","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (bool,bytes memory,string memory) pure returns (bytes memory)"}},"id":2007,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7283:51:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1986,"id":2008,"nodeType":"Return","src":"7276:58:7"}]},"documentation":{"id":1976,"nodeType":"StructuredDocumentation","src":"6774:175:7","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"},"id":2010,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"6963:20:7","nodeType":"FunctionDefinition","parameters":{"id":1983,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1978,"mutability":"mutable","name":"target","nameLocation":"7001:6:7","nodeType":"VariableDeclaration","scope":2010,"src":"6993:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1977,"name":"address","nodeType":"ElementaryTypeName","src":"6993:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1980,"mutability":"mutable","name":"data","nameLocation":"7030:4:7","nodeType":"VariableDeclaration","scope":2010,"src":"7017:17:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1979,"name":"bytes","nodeType":"ElementaryTypeName","src":"7017:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1982,"mutability":"mutable","name":"errorMessage","nameLocation":"7058:12:7","nodeType":"VariableDeclaration","scope":2010,"src":"7044:26:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1981,"name":"string","nodeType":"ElementaryTypeName","src":"7044:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"6983:93:7"},"returnParameters":{"id":1986,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1985,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2010,"src":"7095:12:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1984,"name":"bytes","nodeType":"ElementaryTypeName","src":"7095:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7094:14:7"},"scope":2042,"src":"6954:387:7","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2040,"nodeType":"Block","src":"7721:582:7","statements":[{"condition":{"id":2022,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2013,"src":"7735:7:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2038,"nodeType":"Block","src":"7792:505:7","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2029,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2026,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2015,"src":"7876:10:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2027,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"7876:17:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2028,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7896:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7876:21:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2036,"nodeType":"Block","src":"8234:53:7","statements":[{"expression":{"arguments":[{"id":2033,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2017,"src":"8259:12:7","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2032,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"8252:6:7","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":2034,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8252:20:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2035,"nodeType":"ExpressionStatement","src":"8252:20:7"}]},"id":2037,"nodeType":"IfStatement","src":"7872:415:7","trueBody":{"id":2031,"nodeType":"Block","src":"7899:329:7","statements":[{"AST":{"nodeType":"YulBlock","src":"8069:145:7","statements":[{"nodeType":"YulVariableDeclaration","src":"8091:40:7","value":{"arguments":[{"name":"returndata","nodeType":"YulIdentifier","src":"8120:10:7"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8114:5:7"},"nodeType":"YulFunctionCall","src":"8114:17:7"},"variables":[{"name":"returndata_size","nodeType":"YulTypedName","src":"8095:15:7","type":""}]},{"expression":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8163:2:7","type":"","value":"32"},{"name":"returndata","nodeType":"YulIdentifier","src":"8167:10:7"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8159:3:7"},"nodeType":"YulFunctionCall","src":"8159:19:7"},{"name":"returndata_size","nodeType":"YulIdentifier","src":"8180:15:7"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8152:6:7"},"nodeType":"YulFunctionCall","src":"8152:44:7"},"nodeType":"YulExpressionStatement","src":"8152:44:7"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"istanbul","externalReferences":[{"declaration":2015,"isOffset":false,"isSlot":false,"src":"8120:10:7","valueSize":1},{"declaration":2015,"isOffset":false,"isSlot":false,"src":"8167:10:7","valueSize":1}],"id":2030,"nodeType":"InlineAssembly","src":"8060:154:7"}]}}]},"id":2039,"nodeType":"IfStatement","src":"7731:566:7","trueBody":{"id":2025,"nodeType":"Block","src":"7744:42:7","statements":[{"expression":{"id":2023,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2015,"src":"7765:10:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2021,"id":2024,"nodeType":"Return","src":"7758:17:7"}]}}]},"documentation":{"id":2011,"nodeType":"StructuredDocumentation","src":"7347:209:7","text":" @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n revert reason using the provided one.\n _Available since v4.3._"},"id":2041,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResult","nameLocation":"7570:16:7","nodeType":"FunctionDefinition","parameters":{"id":2018,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2013,"mutability":"mutable","name":"success","nameLocation":"7601:7:7","nodeType":"VariableDeclaration","scope":2041,"src":"7596:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2012,"name":"bool","nodeType":"ElementaryTypeName","src":"7596:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2015,"mutability":"mutable","name":"returndata","nameLocation":"7631:10:7","nodeType":"VariableDeclaration","scope":2041,"src":"7618:23:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2014,"name":"bytes","nodeType":"ElementaryTypeName","src":"7618:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2017,"mutability":"mutable","name":"errorMessage","nameLocation":"7665:12:7","nodeType":"VariableDeclaration","scope":2041,"src":"7651:26:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2016,"name":"string","nodeType":"ElementaryTypeName","src":"7651:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7586:97:7"},"returnParameters":{"id":2021,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2020,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2041,"src":"7707:12:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2019,"name":"bytes","nodeType":"ElementaryTypeName","src":"7707:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7706:14:7"},"scope":2042,"src":"7561:742:7","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":2043,"src":"194:8111:7","usedErrors":[]}],"src":"101:8205:7"},"id":7},"@openzeppelin/contracts/utils/Context.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","exportedSymbols":{"Context":[2064]},"id":2065,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2044,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"86:23:8"},{"abstract":true,"baseContracts":[],"contractDependencies":[],"contractKind":"contract","documentation":{"id":2045,"nodeType":"StructuredDocumentation","src":"111:496:8","text":" @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."},"fullyImplemented":true,"id":2064,"linearizedBaseContracts":[2064],"name":"Context","nameLocation":"626:7:8","nodeType":"ContractDefinition","nodes":[{"body":{"id":2053,"nodeType":"Block","src":"702:34:8","statements":[{"expression":{"expression":{"id":2050,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"719:3:8","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2051,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"719:10:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":2049,"id":2052,"nodeType":"Return","src":"712:17:8"}]},"id":2054,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"649:10:8","nodeType":"FunctionDefinition","parameters":{"id":2046,"nodeType":"ParameterList","parameters":[],"src":"659:2:8"},"returnParameters":{"id":2049,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2048,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2054,"src":"693:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2047,"name":"address","nodeType":"ElementaryTypeName","src":"693:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"692:9:8"},"scope":2064,"src":"640:96:8","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":2062,"nodeType":"Block","src":"809:32:8","statements":[{"expression":{"expression":{"id":2059,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"826:3:8","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2060,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"data","nodeType":"MemberAccess","src":"826:8:8","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":2058,"id":2061,"nodeType":"Return","src":"819:15:8"}]},"id":2063,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"751:8:8","nodeType":"FunctionDefinition","parameters":{"id":2055,"nodeType":"ParameterList","parameters":[],"src":"759:2:8"},"returnParameters":{"id":2058,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2057,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2063,"src":"793:14:8","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":2056,"name":"bytes","nodeType":"ElementaryTypeName","src":"793:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"792:16:8"},"scope":2064,"src":"742:99:8","stateMutability":"view","virtual":true,"visibility":"internal"}],"scope":2065,"src":"608:235:8","usedErrors":[]}],"src":"86:758:8"},"id":8},"@openzeppelin/contracts/utils/math/Math.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/math/Math.sol","exportedSymbols":{"Math":[2568]},"id":2569,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2066,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"103:23:9"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"library","documentation":{"id":2067,"nodeType":"StructuredDocumentation","src":"128:73:9","text":" @dev Standard math utilities missing in the Solidity language."},"fullyImplemented":true,"id":2568,"linearizedBaseContracts":[2568],"name":"Math","nameLocation":"210:4:9","nodeType":"ContractDefinition","nodes":[{"canonicalName":"Math.Rounding","id":2071,"members":[{"id":2068,"name":"Down","nameLocation":"245:4:9","nodeType":"EnumValue","src":"245:4:9"},{"id":2069,"name":"Up","nameLocation":"287:2:9","nodeType":"EnumValue","src":"287:2:9"},{"id":2070,"name":"Zero","nameLocation":"318:4:9","nodeType":"EnumValue","src":"318:4:9"}],"name":"Rounding","nameLocation":"226:8:9","nodeType":"EnumDefinition","src":"221:122:9"},{"body":{"id":2088,"nodeType":"Block","src":"480:38:9","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2083,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2081,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2074,"src":"497:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":2082,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2076,"src":"502:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"497:6:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":2085,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2076,"src":"510:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2086,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"497:14:9","trueExpression":{"id":2084,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2074,"src":"506:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2080,"id":2087,"nodeType":"Return","src":"490:21:9"}]},"documentation":{"id":2072,"nodeType":"StructuredDocumentation","src":"349:59:9","text":" @dev Returns the largest of two numbers."},"id":2089,"implemented":true,"kind":"function","modifiers":[],"name":"max","nameLocation":"422:3:9","nodeType":"FunctionDefinition","parameters":{"id":2077,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2074,"mutability":"mutable","name":"a","nameLocation":"434:1:9","nodeType":"VariableDeclaration","scope":2089,"src":"426:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2073,"name":"uint256","nodeType":"ElementaryTypeName","src":"426:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2076,"mutability":"mutable","name":"b","nameLocation":"445:1:9","nodeType":"VariableDeclaration","scope":2089,"src":"437:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2075,"name":"uint256","nodeType":"ElementaryTypeName","src":"437:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"425:22:9"},"returnParameters":{"id":2080,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2079,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2089,"src":"471:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2078,"name":"uint256","nodeType":"ElementaryTypeName","src":"471:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"470:9:9"},"scope":2568,"src":"413:105:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2106,"nodeType":"Block","src":"656:37:9","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2101,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2099,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2092,"src":"673:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2100,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2094,"src":"677:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"673:5:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":2103,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2094,"src":"685:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2104,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"673:13:9","trueExpression":{"id":2102,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2092,"src":"681:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2098,"id":2105,"nodeType":"Return","src":"666:20:9"}]},"documentation":{"id":2090,"nodeType":"StructuredDocumentation","src":"524:60:9","text":" @dev Returns the smallest of two numbers."},"id":2107,"implemented":true,"kind":"function","modifiers":[],"name":"min","nameLocation":"598:3:9","nodeType":"FunctionDefinition","parameters":{"id":2095,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2092,"mutability":"mutable","name":"a","nameLocation":"610:1:9","nodeType":"VariableDeclaration","scope":2107,"src":"602:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2091,"name":"uint256","nodeType":"ElementaryTypeName","src":"602:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2094,"mutability":"mutable","name":"b","nameLocation":"621:1:9","nodeType":"VariableDeclaration","scope":2107,"src":"613:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2093,"name":"uint256","nodeType":"ElementaryTypeName","src":"613:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"601:22:9"},"returnParameters":{"id":2098,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2097,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2107,"src":"647:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2096,"name":"uint256","nodeType":"ElementaryTypeName","src":"647:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"646:9:9"},"scope":2568,"src":"589:104:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2129,"nodeType":"Block","src":"877:82:9","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2127,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2119,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2117,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2110,"src":"932:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":2118,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2112,"src":"936:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"932:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2120,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"931:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2126,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2123,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2121,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2110,"src":"942:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":2122,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2112,"src":"946:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"942:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2124,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"941:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"32","id":2125,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"951:1:9","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"941:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"931:21:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2116,"id":2128,"nodeType":"Return","src":"924:28:9"}]},"documentation":{"id":2108,"nodeType":"StructuredDocumentation","src":"699:102:9","text":" @dev Returns the average of two numbers. The result is rounded towards\n zero."},"id":2130,"implemented":true,"kind":"function","modifiers":[],"name":"average","nameLocation":"815:7:9","nodeType":"FunctionDefinition","parameters":{"id":2113,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2110,"mutability":"mutable","name":"a","nameLocation":"831:1:9","nodeType":"VariableDeclaration","scope":2130,"src":"823:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2109,"name":"uint256","nodeType":"ElementaryTypeName","src":"823:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2112,"mutability":"mutable","name":"b","nameLocation":"842:1:9","nodeType":"VariableDeclaration","scope":2130,"src":"834:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2111,"name":"uint256","nodeType":"ElementaryTypeName","src":"834:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"822:22:9"},"returnParameters":{"id":2116,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2115,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2130,"src":"868:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2114,"name":"uint256","nodeType":"ElementaryTypeName","src":"868:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"867:9:9"},"scope":2568,"src":"806:153:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2154,"nodeType":"Block","src":"1229:123:9","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2142,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2140,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2133,"src":"1317:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2141,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1322:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1317:6:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2151,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2149,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2146,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2144,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2133,"src":"1331:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":2145,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1335:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1331:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2147,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1330:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2148,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2135,"src":"1340:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1330:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":2150,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1344:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1330:15:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2152,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1317:28:9","trueExpression":{"hexValue":"30","id":2143,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1326:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2139,"id":2153,"nodeType":"Return","src":"1310:35:9"}]},"documentation":{"id":2131,"nodeType":"StructuredDocumentation","src":"965:188:9","text":" @dev Returns the ceiling of the division of two numbers.\n This differs from standard division with `/` in that it rounds up instead\n of rounding down."},"id":2155,"implemented":true,"kind":"function","modifiers":[],"name":"ceilDiv","nameLocation":"1167:7:9","nodeType":"FunctionDefinition","parameters":{"id":2136,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2133,"mutability":"mutable","name":"a","nameLocation":"1183:1:9","nodeType":"VariableDeclaration","scope":2155,"src":"1175:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2132,"name":"uint256","nodeType":"ElementaryTypeName","src":"1175:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2135,"mutability":"mutable","name":"b","nameLocation":"1194:1:9","nodeType":"VariableDeclaration","scope":2155,"src":"1186:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2134,"name":"uint256","nodeType":"ElementaryTypeName","src":"1186:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1174:22:9"},"returnParameters":{"id":2139,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2138,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2155,"src":"1220:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2137,"name":"uint256","nodeType":"ElementaryTypeName","src":"1220:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1219:9:9"},"scope":2568,"src":"1158:194:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2276,"nodeType":"Block","src":"1796:3797:9","statements":[{"id":2275,"nodeType":"UncheckedBlock","src":"1806:3781:9","statements":[{"assignments":[2168],"declarations":[{"constant":false,"id":2168,"mutability":"mutable","name":"prod0","nameLocation":"2135:5:9","nodeType":"VariableDeclaration","scope":2275,"src":"2127:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2167,"name":"uint256","nodeType":"ElementaryTypeName","src":"2127:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2169,"nodeType":"VariableDeclarationStatement","src":"2127:13:9"},{"assignments":[2171],"declarations":[{"constant":false,"id":2171,"mutability":"mutable","name":"prod1","nameLocation":"2207:5:9","nodeType":"VariableDeclaration","scope":2275,"src":"2199:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2170,"name":"uint256","nodeType":"ElementaryTypeName","src":"2199:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2172,"nodeType":"VariableDeclarationStatement","src":"2199:13:9"},{"AST":{"nodeType":"YulBlock","src":"2279:157:9","statements":[{"nodeType":"YulVariableDeclaration","src":"2297:30:9","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"2314:1:9"},{"name":"y","nodeType":"YulIdentifier","src":"2317:1:9"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2324:1:9","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2320:3:9"},"nodeType":"YulFunctionCall","src":"2320:6:9"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"2307:6:9"},"nodeType":"YulFunctionCall","src":"2307:20:9"},"variables":[{"name":"mm","nodeType":"YulTypedName","src":"2301:2:9","type":""}]},{"nodeType":"YulAssignment","src":"2344:18:9","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"2357:1:9"},{"name":"y","nodeType":"YulIdentifier","src":"2360:1:9"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"2353:3:9"},"nodeType":"YulFunctionCall","src":"2353:9:9"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"2344:5:9"}]},{"nodeType":"YulAssignment","src":"2379:43:9","value":{"arguments":[{"arguments":[{"name":"mm","nodeType":"YulIdentifier","src":"2396:2:9"},{"name":"prod0","nodeType":"YulIdentifier","src":"2400:5:9"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2392:3:9"},"nodeType":"YulFunctionCall","src":"2392:14:9"},{"arguments":[{"name":"mm","nodeType":"YulIdentifier","src":"2411:2:9"},{"name":"prod0","nodeType":"YulIdentifier","src":"2415:5:9"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2408:2:9"},"nodeType":"YulFunctionCall","src":"2408:13:9"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2388:3:9"},"nodeType":"YulFunctionCall","src":"2388:34:9"},"variableNames":[{"name":"prod1","nodeType":"YulIdentifier","src":"2379:5:9"}]}]},"evmVersion":"istanbul","externalReferences":[{"declaration":2168,"isOffset":false,"isSlot":false,"src":"2344:5:9","valueSize":1},{"declaration":2168,"isOffset":false,"isSlot":false,"src":"2400:5:9","valueSize":1},{"declaration":2168,"isOffset":false,"isSlot":false,"src":"2415:5:9","valueSize":1},{"declaration":2171,"isOffset":false,"isSlot":false,"src":"2379:5:9","valueSize":1},{"declaration":2158,"isOffset":false,"isSlot":false,"src":"2314:1:9","valueSize":1},{"declaration":2158,"isOffset":false,"isSlot":false,"src":"2357:1:9","valueSize":1},{"declaration":2160,"isOffset":false,"isSlot":false,"src":"2317:1:9","valueSize":1},{"declaration":2160,"isOffset":false,"isSlot":false,"src":"2360:1:9","valueSize":1}],"id":2173,"nodeType":"InlineAssembly","src":"2270:166:9"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2176,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2174,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2171,"src":"2517:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2175,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2526:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2517:10:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2182,"nodeType":"IfStatement","src":"2513:75:9","trueBody":{"id":2181,"nodeType":"Block","src":"2529:59:9","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2179,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2177,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2168,"src":"2554:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2178,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2162,"src":"2562:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2554:19:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2166,"id":2180,"nodeType":"Return","src":"2547:26:9"}]}},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2186,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2184,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2162,"src":"2698:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":2185,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2171,"src":"2712:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2698:19:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"id":2183,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2690:7:9","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$returns$__$","typeString":"function (bool) pure"}},"id":2187,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2690:28:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2188,"nodeType":"ExpressionStatement","src":"2690:28:9"},{"assignments":[2190],"declarations":[{"constant":false,"id":2190,"mutability":"mutable","name":"remainder","nameLocation":"2982:9:9","nodeType":"VariableDeclaration","scope":2275,"src":"2974:17:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2189,"name":"uint256","nodeType":"ElementaryTypeName","src":"2974:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2191,"nodeType":"VariableDeclarationStatement","src":"2974:17:9"},{"AST":{"nodeType":"YulBlock","src":"3014:291:9","statements":[{"nodeType":"YulAssignment","src":"3083:38:9","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"3103:1:9"},{"name":"y","nodeType":"YulIdentifier","src":"3106:1:9"},{"name":"denominator","nodeType":"YulIdentifier","src":"3109:11:9"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"3096:6:9"},"nodeType":"YulFunctionCall","src":"3096:25:9"},"variableNames":[{"name":"remainder","nodeType":"YulIdentifier","src":"3083:9:9"}]},{"nodeType":"YulAssignment","src":"3203:41:9","value":{"arguments":[{"name":"prod1","nodeType":"YulIdentifier","src":"3216:5:9"},{"arguments":[{"name":"remainder","nodeType":"YulIdentifier","src":"3226:9:9"},{"name":"prod0","nodeType":"YulIdentifier","src":"3237:5:9"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3223:2:9"},"nodeType":"YulFunctionCall","src":"3223:20:9"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3212:3:9"},"nodeType":"YulFunctionCall","src":"3212:32:9"},"variableNames":[{"name":"prod1","nodeType":"YulIdentifier","src":"3203:5:9"}]},{"nodeType":"YulAssignment","src":"3261:30:9","value":{"arguments":[{"name":"prod0","nodeType":"YulIdentifier","src":"3274:5:9"},{"name":"remainder","nodeType":"YulIdentifier","src":"3281:9:9"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3270:3:9"},"nodeType":"YulFunctionCall","src":"3270:21:9"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"3261:5:9"}]}]},"evmVersion":"istanbul","externalReferences":[{"declaration":2162,"isOffset":false,"isSlot":false,"src":"3109:11:9","valueSize":1},{"declaration":2168,"isOffset":false,"isSlot":false,"src":"3237:5:9","valueSize":1},{"declaration":2168,"isOffset":false,"isSlot":false,"src":"3261:5:9","valueSize":1},{"declaration":2168,"isOffset":false,"isSlot":false,"src":"3274:5:9","valueSize":1},{"declaration":2171,"isOffset":false,"isSlot":false,"src":"3203:5:9","valueSize":1},{"declaration":2171,"isOffset":false,"isSlot":false,"src":"3216:5:9","valueSize":1},{"declaration":2190,"isOffset":false,"isSlot":false,"src":"3083:9:9","valueSize":1},{"declaration":2190,"isOffset":false,"isSlot":false,"src":"3226:9:9","valueSize":1},{"declaration":2190,"isOffset":false,"isSlot":false,"src":"3281:9:9","valueSize":1},{"declaration":2158,"isOffset":false,"isSlot":false,"src":"3103:1:9","valueSize":1},{"declaration":2160,"isOffset":false,"isSlot":false,"src":"3106:1:9","valueSize":1}],"id":2192,"nodeType":"InlineAssembly","src":"3005:300:9"},{"assignments":[2194],"declarations":[{"constant":false,"id":2194,"mutability":"mutable","name":"twos","nameLocation":"3620:4:9","nodeType":"VariableDeclaration","scope":2275,"src":"3612:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2193,"name":"uint256","nodeType":"ElementaryTypeName","src":"3612:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2202,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2201,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2195,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2162,"src":"3627:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2199,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2197,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"~","prefix":true,"src":"3642:12:9","subExpression":{"id":2196,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2162,"src":"3643:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":2198,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3657:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3642:16:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2200,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3641:18:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3627:32:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3612:47:9"},{"AST":{"nodeType":"YulBlock","src":"3682:362:9","statements":[{"nodeType":"YulAssignment","src":"3747:37:9","value":{"arguments":[{"name":"denominator","nodeType":"YulIdentifier","src":"3766:11:9"},{"name":"twos","nodeType":"YulIdentifier","src":"3779:4:9"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"3762:3:9"},"nodeType":"YulFunctionCall","src":"3762:22:9"},"variableNames":[{"name":"denominator","nodeType":"YulIdentifier","src":"3747:11:9"}]},{"nodeType":"YulAssignment","src":"3851:25:9","value":{"arguments":[{"name":"prod0","nodeType":"YulIdentifier","src":"3864:5:9"},{"name":"twos","nodeType":"YulIdentifier","src":"3871:4:9"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"3860:3:9"},"nodeType":"YulFunctionCall","src":"3860:16:9"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"3851:5:9"}]},{"nodeType":"YulAssignment","src":"3991:39:9","value":{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4011:1:9","type":"","value":"0"},{"name":"twos","nodeType":"YulIdentifier","src":"4014:4:9"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4007:3:9"},"nodeType":"YulFunctionCall","src":"4007:12:9"},{"name":"twos","nodeType":"YulIdentifier","src":"4021:4:9"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"4003:3:9"},"nodeType":"YulFunctionCall","src":"4003:23:9"},{"kind":"number","nodeType":"YulLiteral","src":"4028:1:9","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3999:3:9"},"nodeType":"YulFunctionCall","src":"3999:31:9"},"variableNames":[{"name":"twos","nodeType":"YulIdentifier","src":"3991:4:9"}]}]},"evmVersion":"istanbul","externalReferences":[{"declaration":2162,"isOffset":false,"isSlot":false,"src":"3747:11:9","valueSize":1},{"declaration":2162,"isOffset":false,"isSlot":false,"src":"3766:11:9","valueSize":1},{"declaration":2168,"isOffset":false,"isSlot":false,"src":"3851:5:9","valueSize":1},{"declaration":2168,"isOffset":false,"isSlot":false,"src":"3864:5:9","valueSize":1},{"declaration":2194,"isOffset":false,"isSlot":false,"src":"3779:4:9","valueSize":1},{"declaration":2194,"isOffset":false,"isSlot":false,"src":"3871:4:9","valueSize":1},{"declaration":2194,"isOffset":false,"isSlot":false,"src":"3991:4:9","valueSize":1},{"declaration":2194,"isOffset":false,"isSlot":false,"src":"4014:4:9","valueSize":1},{"declaration":2194,"isOffset":false,"isSlot":false,"src":"4021:4:9","valueSize":1}],"id":2203,"nodeType":"InlineAssembly","src":"3673:371:9"},{"expression":{"id":2208,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2204,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2168,"src":"4110:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"|=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2207,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2205,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2171,"src":"4119:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2206,"name":"twos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2194,"src":"4127:4:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4119:12:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4110:21:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2209,"nodeType":"ExpressionStatement","src":"4110:21:9"},{"assignments":[2211],"declarations":[{"constant":false,"id":2211,"mutability":"mutable","name":"inverse","nameLocation":"4457:7:9","nodeType":"VariableDeclaration","scope":2275,"src":"4449:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2210,"name":"uint256","nodeType":"ElementaryTypeName","src":"4449:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2218,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2217,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2214,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"33","id":2212,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4468:1:9","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2213,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2162,"src":"4472:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4468:15:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2215,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4467:17:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"hexValue":"32","id":2216,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4487:1:9","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"4467:21:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4449:39:9"},{"expression":{"id":2225,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2219,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2211,"src":"4705:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2224,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2220,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4716:1:9","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2223,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2221,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2162,"src":"4720:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2222,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2211,"src":"4734:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4720:21:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4716:25:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4705:36:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2226,"nodeType":"ExpressionStatement","src":"4705:36:9"},{"expression":{"id":2233,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2227,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2211,"src":"4774:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2232,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2228,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4785:1:9","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2231,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2229,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2162,"src":"4789:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2230,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2211,"src":"4803:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4789:21:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4785:25:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4774:36:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2234,"nodeType":"ExpressionStatement","src":"4774:36:9"},{"expression":{"id":2241,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2235,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2211,"src":"4844:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2240,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2236,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4855:1:9","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2239,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2237,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2162,"src":"4859:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2238,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2211,"src":"4873:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4859:21:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4855:25:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4844:36:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2242,"nodeType":"ExpressionStatement","src":"4844:36:9"},{"expression":{"id":2249,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2243,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2211,"src":"4914:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2248,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2244,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4925:1:9","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2247,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2245,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2162,"src":"4929:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2246,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2211,"src":"4943:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4929:21:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4925:25:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4914:36:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2250,"nodeType":"ExpressionStatement","src":"4914:36:9"},{"expression":{"id":2257,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2251,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2211,"src":"4984:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2256,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2252,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4995:1:9","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2255,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2253,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2162,"src":"4999:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2254,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2211,"src":"5013:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4999:21:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4995:25:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4984:36:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2258,"nodeType":"ExpressionStatement","src":"4984:36:9"},{"expression":{"id":2265,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2259,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2211,"src":"5055:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2264,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2260,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5066:1:9","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2263,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2261,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2162,"src":"5070:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2262,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2211,"src":"5084:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5070:21:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5066:25:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5055:36:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2266,"nodeType":"ExpressionStatement","src":"5055:36:9"},{"expression":{"id":2271,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2267,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2165,"src":"5525:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2270,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2268,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2168,"src":"5534:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2269,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2211,"src":"5542:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5534:15:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5525:24:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2272,"nodeType":"ExpressionStatement","src":"5525:24:9"},{"expression":{"id":2273,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2165,"src":"5570:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2166,"id":2274,"nodeType":"Return","src":"5563:13:9"}]}]},"documentation":{"id":2156,"nodeType":"StructuredDocumentation","src":"1358:305:9","text":" @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n with further edits by Uniswap Labs also under MIT license."},"id":2277,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"1677:6:9","nodeType":"FunctionDefinition","parameters":{"id":2163,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2158,"mutability":"mutable","name":"x","nameLocation":"1701:1:9","nodeType":"VariableDeclaration","scope":2277,"src":"1693:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2157,"name":"uint256","nodeType":"ElementaryTypeName","src":"1693:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2160,"mutability":"mutable","name":"y","nameLocation":"1720:1:9","nodeType":"VariableDeclaration","scope":2277,"src":"1712:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2159,"name":"uint256","nodeType":"ElementaryTypeName","src":"1712:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2162,"mutability":"mutable","name":"denominator","nameLocation":"1739:11:9","nodeType":"VariableDeclaration","scope":2277,"src":"1731:19:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2161,"name":"uint256","nodeType":"ElementaryTypeName","src":"1731:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1683:73:9"},"returnParameters":{"id":2166,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2165,"mutability":"mutable","name":"result","nameLocation":"1788:6:9","nodeType":"VariableDeclaration","scope":2277,"src":"1780:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2164,"name":"uint256","nodeType":"ElementaryTypeName","src":"1780:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1779:16:9"},"scope":2568,"src":"1668:3925:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2320,"nodeType":"Block","src":"5873:189:9","statements":[{"assignments":[2293],"declarations":[{"constant":false,"id":2293,"mutability":"mutable","name":"result","nameLocation":"5891:6:9","nodeType":"VariableDeclaration","scope":2320,"src":"5883:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2292,"name":"uint256","nodeType":"ElementaryTypeName","src":"5883:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2299,"initialValue":{"arguments":[{"id":2295,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2280,"src":"5907:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2296,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2282,"src":"5910:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2297,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2284,"src":"5913:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2294,"name":"mulDiv","nodeType":"Identifier","overloadedDeclarations":[2277,2321],"referencedDeclaration":2277,"src":"5900:6:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":2298,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5900:25:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5883:42:9"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2311,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$2071","typeString":"enum Math.Rounding"},"id":2303,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2300,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2287,"src":"5939:8:9","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2071","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2301,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2071,"src":"5951:8:9","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$2071_$","typeString":"type(enum Math.Rounding)"}},"id":2302,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":2069,"src":"5951:11:9","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2071","typeString":"enum Math.Rounding"}},"src":"5939:23:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2310,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2305,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2280,"src":"5973:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2306,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2282,"src":"5976:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2307,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2284,"src":"5979:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2304,"name":"mulmod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-16,"src":"5966:6:9","typeDescriptions":{"typeIdentifier":"t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":2308,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5966:25:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2309,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5994:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5966:29:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"5939:56:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2317,"nodeType":"IfStatement","src":"5935:98:9","trueBody":{"id":2316,"nodeType":"Block","src":"5997:36:9","statements":[{"expression":{"id":2314,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2312,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2293,"src":"6011:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":2313,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6021:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"6011:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2315,"nodeType":"ExpressionStatement","src":"6011:11:9"}]}},{"expression":{"id":2318,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2293,"src":"6049:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2291,"id":2319,"nodeType":"Return","src":"6042:13:9"}]},"documentation":{"id":2278,"nodeType":"StructuredDocumentation","src":"5599:121:9","text":" @notice Calculates x * y / denominator with full precision, following the selected rounding direction."},"id":2321,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"5734:6:9","nodeType":"FunctionDefinition","parameters":{"id":2288,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2280,"mutability":"mutable","name":"x","nameLocation":"5758:1:9","nodeType":"VariableDeclaration","scope":2321,"src":"5750:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2279,"name":"uint256","nodeType":"ElementaryTypeName","src":"5750:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2282,"mutability":"mutable","name":"y","nameLocation":"5777:1:9","nodeType":"VariableDeclaration","scope":2321,"src":"5769:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2281,"name":"uint256","nodeType":"ElementaryTypeName","src":"5769:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2284,"mutability":"mutable","name":"denominator","nameLocation":"5796:11:9","nodeType":"VariableDeclaration","scope":2321,"src":"5788:19:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2283,"name":"uint256","nodeType":"ElementaryTypeName","src":"5788:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2287,"mutability":"mutable","name":"rounding","nameLocation":"5826:8:9","nodeType":"VariableDeclaration","scope":2321,"src":"5817:17:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2071","typeString":"enum Math.Rounding"},"typeName":{"id":2286,"nodeType":"UserDefinedTypeName","pathNode":{"id":2285,"name":"Rounding","nodeType":"IdentifierPath","referencedDeclaration":2071,"src":"5817:8:9"},"referencedDeclaration":2071,"src":"5817:8:9","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2071","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"5740:100:9"},"returnParameters":{"id":2291,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2290,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2321,"src":"5864:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2289,"name":"uint256","nodeType":"ElementaryTypeName","src":"5864:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5863:9:9"},"scope":2568,"src":"5725:337:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2530,"nodeType":"Block","src":"6338:2149:9","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2331,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2329,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2324,"src":"6352:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2330,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6357:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6352:6:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2335,"nodeType":"IfStatement","src":"6348:45:9","trueBody":{"id":2334,"nodeType":"Block","src":"6360:33:9","statements":[{"expression":{"hexValue":"30","id":2332,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6381:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":2328,"id":2333,"nodeType":"Return","src":"6374:8:9"}]}},{"assignments":[2337],"declarations":[{"constant":false,"id":2337,"mutability":"mutable","name":"result","nameLocation":"7066:6:9","nodeType":"VariableDeclaration","scope":2530,"src":"7058:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2336,"name":"uint256","nodeType":"ElementaryTypeName","src":"7058:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2339,"initialValue":{"hexValue":"31","id":2338,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7075:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"VariableDeclarationStatement","src":"7058:18:9"},{"assignments":[2341],"declarations":[{"constant":false,"id":2341,"mutability":"mutable","name":"x","nameLocation":"7094:1:9","nodeType":"VariableDeclaration","scope":2530,"src":"7086:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2340,"name":"uint256","nodeType":"ElementaryTypeName","src":"7086:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2343,"initialValue":{"id":2342,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2324,"src":"7098:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7086:13:9"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2348,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2346,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2344,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2341,"src":"7113:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":2345,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7118:3:9","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"7113:8:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2347,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7124:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7113:12:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2358,"nodeType":"IfStatement","src":"7109:79:9","trueBody":{"id":2357,"nodeType":"Block","src":"7127:61:9","statements":[{"expression":{"id":2351,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2349,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2341,"src":"7141:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":2350,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7147:3:9","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"7141:9:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2352,"nodeType":"ExpressionStatement","src":"7141:9:9"},{"expression":{"id":2355,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2353,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2337,"src":"7164:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"<<=","rightHandSide":{"hexValue":"3634","id":2354,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7175:2:9","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"7164:13:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2356,"nodeType":"ExpressionStatement","src":"7164:13:9"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2363,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2361,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2359,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2341,"src":"7201:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":2360,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7206:2:9","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"7201:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2362,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7211:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7201:11:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2373,"nodeType":"IfStatement","src":"7197:77:9","trueBody":{"id":2372,"nodeType":"Block","src":"7214:60:9","statements":[{"expression":{"id":2366,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2364,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2341,"src":"7228:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":2365,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7234:2:9","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"7228:8:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2367,"nodeType":"ExpressionStatement","src":"7228:8:9"},{"expression":{"id":2370,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2368,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2337,"src":"7250:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"<<=","rightHandSide":{"hexValue":"3332","id":2369,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7261:2:9","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"7250:13:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2371,"nodeType":"ExpressionStatement","src":"7250:13:9"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2378,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2376,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2374,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2341,"src":"7287:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":2375,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7292:2:9","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"7287:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2377,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7297:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7287:11:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2388,"nodeType":"IfStatement","src":"7283:77:9","trueBody":{"id":2387,"nodeType":"Block","src":"7300:60:9","statements":[{"expression":{"id":2381,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2379,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2341,"src":"7314:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":2380,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7320:2:9","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"7314:8:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2382,"nodeType":"ExpressionStatement","src":"7314:8:9"},{"expression":{"id":2385,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2383,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2337,"src":"7336:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"<<=","rightHandSide":{"hexValue":"3136","id":2384,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7347:2:9","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"7336:13:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2386,"nodeType":"ExpressionStatement","src":"7336:13:9"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2393,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2391,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2389,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2341,"src":"7373:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":2390,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7378:2:9","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"7373:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2392,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7383:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7373:11:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2403,"nodeType":"IfStatement","src":"7369:76:9","trueBody":{"id":2402,"nodeType":"Block","src":"7386:59:9","statements":[{"expression":{"id":2396,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2394,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2341,"src":"7400:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":2395,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7406:2:9","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"7400:8:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2397,"nodeType":"ExpressionStatement","src":"7400:8:9"},{"expression":{"id":2400,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2398,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2337,"src":"7422:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"<<=","rightHandSide":{"hexValue":"38","id":2399,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7433:1:9","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"7422:12:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2401,"nodeType":"ExpressionStatement","src":"7422:12:9"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2408,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2406,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2404,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2341,"src":"7458:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":2405,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7463:1:9","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"7458:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2407,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7467:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7458:10:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2418,"nodeType":"IfStatement","src":"7454:74:9","trueBody":{"id":2417,"nodeType":"Block","src":"7470:58:9","statements":[{"expression":{"id":2411,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2409,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2341,"src":"7484:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"38","id":2410,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7490:1:9","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"7484:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2412,"nodeType":"ExpressionStatement","src":"7484:7:9"},{"expression":{"id":2415,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2413,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2337,"src":"7505:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"<<=","rightHandSide":{"hexValue":"34","id":2414,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7516:1:9","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"7505:12:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2416,"nodeType":"ExpressionStatement","src":"7505:12:9"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2423,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2421,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2419,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2341,"src":"7541:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"34","id":2420,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7546:1:9","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"7541:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2422,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7550:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7541:10:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2433,"nodeType":"IfStatement","src":"7537:74:9","trueBody":{"id":2432,"nodeType":"Block","src":"7553:58:9","statements":[{"expression":{"id":2426,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2424,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2341,"src":"7567:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":2425,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7573:1:9","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"7567:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2427,"nodeType":"ExpressionStatement","src":"7567:7:9"},{"expression":{"id":2430,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2428,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2337,"src":"7588:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"<<=","rightHandSide":{"hexValue":"32","id":2429,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7599:1:9","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"7588:12:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2431,"nodeType":"ExpressionStatement","src":"7588:12:9"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2438,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2436,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2434,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2341,"src":"7624:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"32","id":2435,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7629:1:9","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"7624:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2437,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7633:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7624:10:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2444,"nodeType":"IfStatement","src":"7620:53:9","trueBody":{"id":2443,"nodeType":"Block","src":"7636:37:9","statements":[{"expression":{"id":2441,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2439,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2337,"src":"7650:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"<<=","rightHandSide":{"hexValue":"31","id":2440,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7661:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7650:12:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2442,"nodeType":"ExpressionStatement","src":"7650:12:9"}]}},{"id":2529,"nodeType":"UncheckedBlock","src":"8073:408:9","statements":[{"expression":{"id":2454,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2445,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2337,"src":"8097:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2453,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2450,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2446,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2337,"src":"8107:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2449,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2447,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2324,"src":"8116:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2448,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2337,"src":"8120:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8116:10:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8107:19:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2451,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8106:21:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2452,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8131:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"8106:26:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8097:35:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2455,"nodeType":"ExpressionStatement","src":"8097:35:9"},{"expression":{"id":2465,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2456,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2337,"src":"8146:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2464,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2461,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2457,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2337,"src":"8156:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2460,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2458,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2324,"src":"8165:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2459,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2337,"src":"8169:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8165:10:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8156:19:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2462,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8155:21:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2463,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8180:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"8155:26:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8146:35:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2466,"nodeType":"ExpressionStatement","src":"8146:35:9"},{"expression":{"id":2476,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2467,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2337,"src":"8195:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2475,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2472,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2468,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2337,"src":"8205:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2471,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2469,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2324,"src":"8214:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2470,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2337,"src":"8218:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8214:10:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8205:19:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2473,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8204:21:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2474,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8229:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"8204:26:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8195:35:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2477,"nodeType":"ExpressionStatement","src":"8195:35:9"},{"expression":{"id":2487,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2478,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2337,"src":"8244:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2486,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2483,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2479,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2337,"src":"8254:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2482,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2480,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2324,"src":"8263:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2481,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2337,"src":"8267:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8263:10:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8254:19:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2484,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8253:21:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2485,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8278:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"8253:26:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8244:35:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2488,"nodeType":"ExpressionStatement","src":"8244:35:9"},{"expression":{"id":2498,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2489,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2337,"src":"8293:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2497,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2494,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2490,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2337,"src":"8303:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2493,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2491,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2324,"src":"8312:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2492,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2337,"src":"8316:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8312:10:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8303:19:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2495,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8302:21:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2496,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8327:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"8302:26:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8293:35:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2499,"nodeType":"ExpressionStatement","src":"8293:35:9"},{"expression":{"id":2509,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2500,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2337,"src":"8342:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2508,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2505,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2501,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2337,"src":"8352:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2504,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2502,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2324,"src":"8361:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2503,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2337,"src":"8365:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8361:10:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8352:19:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2506,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8351:21:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2507,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8376:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"8351:26:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8342:35:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2510,"nodeType":"ExpressionStatement","src":"8342:35:9"},{"expression":{"id":2520,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2511,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2337,"src":"8391:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2519,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2516,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2512,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2337,"src":"8401:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2515,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2513,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2324,"src":"8410:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2514,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2337,"src":"8414:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8410:10:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8401:19:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2517,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8400:21:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2518,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8425:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"8400:26:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8391:35:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2521,"nodeType":"ExpressionStatement","src":"8391:35:9"},{"expression":{"arguments":[{"id":2523,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2337,"src":"8451:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2526,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2524,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2324,"src":"8459:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2525,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2337,"src":"8463:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8459:10:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2522,"name":"min","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2107,"src":"8447:3:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":2527,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8447:23:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2328,"id":2528,"nodeType":"Return","src":"8440:30:9"}]}]},"documentation":{"id":2322,"nodeType":"StructuredDocumentation","src":"6068:208:9","text":" @dev Returns the square root of a number. It the number is not a perfect square, the value is rounded down.\n Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11)."},"id":2531,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"6290:4:9","nodeType":"FunctionDefinition","parameters":{"id":2325,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2324,"mutability":"mutable","name":"a","nameLocation":"6303:1:9","nodeType":"VariableDeclaration","scope":2531,"src":"6295:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2323,"name":"uint256","nodeType":"ElementaryTypeName","src":"6295:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6294:11:9"},"returnParameters":{"id":2328,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2327,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2531,"src":"6329:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2326,"name":"uint256","nodeType":"ElementaryTypeName","src":"6329:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6328:9:9"},"scope":2568,"src":"6281:2206:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2566,"nodeType":"Block","src":"8663:161:9","statements":[{"assignments":[2543],"declarations":[{"constant":false,"id":2543,"mutability":"mutable","name":"result","nameLocation":"8681:6:9","nodeType":"VariableDeclaration","scope":2566,"src":"8673:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2542,"name":"uint256","nodeType":"ElementaryTypeName","src":"8673:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2547,"initialValue":{"arguments":[{"id":2545,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2534,"src":"8695:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2544,"name":"sqrt","nodeType":"Identifier","overloadedDeclarations":[2531,2567],"referencedDeclaration":2531,"src":"8690:4:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2546,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8690:7:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"8673:24:9"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2557,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$2071","typeString":"enum Math.Rounding"},"id":2551,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2548,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2537,"src":"8711:8:9","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2071","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2549,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2071,"src":"8723:8:9","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$2071_$","typeString":"type(enum Math.Rounding)"}},"id":2550,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":2069,"src":"8723:11:9","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2071","typeString":"enum Math.Rounding"}},"src":"8711:23:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2556,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2554,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2552,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2543,"src":"8738:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2553,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2543,"src":"8747:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8738:15:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2555,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2534,"src":"8756:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8738:19:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"8711:46:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2563,"nodeType":"IfStatement","src":"8707:88:9","trueBody":{"id":2562,"nodeType":"Block","src":"8759:36:9","statements":[{"expression":{"id":2560,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2558,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2543,"src":"8773:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":2559,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8783:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"8773:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2561,"nodeType":"ExpressionStatement","src":"8773:11:9"}]}},{"expression":{"id":2564,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2543,"src":"8811:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2541,"id":2565,"nodeType":"Return","src":"8804:13:9"}]},"documentation":{"id":2532,"nodeType":"StructuredDocumentation","src":"8493:89:9","text":" @notice Calculates sqrt(a), following the selected rounding direction."},"id":2567,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"8596:4:9","nodeType":"FunctionDefinition","parameters":{"id":2538,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2534,"mutability":"mutable","name":"a","nameLocation":"8609:1:9","nodeType":"VariableDeclaration","scope":2567,"src":"8601:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2533,"name":"uint256","nodeType":"ElementaryTypeName","src":"8601:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2537,"mutability":"mutable","name":"rounding","nameLocation":"8621:8:9","nodeType":"VariableDeclaration","scope":2567,"src":"8612:17:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2071","typeString":"enum Math.Rounding"},"typeName":{"id":2536,"nodeType":"UserDefinedTypeName","pathNode":{"id":2535,"name":"Rounding","nodeType":"IdentifierPath","referencedDeclaration":2071,"src":"8612:8:9"},"referencedDeclaration":2071,"src":"8612:8:9","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2071","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"8600:30:9"},"returnParameters":{"id":2541,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2540,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2567,"src":"8654:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2539,"name":"uint256","nodeType":"ElementaryTypeName","src":"8654:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8653:9:9"},"scope":2568,"src":"8587:237:9","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":2569,"src":"202:8624:9","usedErrors":[]}],"src":"103:8724:9"},"id":9},"contracts/Drip.sol":{"ast":{"absolutePath":"contracts/Drip.sol","exportedSymbols":{"DRIP":[2775],"ERC20":[753],"ERC4626":[1405],"IERC20":[831],"IERC20Metadata":[1430]},"id":2776,"nodeType":"SourceUnit","nodes":[{"id":2570,"literals":["solidity",">=","0.8",".0"],"nodeType":"PragmaDirective","src":"0:24:10"},{"absolutePath":"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol","file":"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol","id":2572,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2776,"sourceUnit":1406,"src":"26:85:10","symbolAliases":[{"foreign":{"id":2571,"name":"ERC4626","nodeType":"Identifier","overloadedDeclarations":[],"src":"35:7:10","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol","file":"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol","id":2574,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2776,"sourceUnit":1431,"src":"112:99:10","symbolAliases":[{"foreign":{"id":2573,"name":"IERC20Metadata","nodeType":"Identifier","overloadedDeclarations":[],"src":"121:14:10","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC20/ERC20.sol","file":"@openzeppelin/contracts/token/ERC20/ERC20.sol","id":2576,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2776,"sourceUnit":754,"src":"212:70:10","symbolAliases":[{"foreign":{"id":2575,"name":"ERC20","nodeType":"Identifier","overloadedDeclarations":[],"src":"221:5:10","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","file":"@openzeppelin/contracts/token/ERC20/IERC20.sol","id":2578,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2776,"sourceUnit":832,"src":"283:72:10","symbolAliases":[{"foreign":{"id":2577,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"src":"292:6:10","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":2579,"name":"ERC4626","nodeType":"IdentifierPath","referencedDeclaration":1405,"src":"374:7:10"},"id":2580,"nodeType":"InheritanceSpecifier","src":"374:7:10"}],"contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":2775,"linearizedBaseContracts":[2775,1405,167,753,1430,831,2064],"name":"DRIP","nameLocation":"366:4:10","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":2583,"mutability":"constant","name":"renbtc","nameLocation":"403:6:10","nodeType":"VariableDeclaration","scope":2775,"src":"386:68:10","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2581,"name":"address","nodeType":"ElementaryTypeName","src":"386:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":{"hexValue":"307845423443323738316534656241383034434539613938303343363764303839333433366242323744","id":2582,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"412:42:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"value":"0xEB4C2781e4ebA804CE9a9803C67d0893436bB27D"},"visibility":"internal"},{"body":{"id":2595,"nodeType":"Block","src":"527:2:10","statements":[]},"id":2596,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"arguments":[{"id":2587,"name":"renbtc","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2583,"src":"496:6:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2586,"name":"IERC20Metadata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1430,"src":"481:14:10","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20Metadata_$1430_$","typeString":"type(contract IERC20Metadata)"}},"id":2588,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"481:22:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Metadata_$1430","typeString":"contract IERC20Metadata"}}],"id":2589,"kind":"baseConstructorSpecifier","modifierName":{"id":2585,"name":"ERC4626","nodeType":"IdentifierPath","referencedDeclaration":1405,"src":"473:7:10"},"nodeType":"ModifierInvocation","src":"473:31:10"},{"arguments":[{"hexValue":"44524950","id":2591,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"511:6:10","typeDescriptions":{"typeIdentifier":"t_stringliteral_d4933aa18fa32772c4bdf42e2c04848c5a2215c6acc9334703ec145dd5a7009b","typeString":"literal_string \"DRIP\""},"value":"DRIP"},{"hexValue":"44524950","id":2592,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"519:6:10","typeDescriptions":{"typeIdentifier":"t_stringliteral_d4933aa18fa32772c4bdf42e2c04848c5a2215c6acc9334703ec145dd5a7009b","typeString":"literal_string \"DRIP\""},"value":"DRIP"}],"id":2593,"kind":"baseConstructorSpecifier","modifierName":{"id":2590,"name":"ERC20","nodeType":"IdentifierPath","referencedDeclaration":753,"src":"505:5:10"},"nodeType":"ModifierInvocation","src":"505:21:10"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":2584,"nodeType":"ParameterList","parameters":[],"src":"470:2:10"},"returnParameters":{"id":2594,"nodeType":"ParameterList","parameters":[],"src":"527:0:10"},"scope":2775,"src":"459:70:10","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":2635,"nodeType":"Block","src":"632:185:10","statements":[{"assignments":[2608],"declarations":[{"constant":false,"id":2608,"mutability":"mutable","name":"balance","nameLocation":"646:7:10","nodeType":"VariableDeclaration","scope":2635,"src":"638:15:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2607,"name":"uint256","nodeType":"ElementaryTypeName","src":"638:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2612,"initialValue":{"arguments":[{"id":2610,"name":"receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2600,"src":"666:8:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2609,"name":"balanceOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":266,"src":"656:9:10","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view returns (uint256)"}},"id":2611,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"656:19:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"638:37:10"},{"expression":{"arguments":[{"id":2616,"name":"assets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2598,"src":"696:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2617,"name":"receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2600,"src":"704:8:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":2613,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"682:5:10","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_DRIP_$2775_$","typeString":"type(contract super DRIP)"}},"id":2615,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"deposit","nodeType":"MemberAccess","referencedDeclaration":1097,"src":"682:13:10","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$_t_address_$returns$_t_uint256_$","typeString":"function (uint256,address) returns (uint256)"}},"id":2618,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"682:31:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2619,"nodeType":"ExpressionStatement","src":"682:31:10"},{"expression":{"id":2626,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2620,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2605,"src":"719:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2625,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2622,"name":"receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2600,"src":"738:8:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2621,"name":"balanceOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":266,"src":"728:9:10","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view returns (uint256)"}},"id":2623,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"728:19:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":2624,"name":"balance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2608,"src":"750:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"728:29:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"719:38:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2627,"nodeType":"ExpressionStatement","src":"719:38:10"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2631,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2629,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2605,"src":"772:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":2630,"name":"minOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2602,"src":"782:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"772:16:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"546f6f206c6974746c65207265636569766564","id":2632,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"790:21:10","typeDescriptions":{"typeIdentifier":"t_stringliteral_f037a9cbca9be03859489f289f0cf5f85c0414bbfdd9785bc7ab31bd734e249c","typeString":"literal_string \"Too little received\""},"value":"Too little received"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_f037a9cbca9be03859489f289f0cf5f85c0414bbfdd9785bc7ab31bd734e249c","typeString":"literal_string \"Too little received\""}],"id":2628,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"764:7:10","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2633,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"764:48:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2634,"nodeType":"ExpressionStatement","src":"764:48:10"}]},"functionSelector":"bc157ac1","id":2636,"implemented":true,"kind":"function","modifiers":[],"name":"deposit","nameLocation":"542:7:10","nodeType":"FunctionDefinition","parameters":{"id":2603,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2598,"mutability":"mutable","name":"assets","nameLocation":"558:6:10","nodeType":"VariableDeclaration","scope":2636,"src":"550:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2597,"name":"uint256","nodeType":"ElementaryTypeName","src":"550:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2600,"mutability":"mutable","name":"receiver","nameLocation":"574:8:10","nodeType":"VariableDeclaration","scope":2636,"src":"566:16:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2599,"name":"address","nodeType":"ElementaryTypeName","src":"566:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2602,"mutability":"mutable","name":"minOut","nameLocation":"592:6:10","nodeType":"VariableDeclaration","scope":2636,"src":"584:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2601,"name":"uint256","nodeType":"ElementaryTypeName","src":"584:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"549:50:10"},"returnParameters":{"id":2606,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2605,"mutability":"mutable","name":"result","nameLocation":"624:6:10","nodeType":"VariableDeclaration","scope":2636,"src":"616:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2604,"name":"uint256","nodeType":"ElementaryTypeName","src":"616:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"615:16:10"},"scope":2775,"src":"533:284:10","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":2684,"nodeType":"Block","src":"936:223:10","statements":[{"assignments":[2650],"declarations":[{"constant":false,"id":2650,"mutability":"mutable","name":"balance","nameLocation":"950:7:10","nodeType":"VariableDeclaration","scope":2684,"src":"942:15:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2649,"name":"uint256","nodeType":"ElementaryTypeName","src":"942:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2657,"initialValue":{"arguments":[{"id":2655,"name":"receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2640,"src":"985:8:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[{"id":2652,"name":"renbtc","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2583,"src":"967:6:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2651,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":831,"src":"960:6:10","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$831_$","typeString":"type(contract IERC20)"}},"id":2653,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"960:14:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$831","typeString":"contract IERC20"}},"id":2654,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"balanceOf","nodeType":"MemberAccess","referencedDeclaration":788,"src":"960:24:10","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view external returns (uint256)"}},"id":2656,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"960:34:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"942:52:10"},{"expression":{"arguments":[{"id":2661,"name":"assets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2638,"src":"1016:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2662,"name":"receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2640,"src":"1024:8:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2663,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2642,"src":"1034:5:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":2658,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"1001:5:10","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_DRIP_$2775_$","typeString":"type(contract super DRIP)"}},"id":2660,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"withdraw","nodeType":"MemberAccess","referencedDeclaration":1174,"src":"1001:14:10","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (uint256,address,address) returns (uint256)"}},"id":2664,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1001:39:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2665,"nodeType":"ExpressionStatement","src":"1001:39:10"},{"expression":{"id":2675,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2666,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2647,"src":"1046:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2674,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2671,"name":"receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2640,"src":"1080:8:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[{"id":2668,"name":"renbtc","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2583,"src":"1062:6:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2667,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":831,"src":"1055:6:10","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$831_$","typeString":"type(contract IERC20)"}},"id":2669,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1055:14:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$831","typeString":"contract IERC20"}},"id":2670,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"balanceOf","nodeType":"MemberAccess","referencedDeclaration":788,"src":"1055:24:10","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view external returns (uint256)"}},"id":2672,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1055:34:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":2673,"name":"balance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2650,"src":"1092:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1055:44:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1046:53:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2676,"nodeType":"ExpressionStatement","src":"1046:53:10"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2680,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2678,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2647,"src":"1114:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":2679,"name":"minOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2644,"src":"1124:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1114:16:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"546f6f206c6974746c65207265636569766564","id":2681,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1132:21:10","typeDescriptions":{"typeIdentifier":"t_stringliteral_f037a9cbca9be03859489f289f0cf5f85c0414bbfdd9785bc7ab31bd734e249c","typeString":"literal_string \"Too little received\""},"value":"Too little received"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_f037a9cbca9be03859489f289f0cf5f85c0414bbfdd9785bc7ab31bd734e249c","typeString":"literal_string \"Too little received\""}],"id":2677,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1106:7:10","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2682,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1106:48:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2683,"nodeType":"ExpressionStatement","src":"1106:48:10"}]},"functionSelector":"a318c1a4","id":2685,"implemented":true,"kind":"function","modifiers":[],"name":"withdraw","nameLocation":"830:8:10","nodeType":"FunctionDefinition","parameters":{"id":2645,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2638,"mutability":"mutable","name":"assets","nameLocation":"847:6:10","nodeType":"VariableDeclaration","scope":2685,"src":"839:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2637,"name":"uint256","nodeType":"ElementaryTypeName","src":"839:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2640,"mutability":"mutable","name":"receiver","nameLocation":"863:8:10","nodeType":"VariableDeclaration","scope":2685,"src":"855:16:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2639,"name":"address","nodeType":"ElementaryTypeName","src":"855:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2642,"mutability":"mutable","name":"owner","nameLocation":"881:5:10","nodeType":"VariableDeclaration","scope":2685,"src":"873:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2641,"name":"address","nodeType":"ElementaryTypeName","src":"873:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2644,"mutability":"mutable","name":"minOut","nameLocation":"896:6:10","nodeType":"VariableDeclaration","scope":2685,"src":"888:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2643,"name":"uint256","nodeType":"ElementaryTypeName","src":"888:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"838:65:10"},"returnParameters":{"id":2648,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2647,"mutability":"mutable","name":"result","nameLocation":"928:6:10","nodeType":"VariableDeclaration","scope":2685,"src":"920:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2646,"name":"uint256","nodeType":"ElementaryTypeName","src":"920:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"919:16:10"},"scope":2775,"src":"821:338:10","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":2724,"nodeType":"Block","src":"1259:182:10","statements":[{"assignments":[2697],"declarations":[{"constant":false,"id":2697,"mutability":"mutable","name":"balance","nameLocation":"1273:7:10","nodeType":"VariableDeclaration","scope":2724,"src":"1265:15:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2696,"name":"uint256","nodeType":"ElementaryTypeName","src":"1265:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2701,"initialValue":{"arguments":[{"id":2699,"name":"receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2689,"src":"1293:8:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2698,"name":"balanceOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":266,"src":"1283:9:10","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view returns (uint256)"}},"id":2700,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1283:19:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1265:37:10"},{"expression":{"arguments":[{"id":2705,"name":"shares","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2687,"src":"1320:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2706,"name":"receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2689,"src":"1328:8:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":2702,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"1309:5:10","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_DRIP_$2775_$","typeString":"type(contract super DRIP)"}},"id":2704,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"mint","nodeType":"MemberAccess","referencedDeclaration":1134,"src":"1309:10:10","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$_t_address_$returns$_t_uint256_$","typeString":"function (uint256,address) returns (uint256)"}},"id":2707,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1309:28:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2708,"nodeType":"ExpressionStatement","src":"1309:28:10"},{"expression":{"id":2715,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2709,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2694,"src":"1343:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2714,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2711,"name":"receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2689,"src":"1362:8:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2710,"name":"balanceOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":266,"src":"1352:9:10","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view returns (uint256)"}},"id":2712,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1352:19:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":2713,"name":"balance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2697,"src":"1374:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1352:29:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1343:38:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2716,"nodeType":"ExpressionStatement","src":"1343:38:10"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2720,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2718,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2694,"src":"1396:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":2719,"name":"minOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2691,"src":"1406:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1396:16:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"546f6f206c6974746c65207265636569766564","id":2721,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1414:21:10","typeDescriptions":{"typeIdentifier":"t_stringliteral_f037a9cbca9be03859489f289f0cf5f85c0414bbfdd9785bc7ab31bd734e249c","typeString":"literal_string \"Too little received\""},"value":"Too little received"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_f037a9cbca9be03859489f289f0cf5f85c0414bbfdd9785bc7ab31bd734e249c","typeString":"literal_string \"Too little received\""}],"id":2717,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1388:7:10","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2722,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1388:48:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2723,"nodeType":"ExpressionStatement","src":"1388:48:10"}]},"functionSelector":"836a1040","id":2725,"implemented":true,"kind":"function","modifiers":[],"name":"mint","nameLocation":"1172:4:10","nodeType":"FunctionDefinition","parameters":{"id":2692,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2687,"mutability":"mutable","name":"shares","nameLocation":"1185:6:10","nodeType":"VariableDeclaration","scope":2725,"src":"1177:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2686,"name":"uint256","nodeType":"ElementaryTypeName","src":"1177:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2689,"mutability":"mutable","name":"receiver","nameLocation":"1201:8:10","nodeType":"VariableDeclaration","scope":2725,"src":"1193:16:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2688,"name":"address","nodeType":"ElementaryTypeName","src":"1193:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2691,"mutability":"mutable","name":"minOut","nameLocation":"1219:6:10","nodeType":"VariableDeclaration","scope":2725,"src":"1211:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2690,"name":"uint256","nodeType":"ElementaryTypeName","src":"1211:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1176:50:10"},"returnParameters":{"id":2695,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2694,"mutability":"mutable","name":"result","nameLocation":"1251:6:10","nodeType":"VariableDeclaration","scope":2725,"src":"1243:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2693,"name":"uint256","nodeType":"ElementaryTypeName","src":"1243:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1242:16:10"},"scope":2775,"src":"1163:278:10","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":2773,"nodeType":"Block","src":"1558:221:10","statements":[{"assignments":[2739],"declarations":[{"constant":false,"id":2739,"mutability":"mutable","name":"balance","nameLocation":"1572:7:10","nodeType":"VariableDeclaration","scope":2773,"src":"1564:15:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2738,"name":"uint256","nodeType":"ElementaryTypeName","src":"1564:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2746,"initialValue":{"arguments":[{"id":2744,"name":"receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2729,"src":"1607:8:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[{"id":2741,"name":"renbtc","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2583,"src":"1589:6:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2740,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":831,"src":"1582:6:10","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$831_$","typeString":"type(contract IERC20)"}},"id":2742,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1582:14:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$831","typeString":"contract IERC20"}},"id":2743,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"balanceOf","nodeType":"MemberAccess","referencedDeclaration":788,"src":"1582:24:10","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view external returns (uint256)"}},"id":2745,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1582:34:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1564:52:10"},{"expression":{"arguments":[{"id":2750,"name":"shares","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2727,"src":"1636:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2751,"name":"receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2729,"src":"1644:8:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2752,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2731,"src":"1654:5:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":2747,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"1623:5:10","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_DRIP_$2775_$","typeString":"type(contract super DRIP)"}},"id":2749,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"redeem","nodeType":"MemberAccess","referencedDeclaration":1214,"src":"1623:12:10","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (uint256,address,address) returns (uint256)"}},"id":2753,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1623:37:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2754,"nodeType":"ExpressionStatement","src":"1623:37:10"},{"expression":{"id":2764,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2755,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2736,"src":"1666:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2763,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2760,"name":"receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2729,"src":"1700:8:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[{"id":2757,"name":"renbtc","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2583,"src":"1682:6:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2756,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":831,"src":"1675:6:10","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$831_$","typeString":"type(contract IERC20)"}},"id":2758,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1675:14:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$831","typeString":"contract IERC20"}},"id":2759,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"balanceOf","nodeType":"MemberAccess","referencedDeclaration":788,"src":"1675:24:10","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view external returns (uint256)"}},"id":2761,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1675:34:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":2762,"name":"balance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2739,"src":"1712:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1675:44:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1666:53:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2765,"nodeType":"ExpressionStatement","src":"1666:53:10"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2769,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2767,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2736,"src":"1734:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":2768,"name":"minOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2733,"src":"1744:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1734:16:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"546f6f206c6974746c65207265636569766564","id":2770,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1752:21:10","typeDescriptions":{"typeIdentifier":"t_stringliteral_f037a9cbca9be03859489f289f0cf5f85c0414bbfdd9785bc7ab31bd734e249c","typeString":"literal_string \"Too little received\""},"value":"Too little received"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_f037a9cbca9be03859489f289f0cf5f85c0414bbfdd9785bc7ab31bd734e249c","typeString":"literal_string \"Too little received\""}],"id":2766,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1726:7:10","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2771,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1726:48:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2772,"nodeType":"ExpressionStatement","src":"1726:48:10"}]},"functionSelector":"9f40a7b3","id":2774,"implemented":true,"kind":"function","modifiers":[],"name":"redeem","nameLocation":"1454:6:10","nodeType":"FunctionDefinition","parameters":{"id":2734,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2727,"mutability":"mutable","name":"shares","nameLocation":"1469:6:10","nodeType":"VariableDeclaration","scope":2774,"src":"1461:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2726,"name":"uint256","nodeType":"ElementaryTypeName","src":"1461:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2729,"mutability":"mutable","name":"receiver","nameLocation":"1485:8:10","nodeType":"VariableDeclaration","scope":2774,"src":"1477:16:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2728,"name":"address","nodeType":"ElementaryTypeName","src":"1477:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2731,"mutability":"mutable","name":"owner","nameLocation":"1503:5:10","nodeType":"VariableDeclaration","scope":2774,"src":"1495:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2730,"name":"address","nodeType":"ElementaryTypeName","src":"1495:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2733,"mutability":"mutable","name":"minOut","nameLocation":"1518:6:10","nodeType":"VariableDeclaration","scope":2774,"src":"1510:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2732,"name":"uint256","nodeType":"ElementaryTypeName","src":"1510:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1460:65:10"},"returnParameters":{"id":2737,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2736,"mutability":"mutable","name":"result","nameLocation":"1550:6:10","nodeType":"VariableDeclaration","scope":2774,"src":"1542:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2735,"name":"uint256","nodeType":"ElementaryTypeName","src":"1542:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1541:16:10"},"scope":2775,"src":"1445:334:10","stateMutability":"nonpayable","virtual":false,"visibility":"public"}],"scope":2776,"src":"357:1745:10","usedErrors":[]}],"src":"0:2102:10"},"id":10}},"contracts":{"@openzeppelin/contracts/interfaces/IERC4626.sol":{"IERC4626":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"caller","type":"address"},{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":false,"internalType":"uint256","name":"assets","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"shares","type":"uint256"}],"name":"Deposit","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"caller","type":"address"},{"indexed":true,"internalType":"address","name":"receiver","type":"address"},{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":false,"internalType":"uint256","name":"assets","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"shares","type":"uint256"}],"name":"Withdraw","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"asset","outputs":[{"internalType":"address","name":"assetTokenAddress","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"shares","type":"uint256"}],"name":"convertToAssets","outputs":[{"internalType":"uint256","name":"assets","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"assets","type":"uint256"}],"name":"convertToShares","outputs":[{"internalType":"uint256","name":"shares","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"assets","type":"uint256"},{"internalType":"address","name":"receiver","type":"address"}],"name":"deposit","outputs":[{"internalType":"uint256","name":"shares","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"receiver","type":"address"}],"name":"maxDeposit","outputs":[{"internalType":"uint256","name":"maxAssets","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"receiver","type":"address"}],"name":"maxMint","outputs":[{"internalType":"uint256","name":"maxShares","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"maxRedeem","outputs":[{"internalType":"uint256","name":"maxShares","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"maxWithdraw","outputs":[{"internalType":"uint256","name":"maxAssets","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"shares","type":"uint256"},{"internalType":"address","name":"receiver","type":"address"}],"name":"mint","outputs":[{"internalType":"uint256","name":"assets","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"assets","type":"uint256"}],"name":"previewDeposit","outputs":[{"internalType":"uint256","name":"shares","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"shares","type":"uint256"}],"name":"previewMint","outputs":[{"internalType":"uint256","name":"assets","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"shares","type":"uint256"}],"name":"previewRedeem","outputs":[{"internalType":"uint256","name":"assets","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"assets","type":"uint256"}],"name":"previewWithdraw","outputs":[{"internalType":"uint256","name":"shares","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"shares","type":"uint256"},{"internalType":"address","name":"receiver","type":"address"},{"internalType":"address","name":"owner","type":"address"}],"name":"redeem","outputs":[{"internalType":"uint256","name":"assets","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalAssets","outputs":[{"internalType":"uint256","name":"totalManagedAssets","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"assets","type":"uint256"},{"internalType":"address","name":"receiver","type":"address"},{"internalType":"address","name":"owner","type":"address"}],"name":"withdraw","outputs":[{"internalType":"uint256","name":"shares","type":"uint256"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface of the ERC4626 \"Tokenized Vault Standard\", as defined in https://eips.ethereum.org/EIPS/eip-4626[ERC-4626]. _Available since v4.7._","kind":"dev","methods":{"allowance(address,address)":{"details":"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."},"approve(address,uint256)":{"details":"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."},"asset()":{"details":"Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing. - MUST be an ERC-20 token contract. - MUST NOT revert."},"balanceOf(address)":{"details":"Returns the amount of tokens owned by `account`."},"convertToAssets(uint256)":{"details":"Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an ideal scenario where all the conditions are met. - MUST NOT be inclusive of any fees that are charged against assets in the Vault. - MUST NOT show any variations depending on the caller. - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange. - MUST NOT revert. NOTE: This calculation MAY NOT reflect the “per-user” price-per-share, and instead should reflect the “average-user’s” price-per-share, meaning what the average user should expect to see when exchanging to and from."},"convertToShares(uint256)":{"details":"Returns the amount of shares that the Vault would exchange for the amount of assets provided, in an ideal scenario where all the conditions are met. - MUST NOT be inclusive of any fees that are charged against assets in the Vault. - MUST NOT show any variations depending on the caller. - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange. - MUST NOT revert. NOTE: This calculation MAY NOT reflect the “per-user” price-per-share, and instead should reflect the “average-user’s” price-per-share, meaning what the average user should expect to see when exchanging to and from."},"decimals()":{"details":"Returns the decimals places of the token."},"deposit(uint256,address)":{"details":"Mints shares Vault shares to receiver by depositing exactly amount of underlying tokens. - MUST emit the Deposit event. - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the   deposit execution, and are accounted for during deposit. - MUST revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not   approving enough underlying tokens to the Vault contract, etc). NOTE: most implementations will require pre-approval of the Vault with the Vault’s underlying asset token."},"maxDeposit(address)":{"details":"Returns the maximum amount of the underlying asset that can be deposited into the Vault for the receiver, through a deposit call. - MUST return a limited value if receiver is subject to some deposit limit. - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited. - MUST NOT revert."},"maxMint(address)":{"details":"Returns the maximum amount of the Vault shares that can be minted for the receiver, through a mint call. - MUST return a limited value if receiver is subject to some mint limit. - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted. - MUST NOT revert."},"maxRedeem(address)":{"details":"Returns the maximum amount of Vault shares that can be redeemed from the owner balance in the Vault, through a redeem call. - MUST return a limited value if owner is subject to some withdrawal limit or timelock. - MUST return balanceOf(owner) if owner is not subject to any withdrawal limit or timelock. - MUST NOT revert."},"maxWithdraw(address)":{"details":"Returns the maximum amount of the underlying asset that can be withdrawn from the owner balance in the Vault, through a withdraw call. - MUST return a limited value if owner is subject to some withdrawal limit or timelock. - MUST NOT revert."},"mint(uint256,address)":{"details":"Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens. - MUST emit the Deposit event. - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the mint   execution, and are accounted for during mint. - MUST revert if all of shares cannot be minted (due to deposit limit being reached, slippage, the user not   approving enough underlying tokens to the Vault contract, etc). NOTE: most implementations will require pre-approval of the Vault with the Vault’s underlying asset token."},"name()":{"details":"Returns the name of the token."},"previewDeposit(uint256)":{"details":"Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given current on-chain conditions. - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit   call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called   in the same transaction. - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the   deposit would be accepted, regardless if the user has enough tokens approved, etc. - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees. - MUST NOT revert. NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in share price or some other type of condition, meaning the depositor will lose assets by depositing."},"previewMint(uint256)":{"details":"Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given current on-chain conditions. - MUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call   in the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the   same transaction. - MUST NOT account for mint limits like those returned from maxMint and should always act as though the mint   would be accepted, regardless if the user has enough tokens approved, etc. - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees. - MUST NOT revert. NOTE: any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in share price or some other type of condition, meaning the depositor will lose assets by minting."},"previewRedeem(uint256)":{"details":"Allows an on-chain or off-chain user to simulate the effects of their redeemption at the current block, given current on-chain conditions. - MUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call   in the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the   same transaction. - MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the   redemption would be accepted, regardless if the user has enough shares, etc. - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees. - MUST NOT revert. NOTE: any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in share price or some other type of condition, meaning the depositor will lose assets by redeeming."},"previewWithdraw(uint256)":{"details":"Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block, given current on-chain conditions. - MUST return as close to and no fewer than the exact amount of Vault shares that would be burned in a withdraw   call in the same transaction. I.e. withdraw should return the same or fewer shares as previewWithdraw if   called   in the same transaction. - MUST NOT account for withdrawal limits like those returned from maxWithdraw and should always act as though   the withdrawal would be accepted, regardless if the user has enough shares, etc. - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees. - MUST NOT revert. NOTE: any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be considered slippage in share price or some other type of condition, meaning the depositor will lose assets by depositing."},"redeem(uint256,address,address)":{"details":"Burns exactly shares from owner and sends assets of underlying tokens to receiver. - MUST emit the Withdraw event. - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the   redeem execution, and are accounted for during redeem. - MUST revert if all of shares cannot be redeemed (due to withdrawal limit being reached, slippage, the owner   not having enough shares, etc). NOTE: some implementations will require pre-requesting to the Vault before a withdrawal may be performed. Those methods should be performed separately."},"symbol()":{"details":"Returns the symbol of the token."},"totalAssets()":{"details":"Returns the total amount of the underlying asset that is “managed” by Vault. - SHOULD include any compounding that occurs from yield. - MUST be inclusive of any fees that are charged against assets in the Vault. - MUST NOT revert."},"totalSupply()":{"details":"Returns the amount of tokens in existence."},"transfer(address,uint256)":{"details":"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."},"transferFrom(address,address,uint256)":{"details":"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."},"withdraw(uint256,address,address)":{"details":"Burns shares from owner and sends exactly assets of underlying tokens to receiver. - MUST emit the Withdraw event. - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the   withdraw execution, and are accounted for during withdraw. - MUST revert if all of assets cannot be withdrawn (due to withdrawal limit being reached, slippage, the owner   not having enough shares, etc). Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed. Those methods should be performed separately."}},"version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","asset()":"38d52e0f","balanceOf(address)":"70a08231","convertToAssets(uint256)":"07a2d13a","convertToShares(uint256)":"c6e6f592","decimals()":"313ce567","deposit(uint256,address)":"6e553f65","maxDeposit(address)":"402d267d","maxMint(address)":"c63d75b6","maxRedeem(address)":"d905777e","maxWithdraw(address)":"ce96cb77","mint(uint256,address)":"94bf804d","name()":"06fdde03","previewDeposit(uint256)":"ef8b30f7","previewMint(uint256)":"b3d7f6b9","previewRedeem(uint256)":"4cdad506","previewWithdraw(uint256)":"0a28a477","redeem(uint256,address,address)":"ba087652","symbol()":"95d89b41","totalAssets()":"01e1d114","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd","withdraw(uint256,address,address)":"b460af94"}},"metadata":"{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"asset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"assetTokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"convertToAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"convertToShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"maxDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"maxAssets\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"maxMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"maxShares\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"maxRedeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"maxShares\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"maxWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"maxAssets\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"previewDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"previewMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"previewRedeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"previewWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalManagedAssets\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC4626 \\\"Tokenized Vault Standard\\\", as defined in https://eips.ethereum.org/EIPS/eip-4626[ERC-4626]. _Available since v4.7._\",\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"asset()\":{\"details\":\"Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing. - MUST be an ERC-20 token contract. - MUST NOT revert.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"convertToAssets(uint256)\":{\"details\":\"Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an ideal scenario where all the conditions are met. - MUST NOT be inclusive of any fees that are charged against assets in the Vault. - MUST NOT show any variations depending on the caller. - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange. - MUST NOT revert. NOTE: This calculation MAY NOT reflect the \\u201cper-user\\u201d price-per-share, and instead should reflect the \\u201caverage-user\\u2019s\\u201d price-per-share, meaning what the average user should expect to see when exchanging to and from.\"},\"convertToShares(uint256)\":{\"details\":\"Returns the amount of shares that the Vault would exchange for the amount of assets provided, in an ideal scenario where all the conditions are met. - MUST NOT be inclusive of any fees that are charged against assets in the Vault. - MUST NOT show any variations depending on the caller. - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange. - MUST NOT revert. NOTE: This calculation MAY NOT reflect the \\u201cper-user\\u201d price-per-share, and instead should reflect the \\u201caverage-user\\u2019s\\u201d price-per-share, meaning what the average user should expect to see when exchanging to and from.\"},\"decimals()\":{\"details\":\"Returns the decimals places of the token.\"},\"deposit(uint256,address)\":{\"details\":\"Mints shares Vault shares to receiver by depositing exactly amount of underlying tokens. - MUST emit the Deposit event. - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the   deposit execution, and are accounted for during deposit. - MUST revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not   approving enough underlying tokens to the Vault contract, etc). NOTE: most implementations will require pre-approval of the Vault with the Vault\\u2019s underlying asset token.\"},\"maxDeposit(address)\":{\"details\":\"Returns the maximum amount of the underlying asset that can be deposited into the Vault for the receiver, through a deposit call. - MUST return a limited value if receiver is subject to some deposit limit. - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited. - MUST NOT revert.\"},\"maxMint(address)\":{\"details\":\"Returns the maximum amount of the Vault shares that can be minted for the receiver, through a mint call. - MUST return a limited value if receiver is subject to some mint limit. - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted. - MUST NOT revert.\"},\"maxRedeem(address)\":{\"details\":\"Returns the maximum amount of Vault shares that can be redeemed from the owner balance in the Vault, through a redeem call. - MUST return a limited value if owner is subject to some withdrawal limit or timelock. - MUST return balanceOf(owner) if owner is not subject to any withdrawal limit or timelock. - MUST NOT revert.\"},\"maxWithdraw(address)\":{\"details\":\"Returns the maximum amount of the underlying asset that can be withdrawn from the owner balance in the Vault, through a withdraw call. - MUST return a limited value if owner is subject to some withdrawal limit or timelock. - MUST NOT revert.\"},\"mint(uint256,address)\":{\"details\":\"Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens. - MUST emit the Deposit event. - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the mint   execution, and are accounted for during mint. - MUST revert if all of shares cannot be minted (due to deposit limit being reached, slippage, the user not   approving enough underlying tokens to the Vault contract, etc). NOTE: most implementations will require pre-approval of the Vault with the Vault\\u2019s underlying asset token.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"previewDeposit(uint256)\":{\"details\":\"Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given current on-chain conditions. - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit   call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called   in the same transaction. - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the   deposit would be accepted, regardless if the user has enough tokens approved, etc. - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees. - MUST NOT revert. NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in share price or some other type of condition, meaning the depositor will lose assets by depositing.\"},\"previewMint(uint256)\":{\"details\":\"Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given current on-chain conditions. - MUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call   in the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the   same transaction. - MUST NOT account for mint limits like those returned from maxMint and should always act as though the mint   would be accepted, regardless if the user has enough tokens approved, etc. - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees. - MUST NOT revert. NOTE: any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in share price or some other type of condition, meaning the depositor will lose assets by minting.\"},\"previewRedeem(uint256)\":{\"details\":\"Allows an on-chain or off-chain user to simulate the effects of their redeemption at the current block, given current on-chain conditions. - MUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call   in the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the   same transaction. - MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the   redemption would be accepted, regardless if the user has enough shares, etc. - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees. - MUST NOT revert. NOTE: any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in share price or some other type of condition, meaning the depositor will lose assets by redeeming.\"},\"previewWithdraw(uint256)\":{\"details\":\"Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block, given current on-chain conditions. - MUST return as close to and no fewer than the exact amount of Vault shares that would be burned in a withdraw   call in the same transaction. I.e. withdraw should return the same or fewer shares as previewWithdraw if   called   in the same transaction. - MUST NOT account for withdrawal limits like those returned from maxWithdraw and should always act as though   the withdrawal would be accepted, regardless if the user has enough shares, etc. - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees. - MUST NOT revert. NOTE: any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be considered slippage in share price or some other type of condition, meaning the depositor will lose assets by depositing.\"},\"redeem(uint256,address,address)\":{\"details\":\"Burns exactly shares from owner and sends assets of underlying tokens to receiver. - MUST emit the Withdraw event. - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the   redeem execution, and are accounted for during redeem. - MUST revert if all of shares cannot be redeemed (due to withdrawal limit being reached, slippage, the owner   not having enough shares, etc). NOTE: some implementations will require pre-requesting to the Vault before a withdrawal may be performed. Those methods should be performed separately.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token.\"},\"totalAssets()\":{\"details\":\"Returns the total amount of the underlying asset that is \\u201cmanaged\\u201d by Vault. - SHOULD include any compounding that occurs from yield. - MUST be inclusive of any fees that are charged against assets in the Vault. - MUST NOT revert.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"withdraw(uint256,address,address)\":{\"details\":\"Burns shares from owner and sends exactly assets of underlying tokens to receiver. - MUST emit the Withdraw event. - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the   withdraw execution, and are accounted for during withdraw. - MUST revert if all of assets cannot be withdrawn (due to withdrawal limit being reached, slippage, the owner   not having enough shares, etc). Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed. Those methods should be performed separately.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/IERC4626.sol\":\"IERC4626\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC4626.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (interfaces/IERC4626.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\nimport \\\"../token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\n/**\\n * @dev Interface of the ERC4626 \\\"Tokenized Vault Standard\\\", as defined in\\n * https://eips.ethereum.org/EIPS/eip-4626[ERC-4626].\\n *\\n * _Available since v4.7._\\n */\\ninterface IERC4626 is IERC20, IERC20Metadata {\\n    event Deposit(address indexed caller, address indexed owner, uint256 assets, uint256 shares);\\n\\n    event Withdraw(\\n        address indexed caller,\\n        address indexed receiver,\\n        address indexed owner,\\n        uint256 assets,\\n        uint256 shares\\n    );\\n\\n    /**\\n     * @dev Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing.\\n     *\\n     * - MUST be an ERC-20 token contract.\\n     * - MUST NOT revert.\\n     */\\n    function asset() external view returns (address assetTokenAddress);\\n\\n    /**\\n     * @dev Returns the total amount of the underlying asset that is \\u201cmanaged\\u201d by Vault.\\n     *\\n     * - SHOULD include any compounding that occurs from yield.\\n     * - MUST be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT revert.\\n     */\\n    function totalAssets() external view returns (uint256 totalManagedAssets);\\n\\n    /**\\n     * @dev Returns the amount of shares that the Vault would exchange for the amount of assets provided, in an ideal\\n     * scenario where all the conditions are met.\\n     *\\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT show any variations depending on the caller.\\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: This calculation MAY NOT reflect the \\u201cper-user\\u201d price-per-share, and instead should reflect the\\n     * \\u201caverage-user\\u2019s\\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\\n     * from.\\n     */\\n    function convertToShares(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an ideal\\n     * scenario where all the conditions are met.\\n     *\\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT show any variations depending on the caller.\\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: This calculation MAY NOT reflect the \\u201cper-user\\u201d price-per-share, and instead should reflect the\\n     * \\u201caverage-user\\u2019s\\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\\n     * from.\\n     */\\n    function convertToAssets(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Returns the maximum amount of the underlying asset that can be deposited into the Vault for the receiver,\\n     * through a deposit call.\\n     *\\n     * - MUST return a limited value if receiver is subject to some deposit limit.\\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited.\\n     * - MUST NOT revert.\\n     */\\n    function maxDeposit(address receiver) external view returns (uint256 maxAssets);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given\\n     * current on-chain conditions.\\n     *\\n     * - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit\\n     *   call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called\\n     *   in the same transaction.\\n     * - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the\\n     *   deposit would be accepted, regardless if the user has enough tokens approved, etc.\\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\\n     */\\n    function previewDeposit(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Mints shares Vault shares to receiver by depositing exactly amount of underlying tokens.\\n     *\\n     * - MUST emit the Deposit event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   deposit execution, and are accounted for during deposit.\\n     * - MUST revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not\\n     *   approving enough underlying tokens to the Vault contract, etc).\\n     *\\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault\\u2019s underlying asset token.\\n     */\\n    function deposit(uint256 assets, address receiver) external returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the maximum amount of the Vault shares that can be minted for the receiver, through a mint call.\\n     * - MUST return a limited value if receiver is subject to some mint limit.\\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted.\\n     * - MUST NOT revert.\\n     */\\n    function maxMint(address receiver) external view returns (uint256 maxShares);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given\\n     * current on-chain conditions.\\n     *\\n     * - MUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call\\n     *   in the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the\\n     *   same transaction.\\n     * - MUST NOT account for mint limits like those returned from maxMint and should always act as though the mint\\n     *   would be accepted, regardless if the user has enough tokens approved, etc.\\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by minting.\\n     */\\n    function previewMint(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens.\\n     *\\n     * - MUST emit the Deposit event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the mint\\n     *   execution, and are accounted for during mint.\\n     * - MUST revert if all of shares cannot be minted (due to deposit limit being reached, slippage, the user not\\n     *   approving enough underlying tokens to the Vault contract, etc).\\n     *\\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault\\u2019s underlying asset token.\\n     */\\n    function mint(uint256 shares, address receiver) external returns (uint256 assets);\\n\\n    /**\\n     * @dev Returns the maximum amount of the underlying asset that can be withdrawn from the owner balance in the\\n     * Vault, through a withdraw call.\\n     *\\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\n     * - MUST NOT revert.\\n     */\\n    function maxWithdraw(address owner) external view returns (uint256 maxAssets);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block,\\n     * given current on-chain conditions.\\n     *\\n     * - MUST return as close to and no fewer than the exact amount of Vault shares that would be burned in a withdraw\\n     *   call in the same transaction. I.e. withdraw should return the same or fewer shares as previewWithdraw if\\n     *   called\\n     *   in the same transaction.\\n     * - MUST NOT account for withdrawal limits like those returned from maxWithdraw and should always act as though\\n     *   the withdrawal would be accepted, regardless if the user has enough shares, etc.\\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\\n     */\\n    function previewWithdraw(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Burns shares from owner and sends exactly assets of underlying tokens to receiver.\\n     *\\n     * - MUST emit the Withdraw event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   withdraw execution, and are accounted for during withdraw.\\n     * - MUST revert if all of assets cannot be withdrawn (due to withdrawal limit being reached, slippage, the owner\\n     *   not having enough shares, etc).\\n     *\\n     * Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\n     * Those methods should be performed separately.\\n     */\\n    function withdraw(\\n        uint256 assets,\\n        address receiver,\\n        address owner\\n    ) external returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the maximum amount of Vault shares that can be redeemed from the owner balance in the Vault,\\n     * through a redeem call.\\n     *\\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\n     * - MUST return balanceOf(owner) if owner is not subject to any withdrawal limit or timelock.\\n     * - MUST NOT revert.\\n     */\\n    function maxRedeem(address owner) external view returns (uint256 maxShares);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their redeemption at the current block,\\n     * given current on-chain conditions.\\n     *\\n     * - MUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call\\n     *   in the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the\\n     *   same transaction.\\n     * - MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the\\n     *   redemption would be accepted, regardless if the user has enough shares, etc.\\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by redeeming.\\n     */\\n    function previewRedeem(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Burns exactly shares from owner and sends assets of underlying tokens to receiver.\\n     *\\n     * - MUST emit the Withdraw event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   redeem execution, and are accounted for during redeem.\\n     * - MUST revert if all of shares cannot be redeemed (due to withdrawal limit being reached, slippage, the owner\\n     *   not having enough shares, etc).\\n     *\\n     * NOTE: some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\n     * Those methods should be performed separately.\\n     */\\n    function redeem(\\n        uint256 shares,\\n        address receiver,\\n        address owner\\n    ) external returns (uint256 assets);\\n}\\n\",\"keccak256\":\"0x9750c6fec736eb3320e85924f36a3060fa4a4ab1758d06d9585e175d164eefdb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC20/ERC20.sol":{"ERC20":{"abi":[{"inputs":[{"internalType":"string","name":"name_","type":"string"},{"internalType":"string","name":"symbol_","type":"string"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"subtractedValue","type":"uint256"}],"name":"decreaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"addedValue","type":"uint256"}],"name":"increaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Implementation of the {IERC20} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. For a generic mechanism see {ERC20PresetMinterPauser}. TIP: For a detailed writeup see our guide https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. We have followed general OpenZeppelin Contracts guidelines: functions revert instead returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC20 applications. Additionally, an {Approval} event is emitted on calls to {transferFrom}. This allows applications to reconstruct the allowance for all accounts just by listening to said events. Other implementations of the EIP may not emit these events, as it isn't required by the specification. Finally, the non-standard {decreaseAllowance} and {increaseAllowance} functions have been added to mitigate the well-known issues around setting allowances. See {IERC20-approve}.","kind":"dev","methods":{"allowance(address,address)":{"details":"See {IERC20-allowance}."},"approve(address,uint256)":{"details":"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."},"balanceOf(address)":{"details":"See {IERC20-balanceOf}."},"constructor":{"details":"Sets the values for {name} and {symbol}. The default value of {decimals} is 18. To select a different value for {decimals} you should overload it. All two of these values are immutable: they can only be set once during construction."},"decimals()":{"details":"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."},"decreaseAllowance(address,uint256)":{"details":"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."},"increaseAllowance(address,uint256)":{"details":"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."},"name()":{"details":"Returns the name of the token."},"symbol()":{"details":"Returns the symbol of the token, usually a shorter version of the name."},"totalSupply()":{"details":"See {IERC20-totalSupply}."},"transfer(address,uint256)":{"details":"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."},"transferFrom(address,address,uint256)":{"details":"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."}},"version":1},"evm":{"bytecode":{"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:2039:11","statements":[{"nodeType":"YulBlock","src":"6:3:11","statements":[]},{"body":{"nodeType":"YulBlock","src":"78:845:11","statements":[{"body":{"nodeType":"YulBlock","src":"127:24:11","statements":[{"expression":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"136:5:11"},{"name":"array","nodeType":"YulIdentifier","src":"143:5:11"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"129:6:11"},"nodeType":"YulFunctionCall","src":"129:20:11"},"nodeType":"YulExpressionStatement","src":"129:20:11"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"106:6:11"},{"kind":"number","nodeType":"YulLiteral","src":"114:4:11","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"102:3:11"},"nodeType":"YulFunctionCall","src":"102:17:11"},{"name":"end","nodeType":"YulIdentifier","src":"121:3:11"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"98:3:11"},"nodeType":"YulFunctionCall","src":"98:27:11"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"91:6:11"},"nodeType":"YulFunctionCall","src":"91:35:11"},"nodeType":"YulIf","src":"88:2:11"},{"nodeType":"YulVariableDeclaration","src":"160:23:11","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"176:6:11"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"170:5:11"},"nodeType":"YulFunctionCall","src":"170:13:11"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"164:2:11","type":""}]},{"nodeType":"YulVariableDeclaration","src":"192:28:11","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"210:2:11","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"214:1:11","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"206:3:11"},"nodeType":"YulFunctionCall","src":"206:10:11"},{"kind":"number","nodeType":"YulLiteral","src":"218:1:11","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"202:3:11"},"nodeType":"YulFunctionCall","src":"202:18:11"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"196:2:11","type":""}]},{"body":{"nodeType":"YulBlock","src":"243:22:11","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"245:16:11"},"nodeType":"YulFunctionCall","src":"245:18:11"},"nodeType":"YulExpressionStatement","src":"245:18:11"}]},"condition":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"235:2:11"},{"name":"_2","nodeType":"YulIdentifier","src":"239:2:11"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"232:2:11"},"nodeType":"YulFunctionCall","src":"232:10:11"},"nodeType":"YulIf","src":"229:2:11"},{"nodeType":"YulVariableDeclaration","src":"274:17:11","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"288:2:11","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"284:3:11"},"nodeType":"YulFunctionCall","src":"284:7:11"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"278:2:11","type":""}]},{"nodeType":"YulVariableDeclaration","src":"300:23:11","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"320:2:11","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"314:5:11"},"nodeType":"YulFunctionCall","src":"314:9:11"},"variables":[{"name":"memPtr","nodeType":"YulTypedName","src":"304:6:11","type":""}]},{"nodeType":"YulVariableDeclaration","src":"332:71:11","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"354:6:11"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"378:2:11"},{"kind":"number","nodeType":"YulLiteral","src":"382:4:11","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"374:3:11"},"nodeType":"YulFunctionCall","src":"374:13:11"},{"name":"_3","nodeType":"YulIdentifier","src":"389:2:11"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"370:3:11"},"nodeType":"YulFunctionCall","src":"370:22:11"},{"kind":"number","nodeType":"YulLiteral","src":"394:2:11","type":"","value":"63"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"366:3:11"},"nodeType":"YulFunctionCall","src":"366:31:11"},{"name":"_3","nodeType":"YulIdentifier","src":"399:2:11"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"362:3:11"},"nodeType":"YulFunctionCall","src":"362:40:11"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"350:3:11"},"nodeType":"YulFunctionCall","src":"350:53:11"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"336:10:11","type":""}]},{"body":{"nodeType":"YulBlock","src":"462:22:11","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"464:16:11"},"nodeType":"YulFunctionCall","src":"464:18:11"},"nodeType":"YulExpressionStatement","src":"464:18:11"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"421:10:11"},{"name":"_2","nodeType":"YulIdentifier","src":"433:2:11"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"418:2:11"},"nodeType":"YulFunctionCall","src":"418:18:11"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"441:10:11"},{"name":"memPtr","nodeType":"YulIdentifier","src":"453:6:11"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"438:2:11"},"nodeType":"YulFunctionCall","src":"438:22:11"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"415:2:11"},"nodeType":"YulFunctionCall","src":"415:46:11"},"nodeType":"YulIf","src":"412:2:11"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"500:2:11","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"504:10:11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"493:6:11"},"nodeType":"YulFunctionCall","src":"493:22:11"},"nodeType":"YulExpressionStatement","src":"493:22:11"},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"531:6:11"},{"name":"_1","nodeType":"YulIdentifier","src":"539:2:11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"524:6:11"},"nodeType":"YulFunctionCall","src":"524:18:11"},"nodeType":"YulExpressionStatement","src":"524:18:11"},{"nodeType":"YulVariableDeclaration","src":"551:14:11","value":{"kind":"number","nodeType":"YulLiteral","src":"561:4:11","type":"","value":"0x20"},"variables":[{"name":"_4","nodeType":"YulTypedName","src":"555:2:11","type":""}]},{"body":{"nodeType":"YulBlock","src":"611:24:11","statements":[{"expression":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"620:5:11"},{"name":"array","nodeType":"YulIdentifier","src":"627:5:11"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"613:6:11"},"nodeType":"YulFunctionCall","src":"613:20:11"},"nodeType":"YulExpressionStatement","src":"613:20:11"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"588:6:11"},{"name":"_1","nodeType":"YulIdentifier","src":"596:2:11"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"584:3:11"},"nodeType":"YulFunctionCall","src":"584:15:11"},{"name":"_4","nodeType":"YulIdentifier","src":"601:2:11"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"580:3:11"},"nodeType":"YulFunctionCall","src":"580:24:11"},{"name":"end","nodeType":"YulIdentifier","src":"606:3:11"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"577:2:11"},"nodeType":"YulFunctionCall","src":"577:33:11"},"nodeType":"YulIf","src":"574:2:11"},{"nodeType":"YulVariableDeclaration","src":"644:14:11","value":{"name":"array","nodeType":"YulIdentifier","src":"653:5:11"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"648:1:11","type":""}]},{"body":{"nodeType":"YulBlock","src":"713:87:11","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"742:6:11"},{"name":"i","nodeType":"YulIdentifier","src":"750:1:11"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"738:3:11"},"nodeType":"YulFunctionCall","src":"738:14:11"},{"name":"_4","nodeType":"YulIdentifier","src":"754:2:11"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"734:3:11"},"nodeType":"YulFunctionCall","src":"734:23:11"},{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"773:6:11"},{"name":"i","nodeType":"YulIdentifier","src":"781:1:11"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"769:3:11"},"nodeType":"YulFunctionCall","src":"769:14:11"},{"name":"_4","nodeType":"YulIdentifier","src":"785:2:11"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"765:3:11"},"nodeType":"YulFunctionCall","src":"765:23:11"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"759:5:11"},"nodeType":"YulFunctionCall","src":"759:30:11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"727:6:11"},"nodeType":"YulFunctionCall","src":"727:63:11"},"nodeType":"YulExpressionStatement","src":"727:63:11"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"678:1:11"},{"name":"_1","nodeType":"YulIdentifier","src":"681:2:11"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"675:2:11"},"nodeType":"YulFunctionCall","src":"675:9:11"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"685:19:11","statements":[{"nodeType":"YulAssignment","src":"687:15:11","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"696:1:11"},{"name":"_4","nodeType":"YulIdentifier","src":"699:2:11"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"692:3:11"},"nodeType":"YulFunctionCall","src":"692:10:11"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"687:1:11"}]}]},"pre":{"nodeType":"YulBlock","src":"671:3:11","statements":[]},"src":"667:133:11"},{"body":{"nodeType":"YulBlock","src":"830:63:11","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"859:6:11"},{"name":"_1","nodeType":"YulIdentifier","src":"867:2:11"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"855:3:11"},"nodeType":"YulFunctionCall","src":"855:15:11"},{"name":"_4","nodeType":"YulIdentifier","src":"872:2:11"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"851:3:11"},"nodeType":"YulFunctionCall","src":"851:24:11"},{"name":"array","nodeType":"YulIdentifier","src":"877:5:11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"844:6:11"},"nodeType":"YulFunctionCall","src":"844:39:11"},"nodeType":"YulExpressionStatement","src":"844:39:11"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"815:1:11"},{"name":"_1","nodeType":"YulIdentifier","src":"818:2:11"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"812:2:11"},"nodeType":"YulFunctionCall","src":"812:9:11"},"nodeType":"YulIf","src":"809:2:11"},{"nodeType":"YulAssignment","src":"902:15:11","value":{"name":"memPtr","nodeType":"YulIdentifier","src":"911:6:11"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"902:5:11"}]}]},"name":"abi_decode_string_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"52:6:11","type":""},{"name":"end","nodeType":"YulTypedName","src":"60:3:11","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"68:5:11","type":""}],"src":"14:909:11"},{"body":{"nodeType":"YulBlock","src":"1046:474:11","statements":[{"body":{"nodeType":"YulBlock","src":"1092:26:11","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1101:6:11"},{"name":"value0","nodeType":"YulIdentifier","src":"1109:6:11"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1094:6:11"},"nodeType":"YulFunctionCall","src":"1094:22:11"},"nodeType":"YulExpressionStatement","src":"1094:22:11"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1067:7:11"},{"name":"headStart","nodeType":"YulIdentifier","src":"1076:9:11"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1063:3:11"},"nodeType":"YulFunctionCall","src":"1063:23:11"},{"kind":"number","nodeType":"YulLiteral","src":"1088:2:11","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1059:3:11"},"nodeType":"YulFunctionCall","src":"1059:32:11"},"nodeType":"YulIf","src":"1056:2:11"},{"nodeType":"YulVariableDeclaration","src":"1127:30:11","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1147:9:11"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1141:5:11"},"nodeType":"YulFunctionCall","src":"1141:16:11"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1131:6:11","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1166:28:11","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1184:2:11","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"1188:1:11","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1180:3:11"},"nodeType":"YulFunctionCall","src":"1180:10:11"},{"kind":"number","nodeType":"YulLiteral","src":"1192:1:11","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1176:3:11"},"nodeType":"YulFunctionCall","src":"1176:18:11"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"1170:2:11","type":""}]},{"body":{"nodeType":"YulBlock","src":"1221:26:11","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1230:6:11"},{"name":"value0","nodeType":"YulIdentifier","src":"1238:6:11"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1223:6:11"},"nodeType":"YulFunctionCall","src":"1223:22:11"},"nodeType":"YulExpressionStatement","src":"1223:22:11"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1209:6:11"},{"name":"_1","nodeType":"YulIdentifier","src":"1217:2:11"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1206:2:11"},"nodeType":"YulFunctionCall","src":"1206:14:11"},"nodeType":"YulIf","src":"1203:2:11"},{"nodeType":"YulAssignment","src":"1256:71:11","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1299:9:11"},{"name":"offset","nodeType":"YulIdentifier","src":"1310:6:11"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1295:3:11"},"nodeType":"YulFunctionCall","src":"1295:22:11"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1319:7:11"}],"functionName":{"name":"abi_decode_string_fromMemory","nodeType":"YulIdentifier","src":"1266:28:11"},"nodeType":"YulFunctionCall","src":"1266:61:11"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1256:6:11"}]},{"nodeType":"YulVariableDeclaration","src":"1336:41:11","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1362:9:11"},{"kind":"number","nodeType":"YulLiteral","src":"1373:2:11","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1358:3:11"},"nodeType":"YulFunctionCall","src":"1358:18:11"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1352:5:11"},"nodeType":"YulFunctionCall","src":"1352:25:11"},"variables":[{"name":"offset_1","nodeType":"YulTypedName","src":"1340:8:11","type":""}]},{"body":{"nodeType":"YulBlock","src":"1406:26:11","statements":[{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"1415:6:11"},{"name":"value1","nodeType":"YulIdentifier","src":"1423:6:11"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1408:6:11"},"nodeType":"YulFunctionCall","src":"1408:22:11"},"nodeType":"YulExpressionStatement","src":"1408:22:11"}]},"condition":{"arguments":[{"name":"offset_1","nodeType":"YulIdentifier","src":"1392:8:11"},{"name":"_1","nodeType":"YulIdentifier","src":"1402:2:11"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1389:2:11"},"nodeType":"YulFunctionCall","src":"1389:16:11"},"nodeType":"YulIf","src":"1386:2:11"},{"nodeType":"YulAssignment","src":"1441:73:11","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1484:9:11"},{"name":"offset_1","nodeType":"YulIdentifier","src":"1495:8:11"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1480:3:11"},"nodeType":"YulFunctionCall","src":"1480:24:11"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1506:7:11"}],"functionName":{"name":"abi_decode_string_fromMemory","nodeType":"YulIdentifier","src":"1451:28:11"},"nodeType":"YulFunctionCall","src":"1451:63:11"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"1441:6:11"}]}]},"name":"abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1004:9:11","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1015:7:11","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1027:6:11","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1035:6:11","type":""}],"src":"928:592:11"},{"body":{"nodeType":"YulBlock","src":"1580:325:11","statements":[{"nodeType":"YulAssignment","src":"1590:22:11","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1604:1:11","type":"","value":"1"},{"name":"data","nodeType":"YulIdentifier","src":"1607:4:11"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"1600:3:11"},"nodeType":"YulFunctionCall","src":"1600:12:11"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"1590:6:11"}]},{"nodeType":"YulVariableDeclaration","src":"1621:38:11","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"1651:4:11"},{"kind":"number","nodeType":"YulLiteral","src":"1657:1:11","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1647:3:11"},"nodeType":"YulFunctionCall","src":"1647:12:11"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"1625:18:11","type":""}]},{"body":{"nodeType":"YulBlock","src":"1698:31:11","statements":[{"nodeType":"YulAssignment","src":"1700:27:11","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1714:6:11"},{"kind":"number","nodeType":"YulLiteral","src":"1722:4:11","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1710:3:11"},"nodeType":"YulFunctionCall","src":"1710:17:11"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"1700:6:11"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"1678:18:11"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1671:6:11"},"nodeType":"YulFunctionCall","src":"1671:26:11"},"nodeType":"YulIf","src":"1668:2:11"},{"body":{"nodeType":"YulBlock","src":"1788:111:11","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1809:1:11","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1816:3:11","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"1821:10:11","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1812:3:11"},"nodeType":"YulFunctionCall","src":"1812:20:11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1802:6:11"},"nodeType":"YulFunctionCall","src":"1802:31:11"},"nodeType":"YulExpressionStatement","src":"1802:31:11"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1853:1:11","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"1856:4:11","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1846:6:11"},"nodeType":"YulFunctionCall","src":"1846:15:11"},"nodeType":"YulExpressionStatement","src":"1846:15:11"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1881:1:11","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1884:4:11","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1874:6:11"},"nodeType":"YulFunctionCall","src":"1874:15:11"},"nodeType":"YulExpressionStatement","src":"1874:15:11"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"1744:18:11"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1767:6:11"},{"kind":"number","nodeType":"YulLiteral","src":"1775:2:11","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1764:2:11"},"nodeType":"YulFunctionCall","src":"1764:14:11"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"1741:2:11"},"nodeType":"YulFunctionCall","src":"1741:38:11"},"nodeType":"YulIf","src":"1738:2:11"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"1560:4:11","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"1569:6:11","type":""}],"src":"1525:380:11"},{"body":{"nodeType":"YulBlock","src":"1942:95:11","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1959:1:11","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1966:3:11","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"1971:10:11","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1962:3:11"},"nodeType":"YulFunctionCall","src":"1962:20:11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1952:6:11"},"nodeType":"YulFunctionCall","src":"1952:31:11"},"nodeType":"YulExpressionStatement","src":"1952:31:11"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1999:1:11","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"2002:4:11","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1992:6:11"},"nodeType":"YulFunctionCall","src":"1992:15:11"},"nodeType":"YulExpressionStatement","src":"1992:15:11"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2023:1:11","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2026:4:11","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2016:6:11"},"nodeType":"YulFunctionCall","src":"2016:15:11"},"nodeType":"YulExpressionStatement","src":"2016:15:11"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"1910:127:11"}]},"contents":"{\n    { }\n    function abi_decode_string_fromMemory(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(array, array) }\n        let _1 := mload(offset)\n        let _2 := sub(shl(64, 1), 1)\n        if gt(_1, _2) { panic_error_0x41() }\n        let _3 := not(31)\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(and(add(_1, 0x1f), _3), 63), _3))\n        if or(gt(newFreePtr, _2), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        mstore(memPtr, _1)\n        let _4 := 0x20\n        if gt(add(add(offset, _1), _4), end) { revert(array, array) }\n        let i := array\n        for { } lt(i, _1) { i := add(i, _4) }\n        {\n            mstore(add(add(memPtr, i), _4), mload(add(add(offset, i), _4)))\n        }\n        if gt(i, _1)\n        {\n            mstore(add(add(memPtr, _1), _4), array)\n        }\n        array := memPtr\n    }\n    function abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr_fromMemory(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(value0, value0) }\n        let offset := mload(headStart)\n        let _1 := sub(shl(64, 1), 1)\n        if gt(offset, _1) { revert(value0, value0) }\n        value0 := abi_decode_string_fromMemory(add(headStart, offset), dataEnd)\n        let offset_1 := mload(add(headStart, 32))\n        if gt(offset_1, _1) { revert(value1, value1) }\n        value1 := abi_decode_string_fromMemory(add(headStart, offset_1), dataEnd)\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n}","id":11,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"60806040523480156200001157600080fd5b5060405162000b0a38038062000b0a8339810160408190526200003491620001c1565b81516200004990600390602085019062000068565b5080516200005f90600490602084019062000068565b5050506200027b565b828054620000769062000228565b90600052602060002090601f0160209004810192826200009a5760008555620000e5565b82601f10620000b557805160ff1916838001178555620000e5565b82800160010185558215620000e5579182015b82811115620000e5578251825591602001919060010190620000c8565b50620000f3929150620000f7565b5090565b5b80821115620000f35760008155600101620000f8565b600082601f8301126200011f578081fd5b81516001600160401b03808211156200013c576200013c62000265565b604051601f8301601f19908116603f0116810190828211818310171562000167576200016762000265565b8160405283815260209250868385880101111562000183578485fd5b8491505b83821015620001a6578582018301518183018401529082019062000187565b83821115620001b757848385830101525b9695505050505050565b60008060408385031215620001d4578182fd5b82516001600160401b0380821115620001eb578384fd5b620001f9868387016200010e565b935060208501519150808211156200020f578283fd5b506200021e858286016200010e565b9150509250929050565b600181811c908216806200023d57607f821691505b602082108114156200025f57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b61087f806200028b6000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80633950935111610071578063395093511461012357806370a082311461013657806395d89b411461015f578063a457c2d714610167578063a9059cbb1461017a578063dd62ed3e1461018d57600080fd5b806306fdde03146100ae578063095ea7b3146100cc57806318160ddd146100ef57806323b872dd14610101578063313ce56714610114575b600080fd5b6100b66101a0565b6040516100c39190610797565b60405180910390f35b6100df6100da36600461076e565b610232565b60405190151581526020016100c3565b6002545b6040519081526020016100c3565b6100df61010f366004610733565b61024a565b604051601281526020016100c3565b6100df61013136600461076e565b61026e565b6100f36101443660046106e0565b6001600160a01b031660009081526020819052604090205490565b6100b6610290565b6100df61017536600461076e565b61029f565b6100df61018836600461076e565b61031f565b6100f361019b366004610701565b61032d565b6060600380546101af9061080e565b80601f01602080910402602001604051908101604052809291908181526020018280546101db9061080e565b80156102285780601f106101fd57610100808354040283529160200191610228565b820191906000526020600020905b81548152906001019060200180831161020b57829003601f168201915b5050505050905090565b600033610240818585610358565b5060019392505050565b60003361025885828561047c565b6102638585856104f6565b506001949350505050565b600033610240818585610281838361032d565b61028b91906107ea565b610358565b6060600480546101af9061080e565b600033816102ad828661032d565b9050838110156103125760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084015b60405180910390fd5b6102638286868403610358565b6000336102408185856104f6565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6001600160a01b0383166103ba5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610309565b6001600160a01b03821661041b5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610309565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6000610488848461032d565b905060001981146104f057818110156104e35760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610309565b6104f08484848403610358565b50505050565b6001600160a01b03831661055a5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610309565b6001600160a01b0382166105bc5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610309565b6001600160a01b038316600090815260208190526040902054818110156106345760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610309565b6001600160a01b0380851660009081526020819052604080822085850390559185168152908120805484929061066b9084906107ea565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516106b791815260200190565b60405180910390a36104f0565b80356001600160a01b03811681146106db57600080fd5b919050565b6000602082840312156106f1578081fd5b6106fa826106c4565b9392505050565b60008060408385031215610713578081fd5b61071c836106c4565b915061072a602084016106c4565b90509250929050565b600080600060608486031215610747578081fd5b610750846106c4565b925061075e602085016106c4565b9150604084013590509250925092565b60008060408385031215610780578182fd5b610789836106c4565b946020939093013593505050565b6000602080835283518082850152825b818110156107c3578581018301518582016040015282016107a7565b818111156107d45783604083870101525b50601f01601f1916929092016040019392505050565b6000821982111561080957634e487b7160e01b81526011600452602481fd5b500190565b600181811c9082168061082257607f821691505b6020821081141561084357634e487b7160e01b600052602260045260246000fd5b5091905056fea26469706673582212200c20f9188365815ab1f07b0058a33849190f72cfd6b1adaf77fca2f02a2d38cb64736f6c63430008040033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0xB0A CODESIZE SUB DUP1 PUSH3 0xB0A DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x34 SWAP2 PUSH3 0x1C1 JUMP JUMPDEST DUP2 MLOAD PUSH3 0x49 SWAP1 PUSH1 0x3 SWAP1 PUSH1 0x20 DUP6 ADD SWAP1 PUSH3 0x68 JUMP JUMPDEST POP DUP1 MLOAD PUSH3 0x5F SWAP1 PUSH1 0x4 SWAP1 PUSH1 0x20 DUP5 ADD SWAP1 PUSH3 0x68 JUMP JUMPDEST POP POP POP PUSH3 0x27B JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH3 0x76 SWAP1 PUSH3 0x228 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH3 0x9A JUMPI PUSH1 0x0 DUP6 SSTORE PUSH3 0xE5 JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH3 0xB5 JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH3 0xE5 JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH3 0xE5 JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH3 0xE5 JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH3 0xC8 JUMP JUMPDEST POP PUSH3 0xF3 SWAP3 SWAP2 POP PUSH3 0xF7 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH3 0xF3 JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH3 0xF8 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x11F JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH3 0x13C JUMPI PUSH3 0x13C PUSH3 0x265 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP4 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP3 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH3 0x167 JUMPI PUSH3 0x167 PUSH3 0x265 JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP4 DUP2 MSTORE PUSH1 0x20 SWAP3 POP DUP7 DUP4 DUP6 DUP9 ADD ADD GT ISZERO PUSH3 0x183 JUMPI DUP5 DUP6 REVERT JUMPDEST DUP5 SWAP2 POP JUMPDEST DUP4 DUP3 LT ISZERO PUSH3 0x1A6 JUMPI DUP6 DUP3 ADD DUP4 ADD MLOAD DUP2 DUP4 ADD DUP5 ADD MSTORE SWAP1 DUP3 ADD SWAP1 PUSH3 0x187 JUMP JUMPDEST DUP4 DUP3 GT ISZERO PUSH3 0x1B7 JUMPI DUP5 DUP4 DUP6 DUP4 ADD ADD MSTORE JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH3 0x1D4 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH3 0x1EB JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH3 0x1F9 DUP7 DUP4 DUP8 ADD PUSH3 0x10E JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD MLOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH3 0x20F JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH3 0x21E DUP6 DUP3 DUP7 ADD PUSH3 0x10E JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH3 0x23D JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH3 0x25F JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x87F DUP1 PUSH3 0x28B PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xA9 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x39509351 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x123 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x136 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x15F JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x167 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x17A JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x18D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xAE JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0xCC JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0xEF JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x101 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x114 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB6 PUSH2 0x1A0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xC3 SWAP2 SWAP1 PUSH2 0x797 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xDF PUSH2 0xDA CALLDATASIZE PUSH1 0x4 PUSH2 0x76E JUMP JUMPDEST PUSH2 0x232 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xC3 JUMP JUMPDEST PUSH1 0x2 SLOAD JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xC3 JUMP JUMPDEST PUSH2 0xDF PUSH2 0x10F CALLDATASIZE PUSH1 0x4 PUSH2 0x733 JUMP JUMPDEST PUSH2 0x24A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x12 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xC3 JUMP JUMPDEST PUSH2 0xDF PUSH2 0x131 CALLDATASIZE PUSH1 0x4 PUSH2 0x76E JUMP JUMPDEST PUSH2 0x26E JUMP JUMPDEST PUSH2 0xF3 PUSH2 0x144 CALLDATASIZE PUSH1 0x4 PUSH2 0x6E0 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0xB6 PUSH2 0x290 JUMP JUMPDEST PUSH2 0xDF PUSH2 0x175 CALLDATASIZE PUSH1 0x4 PUSH2 0x76E JUMP JUMPDEST PUSH2 0x29F JUMP JUMPDEST PUSH2 0xDF PUSH2 0x188 CALLDATASIZE PUSH1 0x4 PUSH2 0x76E JUMP JUMPDEST PUSH2 0x31F JUMP JUMPDEST PUSH2 0xF3 PUSH2 0x19B CALLDATASIZE PUSH1 0x4 PUSH2 0x701 JUMP JUMPDEST PUSH2 0x32D JUMP JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH2 0x1AF SWAP1 PUSH2 0x80E JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1DB SWAP1 PUSH2 0x80E JUMP JUMPDEST DUP1 ISZERO PUSH2 0x228 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1FD JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x228 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x20B JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x240 DUP2 DUP6 DUP6 PUSH2 0x358 JUMP JUMPDEST POP PUSH1 0x1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x258 DUP6 DUP3 DUP6 PUSH2 0x47C JUMP JUMPDEST PUSH2 0x263 DUP6 DUP6 DUP6 PUSH2 0x4F6 JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x240 DUP2 DUP6 DUP6 PUSH2 0x281 DUP4 DUP4 PUSH2 0x32D JUMP JUMPDEST PUSH2 0x28B SWAP2 SWAP1 PUSH2 0x7EA JUMP JUMPDEST PUSH2 0x358 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x4 DUP1 SLOAD PUSH2 0x1AF SWAP1 PUSH2 0x80E JUMP JUMPDEST PUSH1 0x0 CALLER DUP2 PUSH2 0x2AD DUP3 DUP7 PUSH2 0x32D JUMP JUMPDEST SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0x312 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x207A65726F PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x263 DUP3 DUP7 DUP7 DUP5 SUB PUSH2 0x358 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x240 DUP2 DUP6 DUP6 PUSH2 0x4F6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x3BA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x309 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x41B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x7373 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x309 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP6 SWAP1 SSTORE SWAP1 MLOAD DUP5 DUP2 MSTORE PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x488 DUP5 DUP5 PUSH2 0x32D JUMP JUMPDEST SWAP1 POP PUSH1 0x0 NOT DUP2 EQ PUSH2 0x4F0 JUMPI DUP2 DUP2 LT ISZERO PUSH2 0x4E3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x309 JUMP JUMPDEST PUSH2 0x4F0 DUP5 DUP5 DUP5 DUP5 SUB PUSH2 0x358 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x55A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x6472657373 PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x309 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x5BC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x44 DUP3 ADD MSTORE PUSH3 0x657373 PUSH1 0xE8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x309 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0x634 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x616C616E6365 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x309 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP6 DUP6 SUB SWAP1 SSTORE SWAP2 DUP6 AND DUP2 MSTORE SWAP1 DUP2 KECCAK256 DUP1 SLOAD DUP5 SWAP3 SWAP1 PUSH2 0x66B SWAP1 DUP5 SWAP1 PUSH2 0x7EA JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP5 PUSH1 0x40 MLOAD PUSH2 0x6B7 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0x4F0 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x6DB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x6F1 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x6FA DUP3 PUSH2 0x6C4 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x713 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x71C DUP4 PUSH2 0x6C4 JUMP JUMPDEST SWAP2 POP PUSH2 0x72A PUSH1 0x20 DUP5 ADD PUSH2 0x6C4 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x747 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x750 DUP5 PUSH2 0x6C4 JUMP JUMPDEST SWAP3 POP PUSH2 0x75E PUSH1 0x20 DUP6 ADD PUSH2 0x6C4 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x780 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x789 DUP4 PUSH2 0x6C4 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 DUP3 DUP6 ADD MSTORE DUP3 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x7C3 JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP3 ADD PUSH2 0x7A7 JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0x7D4 JUMPI DUP4 PUSH1 0x40 DUP4 DUP8 ADD ADD MSTORE JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x40 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x809 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 DUP2 REVERT JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x822 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0x843 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC KECCAK256 0xF9 XOR DUP4 PUSH6 0x815AB1F07B00 PC LOG3 CODESIZE 0x49 NOT 0xF PUSH19 0xCFD6B1ADAF77FCA2F02A2D38CB64736F6C6343 STOP ADDMOD DIV STOP CALLER ","sourceMap":"1403:11214:1:-:0;;;1978:113;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2044:13;;;;:5;;:13;;;;;:::i;:::-;-1:-1:-1;2067:17:1;;;;:7;;:17;;;;;:::i;:::-;;1978:113;;1403:11214;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1403:11214:1;;;-1:-1:-1;1403:11214:1;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;14:909:11;68:5;121:3;114:4;106:6;102:17;98:27;88:2;;143:5;136;129:20;88:2;170:13;;-1:-1:-1;;;;;232:10:11;;;229:2;;;245:18;;:::i;:::-;320:2;314:9;288:2;374:13;;-1:-1:-1;;370:22:11;;;394:2;366:31;362:40;350:53;;;418:18;;;438:22;;;415:46;412:2;;;464:18;;:::i;:::-;504:10;500:2;493:22;539:2;531:6;524:18;561:4;551:14;;606:3;601:2;596;588:6;584:15;580:24;577:33;574:2;;;627:5;620;613:20;574:2;653:5;644:14;;667:133;681:2;678:1;675:9;667:133;;;769:14;;;765:23;;759:30;738:14;;;734:23;;727:63;692:10;;;;667:133;;;818:2;815:1;812:9;809:2;;;877:5;872:2;867;859:6;855:15;851:24;844:39;809:2;911:6;78:845;-1:-1:-1;;;;;;78:845:11:o;928:592::-;1027:6;1035;1088:2;1076:9;1067:7;1063:23;1059:32;1056:2;;;1109:6;1101;1094:22;1056:2;1141:16;;-1:-1:-1;;;;;1206:14:11;;;1203:2;;;1238:6;1230;1223:22;1203:2;1266:61;1319:7;1310:6;1299:9;1295:22;1266:61;:::i;:::-;1256:71;;1373:2;1362:9;1358:18;1352:25;1336:41;;1402:2;1392:8;1389:16;1386:2;;;1423:6;1415;1408:22;1386:2;;1451:63;1506:7;1495:8;1484:9;1480:24;1451:63;:::i;:::-;1441:73;;;1046:474;;;;;:::o;1525:380::-;1604:1;1600:12;;;;1647;;;1668:2;;1722:4;1714:6;1710:17;1700:27;;1668:2;1775;1767:6;1764:14;1744:18;1741:38;1738:2;;;1821:10;1816:3;1812:20;1809:1;1802:31;1856:4;1853:1;1846:15;1884:4;1881:1;1874:15;1738:2;;1580:325;;;:::o;1910:127::-;1971:10;1966:3;1962:20;1959:1;1952:31;2002:4;1999:1;1992:15;2026:4;2023:1;2016:15;1942:95;1403:11214:1;;;;;;"},"deployedBytecode":{"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:5856:11","statements":[{"nodeType":"YulBlock","src":"6:3:11","statements":[]},{"body":{"nodeType":"YulBlock","src":"63:124:11","statements":[{"nodeType":"YulAssignment","src":"73:29:11","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"95:6:11"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"82:12:11"},"nodeType":"YulFunctionCall","src":"82:20:11"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"73:5:11"}]},{"body":{"nodeType":"YulBlock","src":"165:16:11","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"174:1:11","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"177:1:11","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"167:6:11"},"nodeType":"YulFunctionCall","src":"167:12:11"},"nodeType":"YulExpressionStatement","src":"167:12:11"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"124:5:11"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"135:5:11"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"150:3:11","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"155:1:11","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"146:3:11"},"nodeType":"YulFunctionCall","src":"146:11:11"},{"kind":"number","nodeType":"YulLiteral","src":"159:1:11","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"142:3:11"},"nodeType":"YulFunctionCall","src":"142:19:11"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"131:3:11"},"nodeType":"YulFunctionCall","src":"131:31:11"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"121:2:11"},"nodeType":"YulFunctionCall","src":"121:42:11"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"114:6:11"},"nodeType":"YulFunctionCall","src":"114:50:11"},"nodeType":"YulIf","src":"111:2:11"}]},"name":"abi_decode_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"42:6:11","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"53:5:11","type":""}],"src":"14:173:11"},{"body":{"nodeType":"YulBlock","src":"262:126:11","statements":[{"body":{"nodeType":"YulBlock","src":"308:26:11","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"317:6:11"},{"name":"value0","nodeType":"YulIdentifier","src":"325:6:11"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"310:6:11"},"nodeType":"YulFunctionCall","src":"310:22:11"},"nodeType":"YulExpressionStatement","src":"310:22:11"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"283:7:11"},{"name":"headStart","nodeType":"YulIdentifier","src":"292:9:11"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"279:3:11"},"nodeType":"YulFunctionCall","src":"279:23:11"},{"kind":"number","nodeType":"YulLiteral","src":"304:2:11","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"275:3:11"},"nodeType":"YulFunctionCall","src":"275:32:11"},"nodeType":"YulIf","src":"272:2:11"},{"nodeType":"YulAssignment","src":"343:39:11","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"372:9:11"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"353:18:11"},"nodeType":"YulFunctionCall","src":"353:29:11"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"343:6:11"}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"228:9:11","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"239:7:11","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"251:6:11","type":""}],"src":"192:196:11"},{"body":{"nodeType":"YulBlock","src":"480:183:11","statements":[{"body":{"nodeType":"YulBlock","src":"526:26:11","statements":[{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"535:6:11"},{"name":"value1","nodeType":"YulIdentifier","src":"543:6:11"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"528:6:11"},"nodeType":"YulFunctionCall","src":"528:22:11"},"nodeType":"YulExpressionStatement","src":"528:22:11"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"501:7:11"},{"name":"headStart","nodeType":"YulIdentifier","src":"510:9:11"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"497:3:11"},"nodeType":"YulFunctionCall","src":"497:23:11"},{"kind":"number","nodeType":"YulLiteral","src":"522:2:11","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"493:3:11"},"nodeType":"YulFunctionCall","src":"493:32:11"},"nodeType":"YulIf","src":"490:2:11"},{"nodeType":"YulAssignment","src":"561:39:11","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"590:9:11"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"571:18:11"},"nodeType":"YulFunctionCall","src":"571:29:11"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"561:6:11"}]},{"nodeType":"YulAssignment","src":"609:48:11","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"642:9:11"},{"kind":"number","nodeType":"YulLiteral","src":"653:2:11","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"638:3:11"},"nodeType":"YulFunctionCall","src":"638:18:11"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"619:18:11"},"nodeType":"YulFunctionCall","src":"619:38:11"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"609:6:11"}]}]},"name":"abi_decode_tuple_t_addresst_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"438:9:11","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"449:7:11","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"461:6:11","type":""},{"name":"value1","nodeType":"YulTypedName","src":"469:6:11","type":""}],"src":"393:270:11"},{"body":{"nodeType":"YulBlock","src":"772:234:11","statements":[{"body":{"nodeType":"YulBlock","src":"818:26:11","statements":[{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"827:6:11"},{"name":"value2","nodeType":"YulIdentifier","src":"835:6:11"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"820:6:11"},"nodeType":"YulFunctionCall","src":"820:22:11"},"nodeType":"YulExpressionStatement","src":"820:22:11"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"793:7:11"},{"name":"headStart","nodeType":"YulIdentifier","src":"802:9:11"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"789:3:11"},"nodeType":"YulFunctionCall","src":"789:23:11"},{"kind":"number","nodeType":"YulLiteral","src":"814:2:11","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"785:3:11"},"nodeType":"YulFunctionCall","src":"785:32:11"},"nodeType":"YulIf","src":"782:2:11"},{"nodeType":"YulAssignment","src":"853:39:11","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"882:9:11"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"863:18:11"},"nodeType":"YulFunctionCall","src":"863:29:11"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"853:6:11"}]},{"nodeType":"YulAssignment","src":"901:48:11","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"934:9:11"},{"kind":"number","nodeType":"YulLiteral","src":"945:2:11","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"930:3:11"},"nodeType":"YulFunctionCall","src":"930:18:11"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"911:18:11"},"nodeType":"YulFunctionCall","src":"911:38:11"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"901:6:11"}]},{"nodeType":"YulAssignment","src":"958:42:11","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"985:9:11"},{"kind":"number","nodeType":"YulLiteral","src":"996:2:11","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"981:3:11"},"nodeType":"YulFunctionCall","src":"981:18:11"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"968:12:11"},"nodeType":"YulFunctionCall","src":"968:32:11"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"958:6:11"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"722:9:11","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"733:7:11","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"745:6:11","type":""},{"name":"value1","nodeType":"YulTypedName","src":"753:6:11","type":""},{"name":"value2","nodeType":"YulTypedName","src":"761:6:11","type":""}],"src":"668:338:11"},{"body":{"nodeType":"YulBlock","src":"1098:177:11","statements":[{"body":{"nodeType":"YulBlock","src":"1144:26:11","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1153:6:11"},{"name":"value0","nodeType":"YulIdentifier","src":"1161:6:11"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1146:6:11"},"nodeType":"YulFunctionCall","src":"1146:22:11"},"nodeType":"YulExpressionStatement","src":"1146:22:11"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1119:7:11"},{"name":"headStart","nodeType":"YulIdentifier","src":"1128:9:11"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1115:3:11"},"nodeType":"YulFunctionCall","src":"1115:23:11"},{"kind":"number","nodeType":"YulLiteral","src":"1140:2:11","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1111:3:11"},"nodeType":"YulFunctionCall","src":"1111:32:11"},"nodeType":"YulIf","src":"1108:2:11"},{"nodeType":"YulAssignment","src":"1179:39:11","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1208:9:11"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"1189:18:11"},"nodeType":"YulFunctionCall","src":"1189:29:11"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1179:6:11"}]},{"nodeType":"YulAssignment","src":"1227:42:11","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1254:9:11"},{"kind":"number","nodeType":"YulLiteral","src":"1265:2:11","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1250:3:11"},"nodeType":"YulFunctionCall","src":"1250:18:11"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1237:12:11"},"nodeType":"YulFunctionCall","src":"1237:32:11"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"1227:6:11"}]}]},"name":"abi_decode_tuple_t_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1056:9:11","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1067:7:11","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1079:6:11","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1087:6:11","type":""}],"src":"1011:264:11"},{"body":{"nodeType":"YulBlock","src":"1375:92:11","statements":[{"nodeType":"YulAssignment","src":"1385:26:11","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1397:9:11"},{"kind":"number","nodeType":"YulLiteral","src":"1408:2:11","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1393:3:11"},"nodeType":"YulFunctionCall","src":"1393:18:11"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1385:4:11"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1427:9:11"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1452:6:11"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1445:6:11"},"nodeType":"YulFunctionCall","src":"1445:14:11"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1438:6:11"},"nodeType":"YulFunctionCall","src":"1438:22:11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1420:6:11"},"nodeType":"YulFunctionCall","src":"1420:41:11"},"nodeType":"YulExpressionStatement","src":"1420:41:11"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1344:9:11","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1355:6:11","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1366:4:11","type":""}],"src":"1280:187:11"},{"body":{"nodeType":"YulBlock","src":"1593:482:11","statements":[{"nodeType":"YulVariableDeclaration","src":"1603:12:11","value":{"kind":"number","nodeType":"YulLiteral","src":"1613:2:11","type":"","value":"32"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"1607:2:11","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1631:9:11"},{"name":"_1","nodeType":"YulIdentifier","src":"1642:2:11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1624:6:11"},"nodeType":"YulFunctionCall","src":"1624:21:11"},"nodeType":"YulExpressionStatement","src":"1624:21:11"},{"nodeType":"YulVariableDeclaration","src":"1654:27:11","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1674:6:11"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1668:5:11"},"nodeType":"YulFunctionCall","src":"1668:13:11"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"1658:6:11","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1701:9:11"},{"name":"_1","nodeType":"YulIdentifier","src":"1712:2:11"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1697:3:11"},"nodeType":"YulFunctionCall","src":"1697:18:11"},{"name":"length","nodeType":"YulIdentifier","src":"1717:6:11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1690:6:11"},"nodeType":"YulFunctionCall","src":"1690:34:11"},"nodeType":"YulExpressionStatement","src":"1690:34:11"},{"nodeType":"YulVariableDeclaration","src":"1733:13:11","value":{"name":"tail","nodeType":"YulIdentifier","src":"1742:4:11"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"1737:1:11","type":""}]},{"body":{"nodeType":"YulBlock","src":"1805:90:11","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1834:9:11"},{"name":"i","nodeType":"YulIdentifier","src":"1845:1:11"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1830:3:11"},"nodeType":"YulFunctionCall","src":"1830:17:11"},{"kind":"number","nodeType":"YulLiteral","src":"1849:2:11","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1826:3:11"},"nodeType":"YulFunctionCall","src":"1826:26:11"},{"arguments":[{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1868:6:11"},{"name":"i","nodeType":"YulIdentifier","src":"1876:1:11"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1864:3:11"},"nodeType":"YulFunctionCall","src":"1864:14:11"},{"name":"_1","nodeType":"YulIdentifier","src":"1880:2:11"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1860:3:11"},"nodeType":"YulFunctionCall","src":"1860:23:11"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1854:5:11"},"nodeType":"YulFunctionCall","src":"1854:30:11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1819:6:11"},"nodeType":"YulFunctionCall","src":"1819:66:11"},"nodeType":"YulExpressionStatement","src":"1819:66:11"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"1766:1:11"},{"name":"length","nodeType":"YulIdentifier","src":"1769:6:11"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1763:2:11"},"nodeType":"YulFunctionCall","src":"1763:13:11"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"1777:19:11","statements":[{"nodeType":"YulAssignment","src":"1779:15:11","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"1788:1:11"},{"name":"_1","nodeType":"YulIdentifier","src":"1791:2:11"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1784:3:11"},"nodeType":"YulFunctionCall","src":"1784:10:11"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"1779:1:11"}]}]},"pre":{"nodeType":"YulBlock","src":"1759:3:11","statements":[]},"src":"1755:140:11"},{"body":{"nodeType":"YulBlock","src":"1929:69:11","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1958:9:11"},{"name":"length","nodeType":"YulIdentifier","src":"1969:6:11"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1954:3:11"},"nodeType":"YulFunctionCall","src":"1954:22:11"},{"kind":"number","nodeType":"YulLiteral","src":"1978:2:11","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1950:3:11"},"nodeType":"YulFunctionCall","src":"1950:31:11"},{"name":"tail","nodeType":"YulIdentifier","src":"1983:4:11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1943:6:11"},"nodeType":"YulFunctionCall","src":"1943:45:11"},"nodeType":"YulExpressionStatement","src":"1943:45:11"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"1910:1:11"},{"name":"length","nodeType":"YulIdentifier","src":"1913:6:11"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1907:2:11"},"nodeType":"YulFunctionCall","src":"1907:13:11"},"nodeType":"YulIf","src":"1904:2:11"},{"nodeType":"YulAssignment","src":"2007:62:11","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2023:9:11"},{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2042:6:11"},{"kind":"number","nodeType":"YulLiteral","src":"2050:2:11","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2038:3:11"},"nodeType":"YulFunctionCall","src":"2038:15:11"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2059:2:11","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2055:3:11"},"nodeType":"YulFunctionCall","src":"2055:7:11"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2034:3:11"},"nodeType":"YulFunctionCall","src":"2034:29:11"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2019:3:11"},"nodeType":"YulFunctionCall","src":"2019:45:11"},{"kind":"number","nodeType":"YulLiteral","src":"2066:2:11","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2015:3:11"},"nodeType":"YulFunctionCall","src":"2015:54:11"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2007:4:11"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1562:9:11","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1573:6:11","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1584:4:11","type":""}],"src":"1472:603:11"},{"body":{"nodeType":"YulBlock","src":"2254:225:11","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2271:9:11"},{"kind":"number","nodeType":"YulLiteral","src":"2282:2:11","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2264:6:11"},"nodeType":"YulFunctionCall","src":"2264:21:11"},"nodeType":"YulExpressionStatement","src":"2264:21:11"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2305:9:11"},{"kind":"number","nodeType":"YulLiteral","src":"2316:2:11","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2301:3:11"},"nodeType":"YulFunctionCall","src":"2301:18:11"},{"kind":"number","nodeType":"YulLiteral","src":"2321:2:11","type":"","value":"35"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2294:6:11"},"nodeType":"YulFunctionCall","src":"2294:30:11"},"nodeType":"YulExpressionStatement","src":"2294:30:11"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2344:9:11"},{"kind":"number","nodeType":"YulLiteral","src":"2355:2:11","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2340:3:11"},"nodeType":"YulFunctionCall","src":"2340:18:11"},{"kind":"string","nodeType":"YulLiteral","src":"2360:34:11","type":"","value":"ERC20: transfer to the zero addr"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2333:6:11"},"nodeType":"YulFunctionCall","src":"2333:62:11"},"nodeType":"YulExpressionStatement","src":"2333:62:11"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2415:9:11"},{"kind":"number","nodeType":"YulLiteral","src":"2426:2:11","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2411:3:11"},"nodeType":"YulFunctionCall","src":"2411:18:11"},{"kind":"string","nodeType":"YulLiteral","src":"2431:5:11","type":"","value":"ess"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2404:6:11"},"nodeType":"YulFunctionCall","src":"2404:33:11"},"nodeType":"YulExpressionStatement","src":"2404:33:11"},{"nodeType":"YulAssignment","src":"2446:27:11","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2458:9:11"},{"kind":"number","nodeType":"YulLiteral","src":"2469:3:11","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2454:3:11"},"nodeType":"YulFunctionCall","src":"2454:19:11"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2446:4:11"}]}]},"name":"abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2231:9:11","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2245:4:11","type":""}],"src":"2080:399:11"},{"body":{"nodeType":"YulBlock","src":"2658:224:11","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2675:9:11"},{"kind":"number","nodeType":"YulLiteral","src":"2686:2:11","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2668:6:11"},"nodeType":"YulFunctionCall","src":"2668:21:11"},"nodeType":"YulExpressionStatement","src":"2668:21:11"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2709:9:11"},{"kind":"number","nodeType":"YulLiteral","src":"2720:2:11","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2705:3:11"},"nodeType":"YulFunctionCall","src":"2705:18:11"},{"kind":"number","nodeType":"YulLiteral","src":"2725:2:11","type":"","value":"34"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2698:6:11"},"nodeType":"YulFunctionCall","src":"2698:30:11"},"nodeType":"YulExpressionStatement","src":"2698:30:11"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2748:9:11"},{"kind":"number","nodeType":"YulLiteral","src":"2759:2:11","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2744:3:11"},"nodeType":"YulFunctionCall","src":"2744:18:11"},{"kind":"string","nodeType":"YulLiteral","src":"2764:34:11","type":"","value":"ERC20: approve to the zero addre"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2737:6:11"},"nodeType":"YulFunctionCall","src":"2737:62:11"},"nodeType":"YulExpressionStatement","src":"2737:62:11"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2819:9:11"},{"kind":"number","nodeType":"YulLiteral","src":"2830:2:11","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2815:3:11"},"nodeType":"YulFunctionCall","src":"2815:18:11"},{"kind":"string","nodeType":"YulLiteral","src":"2835:4:11","type":"","value":"ss"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2808:6:11"},"nodeType":"YulFunctionCall","src":"2808:32:11"},"nodeType":"YulExpressionStatement","src":"2808:32:11"},{"nodeType":"YulAssignment","src":"2849:27:11","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2861:9:11"},{"kind":"number","nodeType":"YulLiteral","src":"2872:3:11","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2857:3:11"},"nodeType":"YulFunctionCall","src":"2857:19:11"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2849:4:11"}]}]},"name":"abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2635:9:11","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2649:4:11","type":""}],"src":"2484:398:11"},{"body":{"nodeType":"YulBlock","src":"3061:179:11","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3078:9:11"},{"kind":"number","nodeType":"YulLiteral","src":"3089:2:11","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3071:6:11"},"nodeType":"YulFunctionCall","src":"3071:21:11"},"nodeType":"YulExpressionStatement","src":"3071:21:11"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3112:9:11"},{"kind":"number","nodeType":"YulLiteral","src":"3123:2:11","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3108:3:11"},"nodeType":"YulFunctionCall","src":"3108:18:11"},{"kind":"number","nodeType":"YulLiteral","src":"3128:2:11","type":"","value":"29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3101:6:11"},"nodeType":"YulFunctionCall","src":"3101:30:11"},"nodeType":"YulExpressionStatement","src":"3101:30:11"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3151:9:11"},{"kind":"number","nodeType":"YulLiteral","src":"3162:2:11","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3147:3:11"},"nodeType":"YulFunctionCall","src":"3147:18:11"},{"kind":"string","nodeType":"YulLiteral","src":"3167:31:11","type":"","value":"ERC20: insufficient allowance"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3140:6:11"},"nodeType":"YulFunctionCall","src":"3140:59:11"},"nodeType":"YulExpressionStatement","src":"3140:59:11"},{"nodeType":"YulAssignment","src":"3208:26:11","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3220:9:11"},{"kind":"number","nodeType":"YulLiteral","src":"3231:2:11","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3216:3:11"},"nodeType":"YulFunctionCall","src":"3216:18:11"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3208:4:11"}]}]},"name":"abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3038:9:11","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3052:4:11","type":""}],"src":"2887:353:11"},{"body":{"nodeType":"YulBlock","src":"3419:228:11","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3436:9:11"},{"kind":"number","nodeType":"YulLiteral","src":"3447:2:11","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3429:6:11"},"nodeType":"YulFunctionCall","src":"3429:21:11"},"nodeType":"YulExpressionStatement","src":"3429:21:11"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3470:9:11"},{"kind":"number","nodeType":"YulLiteral","src":"3481:2:11","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3466:3:11"},"nodeType":"YulFunctionCall","src":"3466:18:11"},{"kind":"number","nodeType":"YulLiteral","src":"3486:2:11","type":"","value":"38"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3459:6:11"},"nodeType":"YulFunctionCall","src":"3459:30:11"},"nodeType":"YulExpressionStatement","src":"3459:30:11"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3509:9:11"},{"kind":"number","nodeType":"YulLiteral","src":"3520:2:11","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3505:3:11"},"nodeType":"YulFunctionCall","src":"3505:18:11"},{"kind":"string","nodeType":"YulLiteral","src":"3525:34:11","type":"","value":"ERC20: transfer amount exceeds b"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3498:6:11"},"nodeType":"YulFunctionCall","src":"3498:62:11"},"nodeType":"YulExpressionStatement","src":"3498:62:11"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3580:9:11"},{"kind":"number","nodeType":"YulLiteral","src":"3591:2:11","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3576:3:11"},"nodeType":"YulFunctionCall","src":"3576:18:11"},{"kind":"string","nodeType":"YulLiteral","src":"3596:8:11","type":"","value":"alance"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3569:6:11"},"nodeType":"YulFunctionCall","src":"3569:36:11"},"nodeType":"YulExpressionStatement","src":"3569:36:11"},{"nodeType":"YulAssignment","src":"3614:27:11","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3626:9:11"},{"kind":"number","nodeType":"YulLiteral","src":"3637:3:11","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3622:3:11"},"nodeType":"YulFunctionCall","src":"3622:19:11"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3614:4:11"}]}]},"name":"abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3396:9:11","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3410:4:11","type":""}],"src":"3245:402:11"},{"body":{"nodeType":"YulBlock","src":"3826:227:11","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3843:9:11"},{"kind":"number","nodeType":"YulLiteral","src":"3854:2:11","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3836:6:11"},"nodeType":"YulFunctionCall","src":"3836:21:11"},"nodeType":"YulExpressionStatement","src":"3836:21:11"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3877:9:11"},{"kind":"number","nodeType":"YulLiteral","src":"3888:2:11","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3873:3:11"},"nodeType":"YulFunctionCall","src":"3873:18:11"},{"kind":"number","nodeType":"YulLiteral","src":"3893:2:11","type":"","value":"37"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3866:6:11"},"nodeType":"YulFunctionCall","src":"3866:30:11"},"nodeType":"YulExpressionStatement","src":"3866:30:11"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3916:9:11"},{"kind":"number","nodeType":"YulLiteral","src":"3927:2:11","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3912:3:11"},"nodeType":"YulFunctionCall","src":"3912:18:11"},{"kind":"string","nodeType":"YulLiteral","src":"3932:34:11","type":"","value":"ERC20: transfer from the zero ad"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3905:6:11"},"nodeType":"YulFunctionCall","src":"3905:62:11"},"nodeType":"YulExpressionStatement","src":"3905:62:11"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3987:9:11"},{"kind":"number","nodeType":"YulLiteral","src":"3998:2:11","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3983:3:11"},"nodeType":"YulFunctionCall","src":"3983:18:11"},{"kind":"string","nodeType":"YulLiteral","src":"4003:7:11","type":"","value":"dress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3976:6:11"},"nodeType":"YulFunctionCall","src":"3976:35:11"},"nodeType":"YulExpressionStatement","src":"3976:35:11"},{"nodeType":"YulAssignment","src":"4020:27:11","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4032:9:11"},{"kind":"number","nodeType":"YulLiteral","src":"4043:3:11","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4028:3:11"},"nodeType":"YulFunctionCall","src":"4028:19:11"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4020:4:11"}]}]},"name":"abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3803:9:11","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3817:4:11","type":""}],"src":"3652:401:11"},{"body":{"nodeType":"YulBlock","src":"4232:226:11","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4249:9:11"},{"kind":"number","nodeType":"YulLiteral","src":"4260:2:11","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4242:6:11"},"nodeType":"YulFunctionCall","src":"4242:21:11"},"nodeType":"YulExpressionStatement","src":"4242:21:11"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4283:9:11"},{"kind":"number","nodeType":"YulLiteral","src":"4294:2:11","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4279:3:11"},"nodeType":"YulFunctionCall","src":"4279:18:11"},{"kind":"number","nodeType":"YulLiteral","src":"4299:2:11","type":"","value":"36"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4272:6:11"},"nodeType":"YulFunctionCall","src":"4272:30:11"},"nodeType":"YulExpressionStatement","src":"4272:30:11"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4322:9:11"},{"kind":"number","nodeType":"YulLiteral","src":"4333:2:11","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4318:3:11"},"nodeType":"YulFunctionCall","src":"4318:18:11"},{"kind":"string","nodeType":"YulLiteral","src":"4338:34:11","type":"","value":"ERC20: approve from the zero add"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4311:6:11"},"nodeType":"YulFunctionCall","src":"4311:62:11"},"nodeType":"YulExpressionStatement","src":"4311:62:11"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4393:9:11"},{"kind":"number","nodeType":"YulLiteral","src":"4404:2:11","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4389:3:11"},"nodeType":"YulFunctionCall","src":"4389:18:11"},{"kind":"string","nodeType":"YulLiteral","src":"4409:6:11","type":"","value":"ress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4382:6:11"},"nodeType":"YulFunctionCall","src":"4382:34:11"},"nodeType":"YulExpressionStatement","src":"4382:34:11"},{"nodeType":"YulAssignment","src":"4425:27:11","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4437:9:11"},{"kind":"number","nodeType":"YulLiteral","src":"4448:3:11","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4433:3:11"},"nodeType":"YulFunctionCall","src":"4433:19:11"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4425:4:11"}]}]},"name":"abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4209:9:11","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4223:4:11","type":""}],"src":"4058:400:11"},{"body":{"nodeType":"YulBlock","src":"4637:227:11","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4654:9:11"},{"kind":"number","nodeType":"YulLiteral","src":"4665:2:11","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4647:6:11"},"nodeType":"YulFunctionCall","src":"4647:21:11"},"nodeType":"YulExpressionStatement","src":"4647:21:11"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4688:9:11"},{"kind":"number","nodeType":"YulLiteral","src":"4699:2:11","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4684:3:11"},"nodeType":"YulFunctionCall","src":"4684:18:11"},{"kind":"number","nodeType":"YulLiteral","src":"4704:2:11","type":"","value":"37"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4677:6:11"},"nodeType":"YulFunctionCall","src":"4677:30:11"},"nodeType":"YulExpressionStatement","src":"4677:30:11"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4727:9:11"},{"kind":"number","nodeType":"YulLiteral","src":"4738:2:11","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4723:3:11"},"nodeType":"YulFunctionCall","src":"4723:18:11"},{"kind":"string","nodeType":"YulLiteral","src":"4743:34:11","type":"","value":"ERC20: decreased allowance below"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4716:6:11"},"nodeType":"YulFunctionCall","src":"4716:62:11"},"nodeType":"YulExpressionStatement","src":"4716:62:11"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4798:9:11"},{"kind":"number","nodeType":"YulLiteral","src":"4809:2:11","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4794:3:11"},"nodeType":"YulFunctionCall","src":"4794:18:11"},{"kind":"string","nodeType":"YulLiteral","src":"4814:7:11","type":"","value":" zero"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4787:6:11"},"nodeType":"YulFunctionCall","src":"4787:35:11"},"nodeType":"YulExpressionStatement","src":"4787:35:11"},{"nodeType":"YulAssignment","src":"4831:27:11","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4843:9:11"},{"kind":"number","nodeType":"YulLiteral","src":"4854:3:11","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4839:3:11"},"nodeType":"YulFunctionCall","src":"4839:19:11"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4831:4:11"}]}]},"name":"abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4614:9:11","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4628:4:11","type":""}],"src":"4463:401:11"},{"body":{"nodeType":"YulBlock","src":"4970:76:11","statements":[{"nodeType":"YulAssignment","src":"4980:26:11","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4992:9:11"},{"kind":"number","nodeType":"YulLiteral","src":"5003:2:11","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4988:3:11"},"nodeType":"YulFunctionCall","src":"4988:18:11"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4980:4:11"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5022:9:11"},{"name":"value0","nodeType":"YulIdentifier","src":"5033:6:11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5015:6:11"},"nodeType":"YulFunctionCall","src":"5015:25:11"},"nodeType":"YulExpressionStatement","src":"5015:25:11"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4939:9:11","type":""},{"name":"value0","nodeType":"YulTypedName","src":"4950:6:11","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4961:4:11","type":""}],"src":"4869:177:11"},{"body":{"nodeType":"YulBlock","src":"5148:87:11","statements":[{"nodeType":"YulAssignment","src":"5158:26:11","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5170:9:11"},{"kind":"number","nodeType":"YulLiteral","src":"5181:2:11","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5166:3:11"},"nodeType":"YulFunctionCall","src":"5166:18:11"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5158:4:11"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5200:9:11"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"5215:6:11"},{"kind":"number","nodeType":"YulLiteral","src":"5223:4:11","type":"","value":"0xff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"5211:3:11"},"nodeType":"YulFunctionCall","src":"5211:17:11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5193:6:11"},"nodeType":"YulFunctionCall","src":"5193:36:11"},"nodeType":"YulExpressionStatement","src":"5193:36:11"}]},"name":"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5117:9:11","type":""},{"name":"value0","nodeType":"YulTypedName","src":"5128:6:11","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5139:4:11","type":""}],"src":"5051:184:11"},{"body":{"nodeType":"YulBlock","src":"5288:181:11","statements":[{"body":{"nodeType":"YulBlock","src":"5323:115:11","statements":[{"expression":{"arguments":[{"name":"sum","nodeType":"YulIdentifier","src":"5344:3:11"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5353:3:11","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"5358:10:11","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"5349:3:11"},"nodeType":"YulFunctionCall","src":"5349:20:11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5337:6:11"},"nodeType":"YulFunctionCall","src":"5337:33:11"},"nodeType":"YulExpressionStatement","src":"5337:33:11"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5390:1:11","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"5393:4:11","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5383:6:11"},"nodeType":"YulFunctionCall","src":"5383:15:11"},"nodeType":"YulExpressionStatement","src":"5383:15:11"},{"expression":{"arguments":[{"name":"sum","nodeType":"YulIdentifier","src":"5418:3:11"},{"kind":"number","nodeType":"YulLiteral","src":"5423:4:11","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5411:6:11"},"nodeType":"YulFunctionCall","src":"5411:17:11"},"nodeType":"YulExpressionStatement","src":"5411:17:11"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"5304:1:11"},{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"5311:1:11"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"5307:3:11"},"nodeType":"YulFunctionCall","src":"5307:6:11"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5301:2:11"},"nodeType":"YulFunctionCall","src":"5301:13:11"},"nodeType":"YulIf","src":"5298:2:11"},{"nodeType":"YulAssignment","src":"5447:16:11","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"5458:1:11"},{"name":"y","nodeType":"YulIdentifier","src":"5461:1:11"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5454:3:11"},"nodeType":"YulFunctionCall","src":"5454:9:11"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"5447:3:11"}]}]},"name":"checked_add_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"5271:1:11","type":""},{"name":"y","nodeType":"YulTypedName","src":"5274:1:11","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"5280:3:11","type":""}],"src":"5240:229:11"},{"body":{"nodeType":"YulBlock","src":"5529:325:11","statements":[{"nodeType":"YulAssignment","src":"5539:22:11","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5553:1:11","type":"","value":"1"},{"name":"data","nodeType":"YulIdentifier","src":"5556:4:11"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"5549:3:11"},"nodeType":"YulFunctionCall","src":"5549:12:11"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"5539:6:11"}]},{"nodeType":"YulVariableDeclaration","src":"5570:38:11","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"5600:4:11"},{"kind":"number","nodeType":"YulLiteral","src":"5606:1:11","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"5596:3:11"},"nodeType":"YulFunctionCall","src":"5596:12:11"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"5574:18:11","type":""}]},{"body":{"nodeType":"YulBlock","src":"5647:31:11","statements":[{"nodeType":"YulAssignment","src":"5649:27:11","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"5663:6:11"},{"kind":"number","nodeType":"YulLiteral","src":"5671:4:11","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"5659:3:11"},"nodeType":"YulFunctionCall","src":"5659:17:11"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"5649:6:11"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"5627:18:11"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"5620:6:11"},"nodeType":"YulFunctionCall","src":"5620:26:11"},"nodeType":"YulIf","src":"5617:2:11"},{"body":{"nodeType":"YulBlock","src":"5737:111:11","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5758:1:11","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5765:3:11","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"5770:10:11","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"5761:3:11"},"nodeType":"YulFunctionCall","src":"5761:20:11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5751:6:11"},"nodeType":"YulFunctionCall","src":"5751:31:11"},"nodeType":"YulExpressionStatement","src":"5751:31:11"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5802:1:11","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"5805:4:11","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5795:6:11"},"nodeType":"YulFunctionCall","src":"5795:15:11"},"nodeType":"YulExpressionStatement","src":"5795:15:11"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5830:1:11","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5833:4:11","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5823:6:11"},"nodeType":"YulFunctionCall","src":"5823:15:11"},"nodeType":"YulExpressionStatement","src":"5823:15:11"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"5693:18:11"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"5716:6:11"},{"kind":"number","nodeType":"YulLiteral","src":"5724:2:11","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"5713:2:11"},"nodeType":"YulFunctionCall","src":"5713:14:11"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"5690:2:11"},"nodeType":"YulFunctionCall","src":"5690:38:11"},"nodeType":"YulIf","src":"5687:2:11"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"5509:4:11","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"5518:6:11","type":""}],"src":"5474:380:11"}]},"contents":"{\n    { }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(value1, value1) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(value2, value2) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(value0, value0) }\n        value0 := abi_decode_address(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        let _1 := 32\n        mstore(headStart, _1)\n        let length := mload(value0)\n        mstore(add(headStart, _1), length)\n        let i := tail\n        for { } lt(i, length) { i := add(i, _1) }\n        {\n            mstore(add(add(headStart, i), 64), mload(add(add(value0, i), _1)))\n        }\n        if gt(i, length)\n        {\n            mstore(add(add(headStart, length), 64), tail)\n        }\n        tail := add(add(headStart, and(add(length, 31), not(31))), 64)\n    }\n    function abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 35)\n        mstore(add(headStart, 64), \"ERC20: transfer to the zero addr\")\n        mstore(add(headStart, 96), \"ess\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 34)\n        mstore(add(headStart, 64), \"ERC20: approve to the zero addre\")\n        mstore(add(headStart, 96), \"ss\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"ERC20: insufficient allowance\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"ERC20: transfer amount exceeds b\")\n        mstore(add(headStart, 96), \"alance\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 37)\n        mstore(add(headStart, 64), \"ERC20: transfer from the zero ad\")\n        mstore(add(headStart, 96), \"dress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 36)\n        mstore(add(headStart, 64), \"ERC20: approve from the zero add\")\n        mstore(add(headStart, 96), \"ress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 37)\n        mstore(add(headStart, 64), \"ERC20: decreased allowance below\")\n        mstore(add(headStart, 96), \" zero\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xff))\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        if gt(x, not(y))\n        {\n            mstore(sum, shl(224, 0x4e487b71))\n            mstore(4, 0x11)\n            revert(sum, 0x24)\n        }\n        sum := add(x, y)\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n}","id":11,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106100a95760003560e01c80633950935111610071578063395093511461012357806370a082311461013657806395d89b411461015f578063a457c2d714610167578063a9059cbb1461017a578063dd62ed3e1461018d57600080fd5b806306fdde03146100ae578063095ea7b3146100cc57806318160ddd146100ef57806323b872dd14610101578063313ce56714610114575b600080fd5b6100b66101a0565b6040516100c39190610797565b60405180910390f35b6100df6100da36600461076e565b610232565b60405190151581526020016100c3565b6002545b6040519081526020016100c3565b6100df61010f366004610733565b61024a565b604051601281526020016100c3565b6100df61013136600461076e565b61026e565b6100f36101443660046106e0565b6001600160a01b031660009081526020819052604090205490565b6100b6610290565b6100df61017536600461076e565b61029f565b6100df61018836600461076e565b61031f565b6100f361019b366004610701565b61032d565b6060600380546101af9061080e565b80601f01602080910402602001604051908101604052809291908181526020018280546101db9061080e565b80156102285780601f106101fd57610100808354040283529160200191610228565b820191906000526020600020905b81548152906001019060200180831161020b57829003601f168201915b5050505050905090565b600033610240818585610358565b5060019392505050565b60003361025885828561047c565b6102638585856104f6565b506001949350505050565b600033610240818585610281838361032d565b61028b91906107ea565b610358565b6060600480546101af9061080e565b600033816102ad828661032d565b9050838110156103125760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084015b60405180910390fd5b6102638286868403610358565b6000336102408185856104f6565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6001600160a01b0383166103ba5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610309565b6001600160a01b03821661041b5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610309565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6000610488848461032d565b905060001981146104f057818110156104e35760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610309565b6104f08484848403610358565b50505050565b6001600160a01b03831661055a5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610309565b6001600160a01b0382166105bc5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610309565b6001600160a01b038316600090815260208190526040902054818110156106345760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610309565b6001600160a01b0380851660009081526020819052604080822085850390559185168152908120805484929061066b9084906107ea565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516106b791815260200190565b60405180910390a36104f0565b80356001600160a01b03811681146106db57600080fd5b919050565b6000602082840312156106f1578081fd5b6106fa826106c4565b9392505050565b60008060408385031215610713578081fd5b61071c836106c4565b915061072a602084016106c4565b90509250929050565b600080600060608486031215610747578081fd5b610750846106c4565b925061075e602085016106c4565b9150604084013590509250925092565b60008060408385031215610780578182fd5b610789836106c4565b946020939093013593505050565b6000602080835283518082850152825b818110156107c3578581018301518582016040015282016107a7565b818111156107d45783604083870101525b50601f01601f1916929092016040019392505050565b6000821982111561080957634e487b7160e01b81526011600452602481fd5b500190565b600181811c9082168061082257607f821691505b6020821081141561084357634e487b7160e01b600052602260045260246000fd5b5091905056fea26469706673582212200c20f9188365815ab1f07b0058a33849190f72cfd6b1adaf77fca2f02a2d38cb64736f6c63430008040033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xA9 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x39509351 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x123 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x136 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x15F JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x167 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x17A JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x18D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xAE JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0xCC JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0xEF JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x101 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x114 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB6 PUSH2 0x1A0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xC3 SWAP2 SWAP1 PUSH2 0x797 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xDF PUSH2 0xDA CALLDATASIZE PUSH1 0x4 PUSH2 0x76E JUMP JUMPDEST PUSH2 0x232 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xC3 JUMP JUMPDEST PUSH1 0x2 SLOAD JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xC3 JUMP JUMPDEST PUSH2 0xDF PUSH2 0x10F CALLDATASIZE PUSH1 0x4 PUSH2 0x733 JUMP JUMPDEST PUSH2 0x24A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x12 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xC3 JUMP JUMPDEST PUSH2 0xDF PUSH2 0x131 CALLDATASIZE PUSH1 0x4 PUSH2 0x76E JUMP JUMPDEST PUSH2 0x26E JUMP JUMPDEST PUSH2 0xF3 PUSH2 0x144 CALLDATASIZE PUSH1 0x4 PUSH2 0x6E0 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0xB6 PUSH2 0x290 JUMP JUMPDEST PUSH2 0xDF PUSH2 0x175 CALLDATASIZE PUSH1 0x4 PUSH2 0x76E JUMP JUMPDEST PUSH2 0x29F JUMP JUMPDEST PUSH2 0xDF PUSH2 0x188 CALLDATASIZE PUSH1 0x4 PUSH2 0x76E JUMP JUMPDEST PUSH2 0x31F JUMP JUMPDEST PUSH2 0xF3 PUSH2 0x19B CALLDATASIZE PUSH1 0x4 PUSH2 0x701 JUMP JUMPDEST PUSH2 0x32D JUMP JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH2 0x1AF SWAP1 PUSH2 0x80E JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1DB SWAP1 PUSH2 0x80E JUMP JUMPDEST DUP1 ISZERO PUSH2 0x228 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1FD JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x228 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x20B JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x240 DUP2 DUP6 DUP6 PUSH2 0x358 JUMP JUMPDEST POP PUSH1 0x1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x258 DUP6 DUP3 DUP6 PUSH2 0x47C JUMP JUMPDEST PUSH2 0x263 DUP6 DUP6 DUP6 PUSH2 0x4F6 JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x240 DUP2 DUP6 DUP6 PUSH2 0x281 DUP4 DUP4 PUSH2 0x32D JUMP JUMPDEST PUSH2 0x28B SWAP2 SWAP1 PUSH2 0x7EA JUMP JUMPDEST PUSH2 0x358 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x4 DUP1 SLOAD PUSH2 0x1AF SWAP1 PUSH2 0x80E JUMP JUMPDEST PUSH1 0x0 CALLER DUP2 PUSH2 0x2AD DUP3 DUP7 PUSH2 0x32D JUMP JUMPDEST SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0x312 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x207A65726F PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x263 DUP3 DUP7 DUP7 DUP5 SUB PUSH2 0x358 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x240 DUP2 DUP6 DUP6 PUSH2 0x4F6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x3BA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x309 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x41B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x7373 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x309 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP6 SWAP1 SSTORE SWAP1 MLOAD DUP5 DUP2 MSTORE PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x488 DUP5 DUP5 PUSH2 0x32D JUMP JUMPDEST SWAP1 POP PUSH1 0x0 NOT DUP2 EQ PUSH2 0x4F0 JUMPI DUP2 DUP2 LT ISZERO PUSH2 0x4E3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x309 JUMP JUMPDEST PUSH2 0x4F0 DUP5 DUP5 DUP5 DUP5 SUB PUSH2 0x358 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x55A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x6472657373 PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x309 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x5BC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x44 DUP3 ADD MSTORE PUSH3 0x657373 PUSH1 0xE8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x309 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0x634 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x616C616E6365 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x309 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP6 DUP6 SUB SWAP1 SSTORE SWAP2 DUP6 AND DUP2 MSTORE SWAP1 DUP2 KECCAK256 DUP1 SLOAD DUP5 SWAP3 SWAP1 PUSH2 0x66B SWAP1 DUP5 SWAP1 PUSH2 0x7EA JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP5 PUSH1 0x40 MLOAD PUSH2 0x6B7 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0x4F0 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x6DB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x6F1 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x6FA DUP3 PUSH2 0x6C4 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x713 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x71C DUP4 PUSH2 0x6C4 JUMP JUMPDEST SWAP2 POP PUSH2 0x72A PUSH1 0x20 DUP5 ADD PUSH2 0x6C4 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x747 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x750 DUP5 PUSH2 0x6C4 JUMP JUMPDEST SWAP3 POP PUSH2 0x75E PUSH1 0x20 DUP6 ADD PUSH2 0x6C4 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x780 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x789 DUP4 PUSH2 0x6C4 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 DUP3 DUP6 ADD MSTORE DUP3 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x7C3 JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP3 ADD PUSH2 0x7A7 JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0x7D4 JUMPI DUP4 PUSH1 0x40 DUP4 DUP8 ADD ADD MSTORE JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x40 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x809 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 DUP2 REVERT JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x822 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0x843 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC KECCAK256 0xF9 XOR DUP4 PUSH6 0x815AB1F07B00 PC LOG3 CODESIZE 0x49 NOT 0xF PUSH19 0xCFD6B1ADAF77FCA2F02A2D38CB64736F6C6343 STOP ADDMOD DIV STOP CALLER ","sourceMap":"1403:11214:1:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2156:98;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4433:197;;;;;;:::i;:::-;;:::i;:::-;;;1445:14:11;;1438:22;1420:41;;1408:2;1393:18;4433:197:1;1375:92:11;3244:106:1;3331:12;;3244:106;;;5015:25:11;;;5003:2;4988:18;3244:106:1;4970:76:11;5192:286:1;;;;;;:::i;:::-;;:::i;3093:91::-;;;3175:2;5193:36:11;;5181:2;5166:18;3093:91:1;5148:87:11;5873:234:1;;;;;;:::i;:::-;;:::i;3408:125::-;;;;;;:::i;:::-;-1:-1:-1;;;;;3508:18:1;3482:7;3508:18;;;;;;;;;;;;3408:125;2367:102;;;:::i;6594:427::-;;;;;;:::i;:::-;;:::i;3729:189::-;;;;;;:::i;:::-;;:::i;3976:149::-;;;;;;:::i;:::-;;:::i;2156:98::-;2210:13;2242:5;2235:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2156:98;:::o;4433:197::-;4516:4;719:10:8;4570:32:1;719:10:8;4586:7:1;4595:6;4570:8;:32::i;:::-;-1:-1:-1;4619:4:1;;4433:197;-1:-1:-1;;;4433:197:1:o;5192:286::-;5319:4;719:10:8;5375:38:1;5391:4;719:10:8;5406:6:1;5375:15;:38::i;:::-;5423:27;5433:4;5439:2;5443:6;5423:9;:27::i;:::-;-1:-1:-1;5467:4:1;;5192:286;-1:-1:-1;;;;5192:286:1:o;5873:234::-;5961:4;719:10:8;6015:64:1;719:10:8;6031:7:1;6068:10;6040:25;719:10:8;6031:7:1;6040:9;:25::i;:::-;:38;;;;:::i;:::-;6015:8;:64::i;2367:102::-;2423:13;2455:7;2448:14;;;;;:::i;6594:427::-;6687:4;719:10:8;6687:4:1;6768:25;719:10:8;6785:7:1;6768:9;:25::i;:::-;6741:52;;6831:15;6811:16;:35;;6803:85;;;;-1:-1:-1;;;6803:85:1;;4665:2:11;6803:85:1;;;4647:21:11;4704:2;4684:18;;;4677:30;4743:34;4723:18;;;4716:62;-1:-1:-1;;;4794:18:11;;;4787:35;4839:19;;6803:85:1;;;;;;;;;6922:60;6931:5;6938:7;6966:15;6947:16;:34;6922:8;:60::i;3729:189::-;3808:4;719:10:8;3862:28:1;719:10:8;3879:2:1;3883:6;3862:9;:28::i;3976:149::-;-1:-1:-1;;;;;4091:18:1;;;4065:7;4091:18;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;3976:149::o;10110:370::-;-1:-1:-1;;;;;10241:19:1;;10233:68;;;;-1:-1:-1;;;10233:68:1;;4260:2:11;10233:68:1;;;4242:21:11;4299:2;4279:18;;;4272:30;4338:34;4318:18;;;4311:62;-1:-1:-1;;;4389:18:11;;;4382:34;4433:19;;10233:68:1;4232:226:11;10233:68:1;-1:-1:-1;;;;;10319:21:1;;10311:68;;;;-1:-1:-1;;;10311:68:1;;2686:2:11;10311:68:1;;;2668:21:11;2725:2;2705:18;;;2698:30;2764:34;2744:18;;;2737:62;-1:-1:-1;;;2815:18:11;;;2808:32;2857:19;;10311:68:1;2658:224:11;10311:68:1;-1:-1:-1;;;;;10390:18:1;;;;;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;:36;;;10441:32;;5015:25:11;;;10441:32:1;;4988:18:11;10441:32:1;;;;;;;10110:370;;;:::o;10761:441::-;10891:24;10918:25;10928:5;10935:7;10918:9;:25::i;:::-;10891:52;;-1:-1:-1;;10957:16:1;:37;10953:243;;11038:6;11018:16;:26;;11010:68;;;;-1:-1:-1;;;11010:68:1;;3089:2:11;11010:68:1;;;3071:21:11;3128:2;3108:18;;;3101:30;3167:31;3147:18;;;3140:59;3216:18;;11010:68:1;3061:179:11;11010:68:1;11120:51;11129:5;11136:7;11164:6;11145:16;:25;11120:8;:51::i;:::-;10761:441;;;;:::o;7475:651::-;-1:-1:-1;;;;;7601:18:1;;7593:68;;;;-1:-1:-1;;;7593:68:1;;3854:2:11;7593:68:1;;;3836:21:11;3893:2;3873:18;;;3866:30;3932:34;3912:18;;;3905:62;-1:-1:-1;;;3983:18:11;;;3976:35;4028:19;;7593:68:1;3826:227:11;7593:68:1;-1:-1:-1;;;;;7679:16:1;;7671:64;;;;-1:-1:-1;;;7671:64:1;;2282:2:11;7671:64:1;;;2264:21:11;2321:2;2301:18;;;2294:30;2360:34;2340:18;;;2333:62;-1:-1:-1;;;2411:18:11;;;2404:33;2454:19;;7671:64:1;2254:225:11;7671:64:1;-1:-1:-1;;;;;7817:15:1;;7795:19;7817:15;;;;;;;;;;;7850:21;;;;7842:72;;;;-1:-1:-1;;;7842:72:1;;3447:2:11;7842:72:1;;;3429:21:11;3486:2;3466:18;;;3459:30;3525:34;3505:18;;;3498:62;-1:-1:-1;;;3576:18:11;;;3569:36;3622:19;;7842:72:1;3419:228:11;7842:72:1;-1:-1:-1;;;;;7948:15:1;;;:9;:15;;;;;;;;;;;7966:20;;;7948:38;;8006:13;;;;;;;;:23;;7980:6;;7948:9;8006:23;;7980:6;;8006:23;:::i;:::-;;;;;;;;8060:2;-1:-1:-1;;;;;8045:26:1;8054:4;-1:-1:-1;;;;;8045:26:1;;8064:6;8045:26;;;;5015:25:11;;5003:2;4988:18;;4970:76;8045:26:1;;;;;;;;8082:37;11786:121;14:173:11;82:20;;-1:-1:-1;;;;;131:31:11;;121:42;;111:2;;177:1;174;167:12;111:2;63:124;;;:::o;192:196::-;251:6;304:2;292:9;283:7;279:23;275:32;272:2;;;325:6;317;310:22;272:2;353:29;372:9;353:29;:::i;:::-;343:39;262:126;-1:-1:-1;;;262:126:11:o;393:270::-;461:6;469;522:2;510:9;501:7;497:23;493:32;490:2;;;543:6;535;528:22;490:2;571:29;590:9;571:29;:::i;:::-;561:39;;619:38;653:2;642:9;638:18;619:38;:::i;:::-;609:48;;480:183;;;;;:::o;668:338::-;745:6;753;761;814:2;802:9;793:7;789:23;785:32;782:2;;;835:6;827;820:22;782:2;863:29;882:9;863:29;:::i;:::-;853:39;;911:38;945:2;934:9;930:18;911:38;:::i;:::-;901:48;;996:2;985:9;981:18;968:32;958:42;;772:234;;;;;:::o;1011:264::-;1079:6;1087;1140:2;1128:9;1119:7;1115:23;1111:32;1108:2;;;1161:6;1153;1146:22;1108:2;1189:29;1208:9;1189:29;:::i;:::-;1179:39;1265:2;1250:18;;;;1237:32;;-1:-1:-1;;;1098:177:11:o;1472:603::-;1584:4;1613:2;1642;1631:9;1624:21;1674:6;1668:13;1717:6;1712:2;1701:9;1697:18;1690:34;1742:4;1755:140;1769:6;1766:1;1763:13;1755:140;;;1864:14;;;1860:23;;1854:30;1830:17;;;1849:2;1826:26;1819:66;1784:10;;1755:140;;;1913:6;1910:1;1907:13;1904:2;;;1983:4;1978:2;1969:6;1958:9;1954:22;1950:31;1943:45;1904:2;-1:-1:-1;2059:2:11;2038:15;-1:-1:-1;;2034:29:11;2019:45;;;;2066:2;2015:54;;1593:482;-1:-1:-1;;;1593:482:11:o;5240:229::-;5280:3;5311:1;5307:6;5304:1;5301:13;5298:2;;;-1:-1:-1;;;5337:33:11;;5393:4;5390:1;5383:15;5423:4;5344:3;5411:17;5298:2;-1:-1:-1;5454:9:11;;5288:181::o;5474:380::-;5553:1;5549:12;;;;5596;;;5617:2;;5671:4;5663:6;5659:17;5649:27;;5617:2;5724;5716:6;5713:14;5693:18;5690:38;5687:2;;;5770:10;5765:3;5761:20;5758:1;5751:31;5805:4;5802:1;5795:15;5833:4;5830:1;5823:15;5687:2;;5529:325;;;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"435000","executionCost":"infinite","totalCost":"infinite"},"external":{"allowance(address,address)":"infinite","approve(address,uint256)":"22524","balanceOf(address)":"1262","decimals()":"266","decreaseAllowance(address,uint256)":"23616","increaseAllowance(address,uint256)":"23578","name()":"infinite","symbol()":"infinite","totalSupply()":"1026","transfer(address,uint256)":"44470","transferFrom(address,address,uint256)":"infinite"},"internal":{"_afterTokenTransfer(address,address,uint256)":"infinite","_approve(address,address,uint256)":"infinite","_beforeTokenTransfer(address,address,uint256)":"infinite","_burn(address,uint256)":"infinite","_mint(address,uint256)":"infinite","_spendAllowance(address,address,uint256)":"infinite","_transfer(address,address,uint256)":"infinite"}},"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","decimals()":"313ce567","decreaseAllowance(address,uint256)":"a457c2d7","increaseAllowance(address,uint256)":"39509351","name()":"06fdde03","symbol()":"95d89b41","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC20} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. For a generic mechanism see {ERC20PresetMinterPauser}. TIP: For a detailed writeup see our guide https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. We have followed general OpenZeppelin Contracts guidelines: functions revert instead returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC20 applications. Additionally, an {Approval} event is emitted on calls to {transferFrom}. This allows applications to reconstruct the allowance for all accounts just by listening to said events. Other implementations of the EIP may not emit these events, as it isn't required by the specification. Finally, the non-standard {decreaseAllowance} and {increaseAllowance} functions have been added to mitigate the well-known issues around setting allowances. See {IERC20-approve}.\",\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"constructor\":{\"details\":\"Sets the values for {name} and {symbol}. The default value of {decimals} is 18. To select a different value for {decimals} you should overload it. All two of these values are immutable: they can only be set once during construction.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":\"ERC20\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x24b04b8aacaaf1a4a0719117b29c9c3647b1f479c5ac2a60f5ff1bb6d839c238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":183,"contract":"@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20","label":"_balances","offset":0,"slot":"0","type":"t_mapping(t_address,t_uint256)"},{"astId":189,"contract":"@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20","label":"_allowances","offset":0,"slot":"1","type":"t_mapping(t_address,t_mapping(t_address,t_uint256))"},{"astId":191,"contract":"@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20","label":"_totalSupply","offset":0,"slot":"2","type":"t_uint256"},{"astId":193,"contract":"@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20","label":"_name","offset":0,"slot":"3","type":"t_string_storage"},{"astId":195,"contract":"@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20","label":"_symbol","offset":0,"slot":"4","type":"t_string_storage"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_mapping(t_address,t_mapping(t_address,t_uint256))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => uint256))","numberOfBytes":"32","value":"t_mapping(t_address,t_uint256)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"IERC20":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface of the ERC20 standard as defined in the EIP.","events":{"Approval(address,address,uint256)":{"details":"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."},"Transfer(address,address,uint256)":{"details":"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."}},"kind":"dev","methods":{"allowance(address,address)":{"details":"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."},"approve(address,uint256)":{"details":"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the amount of tokens owned by `account`."},"totalSupply()":{"details":"Returns the amount of tokens in existence."},"transfer(address,uint256)":{"details":"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."},"transferFrom(address,address,uint256)":{"details":"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."}},"version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol":{"ERC4626":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"caller","type":"address"},{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":false,"internalType":"uint256","name":"assets","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"shares","type":"uint256"}],"name":"Deposit","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"caller","type":"address"},{"indexed":true,"internalType":"address","name":"receiver","type":"address"},{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":false,"internalType":"uint256","name":"assets","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"shares","type":"uint256"}],"name":"Withdraw","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"asset","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"shares","type":"uint256"}],"name":"convertToAssets","outputs":[{"internalType":"uint256","name":"assets","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"assets","type":"uint256"}],"name":"convertToShares","outputs":[{"internalType":"uint256","name":"shares","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"subtractedValue","type":"uint256"}],"name":"decreaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"assets","type":"uint256"},{"internalType":"address","name":"receiver","type":"address"}],"name":"deposit","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"addedValue","type":"uint256"}],"name":"increaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"maxDeposit","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"maxMint","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"maxRedeem","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"maxWithdraw","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"shares","type":"uint256"},{"internalType":"address","name":"receiver","type":"address"}],"name":"mint","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"assets","type":"uint256"}],"name":"previewDeposit","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"shares","type":"uint256"}],"name":"previewMint","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"shares","type":"uint256"}],"name":"previewRedeem","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"assets","type":"uint256"}],"name":"previewWithdraw","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"shares","type":"uint256"},{"internalType":"address","name":"receiver","type":"address"},{"internalType":"address","name":"owner","type":"address"}],"name":"redeem","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalAssets","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"assets","type":"uint256"},{"internalType":"address","name":"receiver","type":"address"},{"internalType":"address","name":"owner","type":"address"}],"name":"withdraw","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Implementation of the ERC4626 \"Tokenized Vault Standard\" as defined in https://eips.ethereum.org/EIPS/eip-4626[EIP-4626]. This extension allows the minting and burning of \"shares\" (represented using the ERC20 inheritance) in exchange for underlying \"assets\" through standardized {deposit}, {mint}, {redeem} and {burn} workflows. This contract extends the ERC20 standard. Any additional extensions included along it would affect the \"shares\" token represented by this contract and not the \"assets\" token which is an independent contract. CAUTION: Deposits and withdrawals may incur unexpected slippage. Users should verify that the amount received of shares or assets is as expected. EOAs should operate through a wrapper that performs these checks such as https://github.com/fei-protocol/ERC4626#erc4626router-and-base[ERC4626Router]. _Available since v4.7._","kind":"dev","methods":{"allowance(address,address)":{"details":"See {IERC20-allowance}."},"approve(address,uint256)":{"details":"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."},"asset()":{"details":"See {IERC4262-asset}. "},"balanceOf(address)":{"details":"See {IERC20-balanceOf}."},"constructor":{"details":"Set the underlying asset contract. This must be an ERC20-compatible contract (ERC20 or ERC777)."},"convertToAssets(uint256)":{"details":"See {IERC4262-convertToAssets}. "},"convertToShares(uint256)":{"details":"See {IERC4262-convertToShares}. "},"decimals()":{"details":"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."},"decreaseAllowance(address,uint256)":{"details":"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."},"deposit(uint256,address)":{"details":"See {IERC4262-deposit}. "},"increaseAllowance(address,uint256)":{"details":"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."},"maxDeposit(address)":{"details":"See {IERC4262-maxDeposit}. "},"maxMint(address)":{"details":"See {IERC4262-maxMint}. "},"maxRedeem(address)":{"details":"See {IERC4262-maxRedeem}. "},"maxWithdraw(address)":{"details":"See {IERC4262-maxWithdraw}. "},"mint(uint256,address)":{"details":"See {IERC4262-mint}. "},"name()":{"details":"Returns the name of the token."},"previewDeposit(uint256)":{"details":"See {IERC4262-previewDeposit}. "},"previewMint(uint256)":{"details":"See {IERC4262-previewMint}. "},"previewRedeem(uint256)":{"details":"See {IERC4262-previewRedeem}. "},"previewWithdraw(uint256)":{"details":"See {IERC4262-previewWithdraw}. "},"redeem(uint256,address,address)":{"details":"See {IERC4262-redeem}. "},"symbol()":{"details":"Returns the symbol of the token, usually a shorter version of the name."},"totalAssets()":{"details":"See {IERC4262-totalAssets}. "},"totalSupply()":{"details":"See {IERC20-totalSupply}."},"transfer(address,uint256)":{"details":"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."},"transferFrom(address,address,uint256)":{"details":"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."},"withdraw(uint256,address,address)":{"details":"See {IERC4262-withdraw}. "}},"version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","asset()":"38d52e0f","balanceOf(address)":"70a08231","convertToAssets(uint256)":"07a2d13a","convertToShares(uint256)":"c6e6f592","decimals()":"313ce567","decreaseAllowance(address,uint256)":"a457c2d7","deposit(uint256,address)":"6e553f65","increaseAllowance(address,uint256)":"39509351","maxDeposit(address)":"402d267d","maxMint(address)":"c63d75b6","maxRedeem(address)":"d905777e","maxWithdraw(address)":"ce96cb77","mint(uint256,address)":"94bf804d","name()":"06fdde03","previewDeposit(uint256)":"ef8b30f7","previewMint(uint256)":"b3d7f6b9","previewRedeem(uint256)":"4cdad506","previewWithdraw(uint256)":"0a28a477","redeem(uint256,address,address)":"ba087652","symbol()":"95d89b41","totalAssets()":"01e1d114","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd","withdraw(uint256,address,address)":"b460af94"}},"metadata":"{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"asset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"convertToAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"convertToShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"maxRedeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"maxWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"previewDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"previewMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"previewRedeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"previewWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the ERC4626 \\\"Tokenized Vault Standard\\\" as defined in https://eips.ethereum.org/EIPS/eip-4626[EIP-4626]. This extension allows the minting and burning of \\\"shares\\\" (represented using the ERC20 inheritance) in exchange for underlying \\\"assets\\\" through standardized {deposit}, {mint}, {redeem} and {burn} workflows. This contract extends the ERC20 standard. Any additional extensions included along it would affect the \\\"shares\\\" token represented by this contract and not the \\\"assets\\\" token which is an independent contract. CAUTION: Deposits and withdrawals may incur unexpected slippage. Users should verify that the amount received of shares or assets is as expected. EOAs should operate through a wrapper that performs these checks such as https://github.com/fei-protocol/ERC4626#erc4626router-and-base[ERC4626Router]. _Available since v4.7._\",\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"asset()\":{\"details\":\"See {IERC4262-asset}. \"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"constructor\":{\"details\":\"Set the underlying asset contract. This must be an ERC20-compatible contract (ERC20 or ERC777).\"},\"convertToAssets(uint256)\":{\"details\":\"See {IERC4262-convertToAssets}. \"},\"convertToShares(uint256)\":{\"details\":\"See {IERC4262-convertToShares}. \"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"deposit(uint256,address)\":{\"details\":\"See {IERC4262-deposit}. \"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"maxDeposit(address)\":{\"details\":\"See {IERC4262-maxDeposit}. \"},\"maxMint(address)\":{\"details\":\"See {IERC4262-maxMint}. \"},\"maxRedeem(address)\":{\"details\":\"See {IERC4262-maxRedeem}. \"},\"maxWithdraw(address)\":{\"details\":\"See {IERC4262-maxWithdraw}. \"},\"mint(uint256,address)\":{\"details\":\"See {IERC4262-mint}. \"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"previewDeposit(uint256)\":{\"details\":\"See {IERC4262-previewDeposit}. \"},\"previewMint(uint256)\":{\"details\":\"See {IERC4262-previewMint}. \"},\"previewRedeem(uint256)\":{\"details\":\"See {IERC4262-previewRedeem}. \"},\"previewWithdraw(uint256)\":{\"details\":\"See {IERC4262-previewWithdraw}. \"},\"redeem(uint256,address,address)\":{\"details\":\"See {IERC4262-redeem}. \"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalAssets()\":{\"details\":\"See {IERC4262-totalAssets}. \"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"},\"withdraw(uint256,address,address)\":{\"details\":\"See {IERC4262-withdraw}. \"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":\"ERC4626\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC4626.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (interfaces/IERC4626.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\nimport \\\"../token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\n/**\\n * @dev Interface of the ERC4626 \\\"Tokenized Vault Standard\\\", as defined in\\n * https://eips.ethereum.org/EIPS/eip-4626[ERC-4626].\\n *\\n * _Available since v4.7._\\n */\\ninterface IERC4626 is IERC20, IERC20Metadata {\\n    event Deposit(address indexed caller, address indexed owner, uint256 assets, uint256 shares);\\n\\n    event Withdraw(\\n        address indexed caller,\\n        address indexed receiver,\\n        address indexed owner,\\n        uint256 assets,\\n        uint256 shares\\n    );\\n\\n    /**\\n     * @dev Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing.\\n     *\\n     * - MUST be an ERC-20 token contract.\\n     * - MUST NOT revert.\\n     */\\n    function asset() external view returns (address assetTokenAddress);\\n\\n    /**\\n     * @dev Returns the total amount of the underlying asset that is \\u201cmanaged\\u201d by Vault.\\n     *\\n     * - SHOULD include any compounding that occurs from yield.\\n     * - MUST be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT revert.\\n     */\\n    function totalAssets() external view returns (uint256 totalManagedAssets);\\n\\n    /**\\n     * @dev Returns the amount of shares that the Vault would exchange for the amount of assets provided, in an ideal\\n     * scenario where all the conditions are met.\\n     *\\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT show any variations depending on the caller.\\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: This calculation MAY NOT reflect the \\u201cper-user\\u201d price-per-share, and instead should reflect the\\n     * \\u201caverage-user\\u2019s\\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\\n     * from.\\n     */\\n    function convertToShares(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an ideal\\n     * scenario where all the conditions are met.\\n     *\\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT show any variations depending on the caller.\\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: This calculation MAY NOT reflect the \\u201cper-user\\u201d price-per-share, and instead should reflect the\\n     * \\u201caverage-user\\u2019s\\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\\n     * from.\\n     */\\n    function convertToAssets(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Returns the maximum amount of the underlying asset that can be deposited into the Vault for the receiver,\\n     * through a deposit call.\\n     *\\n     * - MUST return a limited value if receiver is subject to some deposit limit.\\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited.\\n     * - MUST NOT revert.\\n     */\\n    function maxDeposit(address receiver) external view returns (uint256 maxAssets);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given\\n     * current on-chain conditions.\\n     *\\n     * - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit\\n     *   call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called\\n     *   in the same transaction.\\n     * - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the\\n     *   deposit would be accepted, regardless if the user has enough tokens approved, etc.\\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\\n     */\\n    function previewDeposit(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Mints shares Vault shares to receiver by depositing exactly amount of underlying tokens.\\n     *\\n     * - MUST emit the Deposit event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   deposit execution, and are accounted for during deposit.\\n     * - MUST revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not\\n     *   approving enough underlying tokens to the Vault contract, etc).\\n     *\\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault\\u2019s underlying asset token.\\n     */\\n    function deposit(uint256 assets, address receiver) external returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the maximum amount of the Vault shares that can be minted for the receiver, through a mint call.\\n     * - MUST return a limited value if receiver is subject to some mint limit.\\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted.\\n     * - MUST NOT revert.\\n     */\\n    function maxMint(address receiver) external view returns (uint256 maxShares);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given\\n     * current on-chain conditions.\\n     *\\n     * - MUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call\\n     *   in the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the\\n     *   same transaction.\\n     * - MUST NOT account for mint limits like those returned from maxMint and should always act as though the mint\\n     *   would be accepted, regardless if the user has enough tokens approved, etc.\\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by minting.\\n     */\\n    function previewMint(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens.\\n     *\\n     * - MUST emit the Deposit event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the mint\\n     *   execution, and are accounted for during mint.\\n     * - MUST revert if all of shares cannot be minted (due to deposit limit being reached, slippage, the user not\\n     *   approving enough underlying tokens to the Vault contract, etc).\\n     *\\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault\\u2019s underlying asset token.\\n     */\\n    function mint(uint256 shares, address receiver) external returns (uint256 assets);\\n\\n    /**\\n     * @dev Returns the maximum amount of the underlying asset that can be withdrawn from the owner balance in the\\n     * Vault, through a withdraw call.\\n     *\\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\n     * - MUST NOT revert.\\n     */\\n    function maxWithdraw(address owner) external view returns (uint256 maxAssets);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block,\\n     * given current on-chain conditions.\\n     *\\n     * - MUST return as close to and no fewer than the exact amount of Vault shares that would be burned in a withdraw\\n     *   call in the same transaction. I.e. withdraw should return the same or fewer shares as previewWithdraw if\\n     *   called\\n     *   in the same transaction.\\n     * - MUST NOT account for withdrawal limits like those returned from maxWithdraw and should always act as though\\n     *   the withdrawal would be accepted, regardless if the user has enough shares, etc.\\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\\n     */\\n    function previewWithdraw(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Burns shares from owner and sends exactly assets of underlying tokens to receiver.\\n     *\\n     * - MUST emit the Withdraw event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   withdraw execution, and are accounted for during withdraw.\\n     * - MUST revert if all of assets cannot be withdrawn (due to withdrawal limit being reached, slippage, the owner\\n     *   not having enough shares, etc).\\n     *\\n     * Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\n     * Those methods should be performed separately.\\n     */\\n    function withdraw(\\n        uint256 assets,\\n        address receiver,\\n        address owner\\n    ) external returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the maximum amount of Vault shares that can be redeemed from the owner balance in the Vault,\\n     * through a redeem call.\\n     *\\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\n     * - MUST return balanceOf(owner) if owner is not subject to any withdrawal limit or timelock.\\n     * - MUST NOT revert.\\n     */\\n    function maxRedeem(address owner) external view returns (uint256 maxShares);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their redeemption at the current block,\\n     * given current on-chain conditions.\\n     *\\n     * - MUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call\\n     *   in the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the\\n     *   same transaction.\\n     * - MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the\\n     *   redemption would be accepted, regardless if the user has enough shares, etc.\\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by redeeming.\\n     */\\n    function previewRedeem(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Burns exactly shares from owner and sends assets of underlying tokens to receiver.\\n     *\\n     * - MUST emit the Withdraw event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   redeem execution, and are accounted for during redeem.\\n     * - MUST revert if all of shares cannot be redeemed (due to withdrawal limit being reached, slippage, the owner\\n     *   not having enough shares, etc).\\n     *\\n     * NOTE: some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\n     * Those methods should be performed separately.\\n     */\\n    function redeem(\\n        uint256 shares,\\n        address receiver,\\n        address owner\\n    ) external returns (uint256 assets);\\n}\\n\",\"keccak256\":\"0x9750c6fec736eb3320e85924f36a3060fa4a4ab1758d06d9585e175d164eefdb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x24b04b8aacaaf1a4a0719117b29c9c3647b1f479c5ac2a60f5ff1bb6d839c238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/extensions/ERC4626.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../utils/SafeERC20.sol\\\";\\nimport \\\"../../../interfaces/IERC4626.sol\\\";\\nimport \\\"../../../utils/math/Math.sol\\\";\\n\\n/**\\n * @dev Implementation of the ERC4626 \\\"Tokenized Vault Standard\\\" as defined in\\n * https://eips.ethereum.org/EIPS/eip-4626[EIP-4626].\\n *\\n * This extension allows the minting and burning of \\\"shares\\\" (represented using the ERC20 inheritance) in exchange for\\n * underlying \\\"assets\\\" through standardized {deposit}, {mint}, {redeem} and {burn} workflows. This contract extends\\n * the ERC20 standard. Any additional extensions included along it would affect the \\\"shares\\\" token represented by this\\n * contract and not the \\\"assets\\\" token which is an independent contract.\\n *\\n * CAUTION: Deposits and withdrawals may incur unexpected slippage. Users should verify that the amount received of\\n * shares or assets is as expected. EOAs should operate through a wrapper that performs these checks such as\\n * https://github.com/fei-protocol/ERC4626#erc4626router-and-base[ERC4626Router].\\n *\\n * _Available since v4.7._\\n */\\nabstract contract ERC4626 is ERC20, IERC4626 {\\n    using Math for uint256;\\n\\n    IERC20Metadata private immutable _asset;\\n\\n    /**\\n     * @dev Set the underlying asset contract. This must be an ERC20-compatible contract (ERC20 or ERC777).\\n     */\\n    constructor(IERC20Metadata asset_) {\\n        _asset = asset_;\\n    }\\n\\n    /** @dev See {IERC4262-asset}. */\\n    function asset() public view virtual override returns (address) {\\n        return address(_asset);\\n    }\\n\\n    /** @dev See {IERC4262-totalAssets}. */\\n    function totalAssets() public view virtual override returns (uint256) {\\n        return _asset.balanceOf(address(this));\\n    }\\n\\n    /** @dev See {IERC4262-convertToShares}. */\\n    function convertToShares(uint256 assets) public view virtual override returns (uint256 shares) {\\n        return _convertToShares(assets, Math.Rounding.Down);\\n    }\\n\\n    /** @dev See {IERC4262-convertToAssets}. */\\n    function convertToAssets(uint256 shares) public view virtual override returns (uint256 assets) {\\n        return _convertToAssets(shares, Math.Rounding.Down);\\n    }\\n\\n    /** @dev See {IERC4262-maxDeposit}. */\\n    function maxDeposit(address) public view virtual override returns (uint256) {\\n        return _isVaultCollateralized() ? type(uint256).max : 0;\\n    }\\n\\n    /** @dev See {IERC4262-maxMint}. */\\n    function maxMint(address) public view virtual override returns (uint256) {\\n        return type(uint256).max;\\n    }\\n\\n    /** @dev See {IERC4262-maxWithdraw}. */\\n    function maxWithdraw(address owner) public view virtual override returns (uint256) {\\n        return _convertToAssets(balanceOf(owner), Math.Rounding.Down);\\n    }\\n\\n    /** @dev See {IERC4262-maxRedeem}. */\\n    function maxRedeem(address owner) public view virtual override returns (uint256) {\\n        return balanceOf(owner);\\n    }\\n\\n    /** @dev See {IERC4262-previewDeposit}. */\\n    function previewDeposit(uint256 assets) public view virtual override returns (uint256) {\\n        return _convertToShares(assets, Math.Rounding.Down);\\n    }\\n\\n    /** @dev See {IERC4262-previewMint}. */\\n    function previewMint(uint256 shares) public view virtual override returns (uint256) {\\n        return _convertToAssets(shares, Math.Rounding.Up);\\n    }\\n\\n    /** @dev See {IERC4262-previewWithdraw}. */\\n    function previewWithdraw(uint256 assets) public view virtual override returns (uint256) {\\n        return _convertToShares(assets, Math.Rounding.Up);\\n    }\\n\\n    /** @dev See {IERC4262-previewRedeem}. */\\n    function previewRedeem(uint256 shares) public view virtual override returns (uint256) {\\n        return _convertToAssets(shares, Math.Rounding.Down);\\n    }\\n\\n    /** @dev See {IERC4262-deposit}. */\\n    function deposit(uint256 assets, address receiver) public virtual override returns (uint256) {\\n        require(assets <= maxDeposit(receiver), \\\"ERC4626: deposit more than max\\\");\\n\\n        uint256 shares = previewDeposit(assets);\\n        _deposit(_msgSender(), receiver, assets, shares);\\n\\n        return shares;\\n    }\\n\\n    /** @dev See {IERC4262-mint}. */\\n    function mint(uint256 shares, address receiver) public virtual override returns (uint256) {\\n        require(shares <= maxMint(receiver), \\\"ERC4626: mint more than max\\\");\\n\\n        uint256 assets = previewMint(shares);\\n        _deposit(_msgSender(), receiver, assets, shares);\\n\\n        return assets;\\n    }\\n\\n    /** @dev See {IERC4262-withdraw}. */\\n    function withdraw(\\n        uint256 assets,\\n        address receiver,\\n        address owner\\n    ) public virtual override returns (uint256) {\\n        require(assets <= maxWithdraw(owner), \\\"ERC4626: withdraw more than max\\\");\\n\\n        uint256 shares = previewWithdraw(assets);\\n        _withdraw(_msgSender(), receiver, owner, assets, shares);\\n\\n        return shares;\\n    }\\n\\n    /** @dev See {IERC4262-redeem}. */\\n    function redeem(\\n        uint256 shares,\\n        address receiver,\\n        address owner\\n    ) public virtual override returns (uint256) {\\n        require(shares <= maxRedeem(owner), \\\"ERC4626: redeem more than max\\\");\\n\\n        uint256 assets = previewRedeem(shares);\\n        _withdraw(_msgSender(), receiver, owner, assets, shares);\\n\\n        return assets;\\n    }\\n\\n    /**\\n     * @dev Internal conversion function (from assets to shares) with support for rounding direction.\\n     *\\n     * Will revert if assets > 0, totalSupply > 0 and totalAssets = 0. That corresponds to a case where any asset\\n     * would represent an infinite amout of shares.\\n     */\\n    function _convertToShares(uint256 assets, Math.Rounding rounding) internal view virtual returns (uint256 shares) {\\n        uint256 supply = totalSupply();\\n        return\\n            (assets == 0 || supply == 0)\\n                ? assets.mulDiv(10**decimals(), 10**_asset.decimals(), rounding)\\n                : assets.mulDiv(supply, totalAssets(), rounding);\\n    }\\n\\n    /**\\n     * @dev Internal conversion function (from shares to assets) with support for rounding direction.\\n     */\\n    function _convertToAssets(uint256 shares, Math.Rounding rounding) internal view virtual returns (uint256 assets) {\\n        uint256 supply = totalSupply();\\n        return\\n            (supply == 0)\\n                ? shares.mulDiv(10**_asset.decimals(), 10**decimals(), rounding)\\n                : shares.mulDiv(totalAssets(), supply, rounding);\\n    }\\n\\n    /**\\n     * @dev Deposit/mint common workflow.\\n     */\\n    function _deposit(\\n        address caller,\\n        address receiver,\\n        uint256 assets,\\n        uint256 shares\\n    ) internal virtual {\\n        // If _asset is ERC777, `transferFrom` can trigger a reenterancy BEFORE the transfer happens through the\\n        // `tokensToSend` hook. On the other hand, the `tokenReceived` hook, that is triggered after the transfer,\\n        // calls the vault, which is assumed not malicious.\\n        //\\n        // Conclusion: we need to do the transfer before we mint so that any reentrancy would happen before the\\n        // assets are transfered and before the shares are minted, which is a valid state.\\n        // slither-disable-next-line reentrancy-no-eth\\n        SafeERC20.safeTransferFrom(_asset, caller, address(this), assets);\\n        _mint(receiver, shares);\\n\\n        emit Deposit(caller, receiver, assets, shares);\\n    }\\n\\n    /**\\n     * @dev Withdraw/redeem common workflow.\\n     */\\n    function _withdraw(\\n        address caller,\\n        address receiver,\\n        address owner,\\n        uint256 assets,\\n        uint256 shares\\n    ) internal virtual {\\n        if (caller != owner) {\\n            _spendAllowance(owner, caller, shares);\\n        }\\n\\n        // If _asset is ERC777, `transfer` can trigger a reentrancy AFTER the transfer happens through the\\n        // `tokensReceived` hook. On the other hand, the `tokensToSend` hook, that is triggered before the transfer,\\n        // calls the vault, which is assumed not malicious.\\n        //\\n        // Conclusion: we need to do the transfer after the burn so that any reentrancy would happen after the\\n        // shares are burned and after the assets are transfered, which is a valid state.\\n        _burn(owner, shares);\\n        SafeERC20.safeTransfer(_asset, receiver, assets);\\n\\n        emit Withdraw(caller, receiver, owner, assets, shares);\\n    }\\n\\n    function _isVaultCollateralized() private view returns (bool) {\\n        return totalAssets() > 0 || totalSupply() == 0;\\n    }\\n}\\n\",\"keccak256\":\"0x5b2776d0bca58b68e2f78eed93bfdbae602d54e9f7b0509a960064e173e7da7a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x032807210d1d7d218963d7355d62e021a84bf1b3339f4f50be2f63b53cccaf29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. It the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`.\\n        // We also know that `k`, the position of the most significant bit, is such that `msb(a) = 2**k`.\\n        // This gives `2**k < a <= 2**(k+1)` \\u2192 `2**(k/2) <= sqrt(a) < 2 ** (k/2+1)`.\\n        // Using an algorithm similar to the msb conmputation, we are able to compute `result = 2**(k/2)` which is a\\n        // good first aproximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1;\\n        uint256 x = a;\\n        if (x >> 128 > 0) {\\n            x >>= 128;\\n            result <<= 64;\\n        }\\n        if (x >> 64 > 0) {\\n            x >>= 64;\\n            result <<= 32;\\n        }\\n        if (x >> 32 > 0) {\\n            x >>= 32;\\n            result <<= 16;\\n        }\\n        if (x >> 16 > 0) {\\n            x >>= 16;\\n            result <<= 8;\\n        }\\n        if (x >> 8 > 0) {\\n            x >>= 8;\\n            result <<= 4;\\n        }\\n        if (x >> 4 > 0) {\\n            x >>= 4;\\n            result <<= 2;\\n        }\\n        if (x >> 2 > 0) {\\n            result <<= 1;\\n        }\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = sqrt(a);\\n        if (rounding == Rounding.Up && result * result < a) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xd15c3e400531f00203839159b2b8e7209c5158b35618f570c695b7e47f12e9f0\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":183,"contract":"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol:ERC4626","label":"_balances","offset":0,"slot":"0","type":"t_mapping(t_address,t_uint256)"},{"astId":189,"contract":"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol:ERC4626","label":"_allowances","offset":0,"slot":"1","type":"t_mapping(t_address,t_mapping(t_address,t_uint256))"},{"astId":191,"contract":"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol:ERC4626","label":"_totalSupply","offset":0,"slot":"2","type":"t_uint256"},{"astId":193,"contract":"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol:ERC4626","label":"_name","offset":0,"slot":"3","type":"t_string_storage"},{"astId":195,"contract":"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol:ERC4626","label":"_symbol","offset":0,"slot":"4","type":"t_string_storage"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_mapping(t_address,t_mapping(t_address,t_uint256))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => uint256))","numberOfBytes":"32","value":"t_mapping(t_address,t_uint256)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol":{"IERC20Metadata":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface for the optional metadata functions from the ERC20 standard. _Available since v4.1._","kind":"dev","methods":{"allowance(address,address)":{"details":"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."},"approve(address,uint256)":{"details":"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the amount of tokens owned by `account`."},"decimals()":{"details":"Returns the decimals places of the token."},"name()":{"details":"Returns the name of the token."},"symbol()":{"details":"Returns the symbol of the token."},"totalSupply()":{"details":"Returns the amount of tokens in existence."},"transfer(address,uint256)":{"details":"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."},"transferFrom(address,address,uint256)":{"details":"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."}},"version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","decimals()":"313ce567","name()":"06fdde03","symbol()":"95d89b41","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for the optional metadata functions from the ERC20 standard. _Available since v4.1._\",\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"decimals()\":{\"details\":\"Returns the decimals places of the token.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":\"IERC20Metadata\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol":{"IERC20Permit":{"abi":[{"inputs":[],"name":"DOMAIN_SEPARATOR","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"nonces","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"permit","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all.","kind":"dev","methods":{"DOMAIN_SEPARATOR()":{"details":"Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."},"nonces(address)":{"details":"Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times."},"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)":{"details":"Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]."}},"version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"DOMAIN_SEPARATOR()":"3644e515","nonces(address)":"7ecebe00","permit(address,address,uint256,uint256,uint8,bytes32,bytes32)":"d505accf"}},"metadata":"{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all.\",\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\"},\"nonces(address)\":{\"details\":\"Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section].\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":\"IERC20Permit\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol":{"SafeERC20":{"abi":[],"devdoc":{"details":"Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.","kind":"dev","methods":{},"title":"SafeERC20","version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220cf3bd1b06e4e57f941f4757fea8cb1ac822da9d396991a8c0c1892657cdd132464736f6c63430008040033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xCF EXTCODESIZE 0xD1 0xB0 PUSH15 0x4E57F941F4757FEA8CB1AC822DA9D3 SWAP7 SWAP10 BYTE DUP13 0xC XOR SWAP3 PUSH6 0x7CDD13246473 PUSH16 0x6C634300080400330000000000000000 ","sourceMap":"707:3748:6:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;707:3748:6;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220cf3bd1b06e4e57f941f4757fea8cb1ac822da9d396991a8c0c1892657cdd132464736f6c63430008040033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xCF EXTCODESIZE 0xD1 0xB0 PUSH15 0x4E57F941F4757FEA8CB1AC822DA9D3 SWAP7 SWAP10 BYTE DUP13 0xC XOR SWAP3 PUSH6 0x7CDD13246473 PUSH16 0x6C634300080400330000000000000000 ","sourceMap":"707:3748:6:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"_callOptionalReturn(contract IERC20,bytes memory)":"infinite","safeApprove(contract IERC20,address,uint256)":"infinite","safeDecreaseAllowance(contract IERC20,address,uint256)":"infinite","safeIncreaseAllowance(contract IERC20,address,uint256)":"infinite","safePermit(contract IERC20Permit,address,address,uint256,uint256,uint8,bytes32,bytes32)":"infinite","safeTransfer(contract IERC20,address,uint256)":"infinite","safeTransferFrom(contract IERC20,address,address,uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\",\"kind\":\"dev\",\"methods\":{},\"title\":\"SafeERC20\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":\"SafeERC20\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x032807210d1d7d218963d7355d62e021a84bf1b3339f4f50be2f63b53cccaf29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Address.sol":{"Address":{"abi":[],"devdoc":{"details":"Collection of functions related to the address type","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220d35af10dd2db1375e18a90b781f080d06d6d5fa5080333dc2d4182623fbb4b2464736f6c63430008040033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD3 GAS CALL 0xD 0xD2 0xDB SGT PUSH22 0xE18A90B781F080D06D6D5FA5080333DC2D4182623FBB 0x4B 0x24 PUSH5 0x736F6C6343 STOP ADDMOD DIV STOP CALLER ","sourceMap":"194:8111:7:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;194:8111:7;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220d35af10dd2db1375e18a90b781f080d06d6d5fa5080333dc2d4182623fbb4b2464736f6c63430008040033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD3 GAS CALL 0xD 0xD2 0xDB SGT PUSH22 0xE18A90B781F080D06D6D5FA5080333DC2D4182623FBB 0x4B 0x24 PUSH5 0x736F6C6343 STOP ADDMOD DIV STOP CALLER ","sourceMap":"194:8111:7:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"functionCall(address,bytes memory)":"infinite","functionCall(address,bytes memory,string memory)":"infinite","functionCallWithValue(address,bytes memory,uint256)":"infinite","functionCallWithValue(address,bytes memory,uint256,string memory)":"infinite","functionDelegateCall(address,bytes memory)":"infinite","functionDelegateCall(address,bytes memory,string memory)":"infinite","functionStaticCall(address,bytes memory)":"infinite","functionStaticCall(address,bytes memory,string memory)":"infinite","isContract(address)":"infinite","sendValue(address payable,uint256)":"infinite","verifyCallResult(bool,bytes memory,string memory)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Address.sol\":\"Address\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Context.sol":{"Context":{"abi":[],"devdoc":{"details":"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/math/Math.sol":{"Math":{"abi":[],"devdoc":{"details":"Standard math utilities missing in the Solidity language.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122046c16e9e2f81e894509346fdb6ea5c6deba3ead84e69349cc03d80f9c8e78fe864736f6c63430008040033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CHAINID 0xC1 PUSH15 0x9E2F81E894509346FDB6EA5C6DEBA3 0xEA 0xD8 0x4E PUSH10 0x349CC03D80F9C8E78FE8 PUSH5 0x736F6C6343 STOP ADDMOD DIV STOP CALLER ","sourceMap":"202:8624:9:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;202:8624:9;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122046c16e9e2f81e894509346fdb6ea5c6deba3ead84e69349cc03d80f9c8e78fe864736f6c63430008040033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CHAINID 0xC1 PUSH15 0x9E2F81E894509346FDB6EA5C6DEBA3 0xEA 0xD8 0x4E PUSH10 0x349CC03D80F9C8E78FE8 PUSH5 0x736F6C6343 STOP ADDMOD DIV STOP CALLER ","sourceMap":"202:8624:9:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"average(uint256,uint256)":"infinite","ceilDiv(uint256,uint256)":"infinite","max(uint256,uint256)":"infinite","min(uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256,enum Math.Rounding)":"infinite","sqrt(uint256)":"infinite","sqrt(uint256,enum Math.Rounding)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Standard math utilities missing in the Solidity language.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/math/Math.sol\":\"Math\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. It the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`.\\n        // We also know that `k`, the position of the most significant bit, is such that `msb(a) = 2**k`.\\n        // This gives `2**k < a <= 2**(k+1)` \\u2192 `2**(k/2) <= sqrt(a) < 2 ** (k/2+1)`.\\n        // Using an algorithm similar to the msb conmputation, we are able to compute `result = 2**(k/2)` which is a\\n        // good first aproximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1;\\n        uint256 x = a;\\n        if (x >> 128 > 0) {\\n            x >>= 128;\\n            result <<= 64;\\n        }\\n        if (x >> 64 > 0) {\\n            x >>= 64;\\n            result <<= 32;\\n        }\\n        if (x >> 32 > 0) {\\n            x >>= 32;\\n            result <<= 16;\\n        }\\n        if (x >> 16 > 0) {\\n            x >>= 16;\\n            result <<= 8;\\n        }\\n        if (x >> 8 > 0) {\\n            x >>= 8;\\n            result <<= 4;\\n        }\\n        if (x >> 4 > 0) {\\n            x >>= 4;\\n            result <<= 2;\\n        }\\n        if (x >> 2 > 0) {\\n            result <<= 1;\\n        }\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = sqrt(a);\\n        if (rounding == Rounding.Up && result * result < a) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xd15c3e400531f00203839159b2b8e7209c5158b35618f570c695b7e47f12e9f0\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/Drip.sol":{"DRIP":{"abi":[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"caller","type":"address"},{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":false,"internalType":"uint256","name":"assets","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"shares","type":"uint256"}],"name":"Deposit","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"caller","type":"address"},{"indexed":true,"internalType":"address","name":"receiver","type":"address"},{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":false,"internalType":"uint256","name":"assets","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"shares","type":"uint256"}],"name":"Withdraw","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"asset","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"shares","type":"uint256"}],"name":"convertToAssets","outputs":[{"internalType":"uint256","name":"assets","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"assets","type":"uint256"}],"name":"convertToShares","outputs":[{"internalType":"uint256","name":"shares","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"subtractedValue","type":"uint256"}],"name":"decreaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"assets","type":"uint256"},{"internalType":"address","name":"receiver","type":"address"}],"name":"deposit","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"assets","type":"uint256"},{"internalType":"address","name":"receiver","type":"address"},{"internalType":"uint256","name":"minOut","type":"uint256"}],"name":"deposit","outputs":[{"internalType":"uint256","name":"result","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"addedValue","type":"uint256"}],"name":"increaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"maxDeposit","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"maxMint","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"maxRedeem","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"maxWithdraw","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"shares","type":"uint256"},{"internalType":"address","name":"receiver","type":"address"},{"internalType":"uint256","name":"minOut","type":"uint256"}],"name":"mint","outputs":[{"internalType":"uint256","name":"result","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"shares","type":"uint256"},{"internalType":"address","name":"receiver","type":"address"}],"name":"mint","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"assets","type":"uint256"}],"name":"previewDeposit","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"shares","type":"uint256"}],"name":"previewMint","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"shares","type":"uint256"}],"name":"previewRedeem","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"assets","type":"uint256"}],"name":"previewWithdraw","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"shares","type":"uint256"},{"internalType":"address","name":"receiver","type":"address"},{"internalType":"address","name":"owner","type":"address"},{"internalType":"uint256","name":"minOut","type":"uint256"}],"name":"redeem","outputs":[{"internalType":"uint256","name":"result","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"shares","type":"uint256"},{"internalType":"address","name":"receiver","type":"address"},{"internalType":"address","name":"owner","type":"address"}],"name":"redeem","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalAssets","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"assets","type":"uint256"},{"internalType":"address","name":"receiver","type":"address"},{"internalType":"address","name":"owner","type":"address"},{"internalType":"uint256","name":"minOut","type":"uint256"}],"name":"withdraw","outputs":[{"internalType":"uint256","name":"result","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"assets","type":"uint256"},{"internalType":"address","name":"receiver","type":"address"},{"internalType":"address","name":"owner","type":"address"}],"name":"withdraw","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"allowance(address,address)":{"details":"See {IERC20-allowance}."},"approve(address,uint256)":{"details":"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."},"asset()":{"details":"See {IERC4262-asset}. "},"balanceOf(address)":{"details":"See {IERC20-balanceOf}."},"convertToAssets(uint256)":{"details":"See {IERC4262-convertToAssets}. "},"convertToShares(uint256)":{"details":"See {IERC4262-convertToShares}. "},"decimals()":{"details":"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."},"decreaseAllowance(address,uint256)":{"details":"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."},"deposit(uint256,address)":{"details":"See {IERC4262-deposit}. "},"increaseAllowance(address,uint256)":{"details":"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."},"maxDeposit(address)":{"details":"See {IERC4262-maxDeposit}. "},"maxMint(address)":{"details":"See {IERC4262-maxMint}. "},"maxRedeem(address)":{"details":"See {IERC4262-maxRedeem}. "},"maxWithdraw(address)":{"details":"See {IERC4262-maxWithdraw}. "},"mint(uint256,address)":{"details":"See {IERC4262-mint}. "},"name()":{"details":"Returns the name of the token."},"previewDeposit(uint256)":{"details":"See {IERC4262-previewDeposit}. "},"previewMint(uint256)":{"details":"See {IERC4262-previewMint}. "},"previewRedeem(uint256)":{"details":"See {IERC4262-previewRedeem}. "},"previewWithdraw(uint256)":{"details":"See {IERC4262-previewWithdraw}. "},"redeem(uint256,address,address)":{"details":"See {IERC4262-redeem}. "},"symbol()":{"details":"Returns the symbol of the token, usually a shorter version of the name."},"totalAssets()":{"details":"See {IERC4262-totalAssets}. "},"totalSupply()":{"details":"See {IERC20-totalSupply}."},"transfer(address,uint256)":{"details":"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."},"transferFrom(address,address,uint256)":{"details":"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."},"withdraw(uint256,address,address)":{"details":"See {IERC4262-withdraw}. "}},"version":1},"evm":{"bytecode":{"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:396:11","statements":[{"nodeType":"YulBlock","src":"6:3:11","statements":[]},{"body":{"nodeType":"YulBlock","src":"69:325:11","statements":[{"nodeType":"YulAssignment","src":"79:22:11","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"93:1:11","type":"","value":"1"},{"name":"data","nodeType":"YulIdentifier","src":"96:4:11"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"89:3:11"},"nodeType":"YulFunctionCall","src":"89:12:11"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"79:6:11"}]},{"nodeType":"YulVariableDeclaration","src":"110:38:11","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"140:4:11"},{"kind":"number","nodeType":"YulLiteral","src":"146:1:11","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"136:3:11"},"nodeType":"YulFunctionCall","src":"136:12:11"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"114:18:11","type":""}]},{"body":{"nodeType":"YulBlock","src":"187:31:11","statements":[{"nodeType":"YulAssignment","src":"189:27:11","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"203:6:11"},{"kind":"number","nodeType":"YulLiteral","src":"211:4:11","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"199:3:11"},"nodeType":"YulFunctionCall","src":"199:17:11"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"189:6:11"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"167:18:11"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"160:6:11"},"nodeType":"YulFunctionCall","src":"160:26:11"},"nodeType":"YulIf","src":"157:2:11"},{"body":{"nodeType":"YulBlock","src":"277:111:11","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"298:1:11","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"305:3:11","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"310:10:11","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"301:3:11"},"nodeType":"YulFunctionCall","src":"301:20:11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"291:6:11"},"nodeType":"YulFunctionCall","src":"291:31:11"},"nodeType":"YulExpressionStatement","src":"291:31:11"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"342:1:11","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"345:4:11","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"335:6:11"},"nodeType":"YulFunctionCall","src":"335:15:11"},"nodeType":"YulExpressionStatement","src":"335:15:11"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"370:1:11","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"373:4:11","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"363:6:11"},"nodeType":"YulFunctionCall","src":"363:15:11"},"nodeType":"YulExpressionStatement","src":"363:15:11"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"233:18:11"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"256:6:11"},{"kind":"number","nodeType":"YulLiteral","src":"264:2:11","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"253:2:11"},"nodeType":"YulFunctionCall","src":"253:14:11"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"230:2:11"},"nodeType":"YulFunctionCall","src":"230:38:11"},"nodeType":"YulIf","src":"227:2:11"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"49:4:11","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"58:6:11","type":""}],"src":"14:380:11"}]},"contents":"{\n    { }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n}","id":11,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"60a06040523480156200001157600080fd5b506040805180820182526004808252630445249560e41b60208084018281528551808701909652928552840152815173eb4c2781e4eba804ce9a9803c67d0893436bb27d939162000066916003919062000095565b5080516200007c90600490602084019062000095565b50505060601b6001600160601b03191660805262000178565b828054620000a3906200013b565b90600052602060002090601f016020900481019282620000c7576000855562000112565b82601f10620000e257805160ff191683800117855562000112565b8280016001018555821562000112579182015b8281111562000112578251825591602001919060010190620000f5565b506200012092915062000124565b5090565b5b8082111562000120576000815560010162000125565b600181811c908216806200015057607f821691505b602082108114156200017257634e487b7160e01b600052602260045260246000fd5b50919050565b60805160601c611c3a620001ba6000396000818161029a0152818161046501528181610bde01528181610ded015281816110e301526111a30152611c3a6000f3fe608060405234801561001057600080fd5b50600436106101e55760003560e01c806394bf804d1161010f578063ba087652116100a2578063ce96cb7711610071578063ce96cb7714610414578063d905777e14610427578063dd62ed3e1461043a578063ef8b30f71461040157600080fd5b8063ba087652146103c6578063bc157ac1146103d9578063c63d75b6146103ec578063c6e6f5921461040157600080fd5b8063a457c2d7116100de578063a457c2d71461037a578063a9059cbb1461038d578063b3d7f6b9146103a0578063b460af94146103b357600080fd5b806394bf804d1461033957806395d89b411461034c5780639f40a7b314610354578063a318c1a41461036757600080fd5b8063313ce567116101875780634cdad506116101565780634cdad5061461021a5780636e553f65146102ea57806370a08231146102fd578063836a10401461032657600080fd5b8063313ce5671461027e57806338d52e0f1461028d57806339509351146102c4578063402d267d146102d757600080fd5b8063095ea7b3116101c3578063095ea7b31461022d5780630a28a4771461025057806318160ddd1461026357806323b872dd1461026b57600080fd5b806301e1d114146101ea57806306fdde031461020557806307a2d13a1461021a575b600080fd5b6101f261044d565b6040519081526020015b60405180910390f35b61020d6104ec565b6040516101fc9190611a37565b6101f2610228366004611906565b61057e565b61024061023b3660046118bd565b610591565b60405190151581526020016101fc565b6101f261025e366004611906565b6105a9565b6002546101f2565b610240610279366004611882565b6105b6565b604051601281526020016101fc565b6040516001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001681526020016101fc565b6102406102d23660046118bd565b6105dc565b6101f26102e5366004611836565b6105fe565b6101f26102f8366004611936565b61061c565b6101f261030b366004611836565b6001600160a01b031660009081526020819052604090205490565b6101f26103343660046119d6565b610694565b6101f2610347366004611936565b610732565b61020d61074c565b6101f2610362366004611993565b61075b565b6101f2610375366004611993565b6108e1565b6102406103883660046118bd565b61097e565b61024061039b3660046118bd565b610a04565b6101f26103ae366004611906565b610a12565b6101f26103c1366004611958565b610a1f565b6101f26103d4366004611958565b610a9b565b6101f26103e73660046119d6565b610b0f565b6101f26103fa366004611836565b5060001990565b6101f261040f366004611906565b610b32565b6101f2610422366004611836565b610b3f565b6101f2610435366004611836565b610b63565b6101f2610448366004611850565b610b81565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b1580156104af57600080fd5b505afa1580156104c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104e7919061191e565b905090565b6060600380546104fb90611bb3565b80601f016020809104026020016040519081016040528092919081815260200182805461052790611bb3565b80156105745780601f1061054957610100808354040283529160200191610574565b820191906000526020600020905b81548152906001019060200180831161055757829003601f168201915b5050505050905090565b600061058b826000610bac565b92915050565b60003361059f818585610c8f565b5060019392505050565b600061058b826001610db3565b6000336105c4858285610e7c565b6105cf858585610ef6565b60019150505b9392505050565b60003361059f8185856105ef8383610b81565b6105f99190611a6a565b610c8f565b60006106086110c4565b61061357600061058b565b60001992915050565b6000610627826105fe565b83111561067b5760405162461bcd60e51b815260206004820152601e60248201527f455243343632363a206465706f736974206d6f7265207468616e206d6178000060448201526064015b60405180910390fd5b600061068684610b32565b90506105d5338486846110de565b6001600160a01b0382166000908152602081905260408120546106b78585610732565b50806106d8856001600160a01b031660009081526020819052604090205490565b6106e29190611b70565b91508282101561072a5760405162461bcd60e51b8152602060048201526013602482015272151bdbc81b1a5d1d1b19481c9958d95a5d9959606a1b6044820152606401610672565b509392505050565b60008061073e84610a12565b90506105d5338483876110de565b6060600480546104fb90611bb3565b6040516370a0823160e01b81526001600160a01b0384166004820152600090819073eb4c2781e4eba804ce9a9803c67d0893436bb27d906370a082319060240160206040518083038186803b1580156107b357600080fd5b505afa1580156107c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107eb919061191e565b90506107f8868686610a9b565b506040516370a0823160e01b81526001600160a01b0386166004820152819073eb4c2781e4eba804ce9a9803c67d0893436bb27d906370a082319060240160206040518083038186803b15801561084e57600080fd5b505afa158015610862573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610886919061191e565b6108909190611b70565b9150828210156108d85760405162461bcd60e51b8152602060048201526013602482015272151bdbc81b1a5d1d1b19481c9958d95a5d9959606a1b6044820152606401610672565b50949350505050565b6040516370a0823160e01b81526001600160a01b0384166004820152600090819073eb4c2781e4eba804ce9a9803c67d0893436bb27d906370a082319060240160206040518083038186803b15801561093957600080fd5b505afa15801561094d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610971919061191e565b90506107f8868686610a1f565b6000338161098c8286610b81565b9050838110156109ec5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610672565b6109f98286868403610c8f565b506001949350505050565b60003361059f818585610ef6565b600061058b826001610bac565b6000610a2a82610b3f565b841115610a795760405162461bcd60e51b815260206004820152601f60248201527f455243343632363a207769746864726177206d6f7265207468616e206d6178006044820152606401610672565b6000610a84856105a9565b9050610a933385858885611170565b949350505050565b6000610aa682610b63565b841115610af55760405162461bcd60e51b815260206004820152601d60248201527f455243343632363a2072656465656d206d6f7265207468616e206d61780000006044820152606401610672565b6000610b008561057e565b9050610a933385858489611170565b6001600160a01b0382166000908152602081905260408120546106b7858561061c565b600061058b826000610db3565b6001600160a01b03811660009081526020819052604081205461058b906000610bac565b6001600160a01b03811660009081526020819052604081205461058b565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b600080610bb860025490565b90508015610bd957610bd4610bcb61044d565b85908386611230565b610a93565b610a937f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610c3557600080fd5b505afa158015610c49573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c6d91906119fa565b610c7890600a611ac5565b60125b610c8690600a611ac5565b86919086611230565b6001600160a01b038316610cf15760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610672565b6001600160a01b038216610d525760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610672565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b600080610dbf60025490565b9050831580610dcc575080155b610ddc57610bd481610c8661044d565b610a93610deb6012600a611ac5565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610e4457600080fd5b505afa158015610e58573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c7b91906119fa565b6000610e888484610b81565b90506000198114610ef05781811015610ee35760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610672565b610ef08484848403610c8f565b50505050565b6001600160a01b038316610f5a5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610672565b6001600160a01b038216610fbc5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610672565b6001600160a01b038316600090815260208190526040902054818110156110345760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610672565b6001600160a01b0380851660009081526020819052604080822085850390559185168152908120805484929061106b908490611a6a565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516110b791815260200190565b60405180910390a3610ef0565b6000806110cf61044d565b11806104e75750506002541590565b61110a7f00000000000000000000000000000000000000000000000000000000000000008530856112ae565b6111148382611319565b826001600160a01b0316846001600160a01b03167fdcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d78484604051611162929190918252602082015260400190565b60405180910390a350505050565b826001600160a01b0316856001600160a01b03161461119457611194838683610e7c565b61119e83826113f8565b6111c97f00000000000000000000000000000000000000000000000000000000000000008584611546565b826001600160a01b0316846001600160a01b0316866001600160a01b03167ffbde797d201c681b91056529119e0b02407c7bb96a4a2c75c01fc9667232c8db8585604051611221929190918252602082015260400190565b60405180910390a45050505050565b60008061123e868686611576565b9050600183600281111561126257634e487b7160e01b600052602160045260246000fd5b14801561128d57506000848061128857634e487b7160e01b600052601260045260246000fd5b868809115b156112a05761129d600182611a6a565b90505b95945050505050565b505050565b6040516001600160a01b0380851660248301528316604482015260648101829052610ef09085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611634565b6001600160a01b03821661136f5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610672565b80600260008282546113819190611a6a565b90915550506001600160a01b038216600090815260208190526040812080548392906113ae908490611a6a565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b6001600160a01b0382166114585760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401610672565b6001600160a01b038216600090815260208190526040902054818110156114cc5760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401610672565b6001600160a01b03831660009081526020819052604081208383039055600280548492906114fb908490611b70565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a3505050565b6040516001600160a01b0383166024820152604481018290526112a990849063a9059cbb60e01b906064016112e2565b6000808060001985870985870292508281108382030391505080600014156115bf578382816115b557634e487b7160e01b600052601260045260246000fd5b04925050506105d5565b8084116115cb57600080fd5b60008486880960026001871981018816978890046003810283188082028403028082028403028082028403028082028403028082028403029081029092039091026000889003889004909101858311909403939093029303949094049190911702949350505050565b6000611689826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166117069092919063ffffffff16565b8051909150156112a957808060200190518101906116a791906118e6565b6112a95760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610672565b6060610a938484600085856001600160a01b0385163b6117685760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610672565b600080866001600160a01b031685876040516117849190611a1b565b60006040518083038185875af1925050503d80600081146117c1576040519150601f19603f3d011682016040523d82523d6000602084013e6117c6565b606091505b50915091506117d68282866117e1565b979650505050505050565b606083156117f05750816105d5565b8251156118005782518084602001fd5b8160405162461bcd60e51b81526004016106729190611a37565b80356001600160a01b038116811461183157600080fd5b919050565b600060208284031215611847578081fd5b6105d58261181a565b60008060408385031215611862578081fd5b61186b8361181a565b91506118796020840161181a565b90509250929050565b600080600060608486031215611896578081fd5b61189f8461181a565b92506118ad6020850161181a565b9150604084013590509250925092565b600080604083850312156118cf578182fd5b6118d88361181a565b946020939093013593505050565b6000602082840312156118f7578081fd5b815180151581146105d5578182fd5b600060208284031215611917578081fd5b5035919050565b60006020828403121561192f578081fd5b5051919050565b60008060408385031215611948578182fd5b823591506118796020840161181a565b60008060006060848603121561196c578283fd5b8335925061197c6020850161181a565b915061198a6040850161181a565b90509250925092565b600080600080608085870312156119a8578081fd5b843593506119b86020860161181a565b92506119c66040860161181a565b9396929550929360600135925050565b6000806000606084860312156119ea578283fd5b833592506118ad6020850161181a565b600060208284031215611a0b578081fd5b815160ff811681146105d5578182fd5b60008251611a2d818460208701611b87565b9190910192915050565b6020815260008251806020840152611a56816040850160208701611b87565b601f01601f19169190910160400192915050565b60008219821115611a7d57611a7d611bee565b500190565b600181815b80851115611abd578160001904821115611aa357611aa3611bee565b80851615611ab057918102915b93841c9390800290611a87565b509250929050565b60006105d560ff841683600082611ade5750600161058b565b81611aeb5750600061058b565b8160018114611b015760028114611b0b57611b27565b600191505061058b565b60ff841115611b1c57611b1c611bee565b50506001821b61058b565b5060208310610133831016604e8410600b8410161715611b4a575081810a61058b565b611b548383611a82565b8060001904821115611b6857611b68611bee565b029392505050565b600082821015611b8257611b82611bee565b500390565b60005b83811015611ba2578181015183820152602001611b8a565b83811115610ef05750506000910152565b600181811c90821680611bc757607f821691505b60208210811415611be857634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fdfea2646970667358221220333216fe75604df7e9fd7519fae33a6cbd122cdc5aeb260e0d3ef3febb01b8f864736f6c63430008040033","opcodes":"PUSH1 0xA0 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD DUP3 MSTORE PUSH1 0x4 DUP1 DUP3 MSTORE PUSH4 0x4452495 PUSH1 0xE4 SHL PUSH1 0x20 DUP1 DUP5 ADD DUP3 DUP2 MSTORE DUP6 MLOAD DUP1 DUP8 ADD SWAP1 SWAP7 MSTORE SWAP3 DUP6 MSTORE DUP5 ADD MSTORE DUP2 MLOAD PUSH20 0xEB4C2781E4EBA804CE9A9803C67D0893436BB27D SWAP4 SWAP2 PUSH3 0x66 SWAP2 PUSH1 0x3 SWAP2 SWAP1 PUSH3 0x95 JUMP JUMPDEST POP DUP1 MLOAD PUSH3 0x7C SWAP1 PUSH1 0x4 SWAP1 PUSH1 0x20 DUP5 ADD SWAP1 PUSH3 0x95 JUMP JUMPDEST POP POP POP PUSH1 0x60 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB NOT AND PUSH1 0x80 MSTORE PUSH3 0x178 JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH3 0xA3 SWAP1 PUSH3 0x13B JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH3 0xC7 JUMPI PUSH1 0x0 DUP6 SSTORE PUSH3 0x112 JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH3 0xE2 JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH3 0x112 JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH3 0x112 JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH3 0x112 JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH3 0xF5 JUMP JUMPDEST POP PUSH3 0x120 SWAP3 SWAP2 POP PUSH3 0x124 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH3 0x120 JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH3 0x125 JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH3 0x150 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH3 0x172 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH1 0x60 SHR PUSH2 0x1C3A PUSH3 0x1BA PUSH1 0x0 CODECOPY PUSH1 0x0 DUP2 DUP2 PUSH2 0x29A ADD MSTORE DUP2 DUP2 PUSH2 0x465 ADD MSTORE DUP2 DUP2 PUSH2 0xBDE ADD MSTORE DUP2 DUP2 PUSH2 0xDED ADD MSTORE DUP2 DUP2 PUSH2 0x10E3 ADD MSTORE PUSH2 0x11A3 ADD MSTORE PUSH2 0x1C3A PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x1E5 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x94BF804D GT PUSH2 0x10F JUMPI DUP1 PUSH4 0xBA087652 GT PUSH2 0xA2 JUMPI DUP1 PUSH4 0xCE96CB77 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0xCE96CB77 EQ PUSH2 0x414 JUMPI DUP1 PUSH4 0xD905777E EQ PUSH2 0x427 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x43A JUMPI DUP1 PUSH4 0xEF8B30F7 EQ PUSH2 0x401 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xBA087652 EQ PUSH2 0x3C6 JUMPI DUP1 PUSH4 0xBC157AC1 EQ PUSH2 0x3D9 JUMPI DUP1 PUSH4 0xC63D75B6 EQ PUSH2 0x3EC JUMPI DUP1 PUSH4 0xC6E6F592 EQ PUSH2 0x401 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xA457C2D7 GT PUSH2 0xDE JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x37A JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x38D JUMPI DUP1 PUSH4 0xB3D7F6B9 EQ PUSH2 0x3A0 JUMPI DUP1 PUSH4 0xB460AF94 EQ PUSH2 0x3B3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x94BF804D EQ PUSH2 0x339 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x34C JUMPI DUP1 PUSH4 0x9F40A7B3 EQ PUSH2 0x354 JUMPI DUP1 PUSH4 0xA318C1A4 EQ PUSH2 0x367 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x313CE567 GT PUSH2 0x187 JUMPI DUP1 PUSH4 0x4CDAD506 GT PUSH2 0x156 JUMPI DUP1 PUSH4 0x4CDAD506 EQ PUSH2 0x21A JUMPI DUP1 PUSH4 0x6E553F65 EQ PUSH2 0x2EA JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x2FD JUMPI DUP1 PUSH4 0x836A1040 EQ PUSH2 0x326 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x313CE567 EQ PUSH2 0x27E JUMPI DUP1 PUSH4 0x38D52E0F EQ PUSH2 0x28D JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x2C4 JUMPI DUP1 PUSH4 0x402D267D EQ PUSH2 0x2D7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x95EA7B3 GT PUSH2 0x1C3 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x22D JUMPI DUP1 PUSH4 0xA28A477 EQ PUSH2 0x250 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x263 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x26B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1E1D114 EQ PUSH2 0x1EA JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x205 JUMPI DUP1 PUSH4 0x7A2D13A EQ PUSH2 0x21A JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1F2 PUSH2 0x44D JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x20D PUSH2 0x4EC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1FC SWAP2 SWAP1 PUSH2 0x1A37 JUMP JUMPDEST PUSH2 0x1F2 PUSH2 0x228 CALLDATASIZE PUSH1 0x4 PUSH2 0x1906 JUMP JUMPDEST PUSH2 0x57E JUMP JUMPDEST PUSH2 0x240 PUSH2 0x23B CALLDATASIZE PUSH1 0x4 PUSH2 0x18BD JUMP JUMPDEST PUSH2 0x591 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1FC JUMP JUMPDEST PUSH2 0x1F2 PUSH2 0x25E CALLDATASIZE PUSH1 0x4 PUSH2 0x1906 JUMP JUMPDEST PUSH2 0x5A9 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH2 0x1F2 JUMP JUMPDEST PUSH2 0x240 PUSH2 0x279 CALLDATASIZE PUSH1 0x4 PUSH2 0x1882 JUMP JUMPDEST PUSH2 0x5B6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x12 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1FC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1FC JUMP JUMPDEST PUSH2 0x240 PUSH2 0x2D2 CALLDATASIZE PUSH1 0x4 PUSH2 0x18BD JUMP JUMPDEST PUSH2 0x5DC JUMP JUMPDEST PUSH2 0x1F2 PUSH2 0x2E5 CALLDATASIZE PUSH1 0x4 PUSH2 0x1836 JUMP JUMPDEST PUSH2 0x5FE JUMP JUMPDEST PUSH2 0x1F2 PUSH2 0x2F8 CALLDATASIZE PUSH1 0x4 PUSH2 0x1936 JUMP JUMPDEST PUSH2 0x61C JUMP JUMPDEST PUSH2 0x1F2 PUSH2 0x30B CALLDATASIZE PUSH1 0x4 PUSH2 0x1836 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x1F2 PUSH2 0x334 CALLDATASIZE PUSH1 0x4 PUSH2 0x19D6 JUMP JUMPDEST PUSH2 0x694 JUMP JUMPDEST PUSH2 0x1F2 PUSH2 0x347 CALLDATASIZE PUSH1 0x4 PUSH2 0x1936 JUMP JUMPDEST PUSH2 0x732 JUMP JUMPDEST PUSH2 0x20D PUSH2 0x74C JUMP JUMPDEST PUSH2 0x1F2 PUSH2 0x362 CALLDATASIZE PUSH1 0x4 PUSH2 0x1993 JUMP JUMPDEST PUSH2 0x75B JUMP JUMPDEST PUSH2 0x1F2 PUSH2 0x375 CALLDATASIZE PUSH1 0x4 PUSH2 0x1993 JUMP JUMPDEST PUSH2 0x8E1 JUMP JUMPDEST PUSH2 0x240 PUSH2 0x388 CALLDATASIZE PUSH1 0x4 PUSH2 0x18BD JUMP JUMPDEST PUSH2 0x97E JUMP JUMPDEST PUSH2 0x240 PUSH2 0x39B CALLDATASIZE PUSH1 0x4 PUSH2 0x18BD JUMP JUMPDEST PUSH2 0xA04 JUMP JUMPDEST PUSH2 0x1F2 PUSH2 0x3AE CALLDATASIZE PUSH1 0x4 PUSH2 0x1906 JUMP JUMPDEST PUSH2 0xA12 JUMP JUMPDEST PUSH2 0x1F2 PUSH2 0x3C1 CALLDATASIZE PUSH1 0x4 PUSH2 0x1958 JUMP JUMPDEST PUSH2 0xA1F JUMP JUMPDEST PUSH2 0x1F2 PUSH2 0x3D4 CALLDATASIZE PUSH1 0x4 PUSH2 0x1958 JUMP JUMPDEST PUSH2 0xA9B JUMP JUMPDEST PUSH2 0x1F2 PUSH2 0x3E7 CALLDATASIZE PUSH1 0x4 PUSH2 0x19D6 JUMP JUMPDEST PUSH2 0xB0F JUMP JUMPDEST PUSH2 0x1F2 PUSH2 0x3FA CALLDATASIZE PUSH1 0x4 PUSH2 0x1836 JUMP JUMPDEST POP PUSH1 0x0 NOT SWAP1 JUMP JUMPDEST PUSH2 0x1F2 PUSH2 0x40F CALLDATASIZE PUSH1 0x4 PUSH2 0x1906 JUMP JUMPDEST PUSH2 0xB32 JUMP JUMPDEST PUSH2 0x1F2 PUSH2 0x422 CALLDATASIZE PUSH1 0x4 PUSH2 0x1836 JUMP JUMPDEST PUSH2 0xB3F JUMP JUMPDEST PUSH2 0x1F2 PUSH2 0x435 CALLDATASIZE PUSH1 0x4 PUSH2 0x1836 JUMP JUMPDEST PUSH2 0xB63 JUMP JUMPDEST PUSH2 0x1F2 PUSH2 0x448 CALLDATASIZE PUSH1 0x4 PUSH2 0x1850 JUMP JUMPDEST PUSH2 0xB81 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x0 SWAP1 PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4AF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4C3 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4E7 SWAP2 SWAP1 PUSH2 0x191E JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH2 0x4FB SWAP1 PUSH2 0x1BB3 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x527 SWAP1 PUSH2 0x1BB3 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x574 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x549 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x574 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x557 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x58B DUP3 PUSH1 0x0 PUSH2 0xBAC JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x59F DUP2 DUP6 DUP6 PUSH2 0xC8F JUMP JUMPDEST POP PUSH1 0x1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x58B DUP3 PUSH1 0x1 PUSH2 0xDB3 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x5C4 DUP6 DUP3 DUP6 PUSH2 0xE7C JUMP JUMPDEST PUSH2 0x5CF DUP6 DUP6 DUP6 PUSH2 0xEF6 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x59F DUP2 DUP6 DUP6 PUSH2 0x5EF DUP4 DUP4 PUSH2 0xB81 JUMP JUMPDEST PUSH2 0x5F9 SWAP2 SWAP1 PUSH2 0x1A6A JUMP JUMPDEST PUSH2 0xC8F JUMP JUMPDEST PUSH1 0x0 PUSH2 0x608 PUSH2 0x10C4 JUMP JUMPDEST PUSH2 0x613 JUMPI PUSH1 0x0 PUSH2 0x58B JUMP JUMPDEST PUSH1 0x0 NOT SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x627 DUP3 PUSH2 0x5FE JUMP JUMPDEST DUP4 GT ISZERO PUSH2 0x67B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243343632363A206465706F736974206D6F7265207468616E206D61780000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x686 DUP5 PUSH2 0xB32 JUMP JUMPDEST SWAP1 POP PUSH2 0x5D5 CALLER DUP5 DUP7 DUP5 PUSH2 0x10DE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH2 0x6B7 DUP6 DUP6 PUSH2 0x732 JUMP JUMPDEST POP DUP1 PUSH2 0x6D8 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x6E2 SWAP2 SWAP1 PUSH2 0x1B70 JUMP JUMPDEST SWAP2 POP DUP3 DUP3 LT ISZERO PUSH2 0x72A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH19 0x151BDBC81B1A5D1D1B19481C9958D95A5D9959 PUSH1 0x6A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x672 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x73E DUP5 PUSH2 0xA12 JUMP JUMPDEST SWAP1 POP PUSH2 0x5D5 CALLER DUP5 DUP4 DUP8 PUSH2 0x10DE JUMP JUMPDEST PUSH1 0x60 PUSH1 0x4 DUP1 SLOAD PUSH2 0x4FB SWAP1 PUSH2 0x1BB3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x0 SWAP1 DUP2 SWAP1 PUSH20 0xEB4C2781E4EBA804CE9A9803C67D0893436BB27D SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x7B3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x7C7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x7EB SWAP2 SWAP1 PUSH2 0x191E JUMP JUMPDEST SWAP1 POP PUSH2 0x7F8 DUP7 DUP7 DUP7 PUSH2 0xA9B JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH1 0x4 DUP3 ADD MSTORE DUP2 SWAP1 PUSH20 0xEB4C2781E4EBA804CE9A9803C67D0893436BB27D SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x84E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x862 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x886 SWAP2 SWAP1 PUSH2 0x191E JUMP JUMPDEST PUSH2 0x890 SWAP2 SWAP1 PUSH2 0x1B70 JUMP JUMPDEST SWAP2 POP DUP3 DUP3 LT ISZERO PUSH2 0x8D8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH19 0x151BDBC81B1A5D1D1B19481C9958D95A5D9959 PUSH1 0x6A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x672 JUMP JUMPDEST POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x0 SWAP1 DUP2 SWAP1 PUSH20 0xEB4C2781E4EBA804CE9A9803C67D0893436BB27D SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x939 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x94D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x971 SWAP2 SWAP1 PUSH2 0x191E JUMP JUMPDEST SWAP1 POP PUSH2 0x7F8 DUP7 DUP7 DUP7 PUSH2 0xA1F JUMP JUMPDEST PUSH1 0x0 CALLER DUP2 PUSH2 0x98C DUP3 DUP7 PUSH2 0xB81 JUMP JUMPDEST SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0x9EC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x207A65726F PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x672 JUMP JUMPDEST PUSH2 0x9F9 DUP3 DUP7 DUP7 DUP5 SUB PUSH2 0xC8F JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x59F DUP2 DUP6 DUP6 PUSH2 0xEF6 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x58B DUP3 PUSH1 0x1 PUSH2 0xBAC JUMP JUMPDEST PUSH1 0x0 PUSH2 0xA2A DUP3 PUSH2 0xB3F JUMP JUMPDEST DUP5 GT ISZERO PUSH2 0xA79 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243343632363A207769746864726177206D6F7265207468616E206D617800 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x672 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xA84 DUP6 PUSH2 0x5A9 JUMP JUMPDEST SWAP1 POP PUSH2 0xA93 CALLER DUP6 DUP6 DUP9 DUP6 PUSH2 0x1170 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xAA6 DUP3 PUSH2 0xB63 JUMP JUMPDEST DUP5 GT ISZERO PUSH2 0xAF5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243343632363A2072656465656D206D6F7265207468616E206D6178000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x672 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB00 DUP6 PUSH2 0x57E JUMP JUMPDEST SWAP1 POP PUSH2 0xA93 CALLER DUP6 DUP6 DUP5 DUP10 PUSH2 0x1170 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH2 0x6B7 DUP6 DUP6 PUSH2 0x61C JUMP JUMPDEST PUSH1 0x0 PUSH2 0x58B DUP3 PUSH1 0x0 PUSH2 0xDB3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH2 0x58B SWAP1 PUSH1 0x0 PUSH2 0xBAC JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH2 0x58B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xBB8 PUSH1 0x2 SLOAD SWAP1 JUMP JUMPDEST SWAP1 POP DUP1 ISZERO PUSH2 0xBD9 JUMPI PUSH2 0xBD4 PUSH2 0xBCB PUSH2 0x44D JUMP JUMPDEST DUP6 SWAP1 DUP4 DUP7 PUSH2 0x1230 JUMP JUMPDEST PUSH2 0xA93 JUMP JUMPDEST PUSH2 0xA93 PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x313CE567 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xC35 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xC49 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xC6D SWAP2 SWAP1 PUSH2 0x19FA JUMP JUMPDEST PUSH2 0xC78 SWAP1 PUSH1 0xA PUSH2 0x1AC5 JUMP JUMPDEST PUSH1 0x12 JUMPDEST PUSH2 0xC86 SWAP1 PUSH1 0xA PUSH2 0x1AC5 JUMP JUMPDEST DUP7 SWAP2 SWAP1 DUP7 PUSH2 0x1230 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0xCF1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x672 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0xD52 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x7373 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x672 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP6 SWAP1 SSTORE SWAP1 MLOAD DUP5 DUP2 MSTORE PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xDBF PUSH1 0x2 SLOAD SWAP1 JUMP JUMPDEST SWAP1 POP DUP4 ISZERO DUP1 PUSH2 0xDCC JUMPI POP DUP1 ISZERO JUMPDEST PUSH2 0xDDC JUMPI PUSH2 0xBD4 DUP2 PUSH2 0xC86 PUSH2 0x44D JUMP JUMPDEST PUSH2 0xA93 PUSH2 0xDEB PUSH1 0x12 PUSH1 0xA PUSH2 0x1AC5 JUMP JUMPDEST PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x313CE567 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xE44 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xE58 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xC7B SWAP2 SWAP1 PUSH2 0x19FA JUMP JUMPDEST PUSH1 0x0 PUSH2 0xE88 DUP5 DUP5 PUSH2 0xB81 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 NOT DUP2 EQ PUSH2 0xEF0 JUMPI DUP2 DUP2 LT ISZERO PUSH2 0xEE3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x672 JUMP JUMPDEST PUSH2 0xEF0 DUP5 DUP5 DUP5 DUP5 SUB PUSH2 0xC8F JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0xF5A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x6472657373 PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x672 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0xFBC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x44 DUP3 ADD MSTORE PUSH3 0x657373 PUSH1 0xE8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x672 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0x1034 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x616C616E6365 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x672 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP6 DUP6 SUB SWAP1 SSTORE SWAP2 DUP6 AND DUP2 MSTORE SWAP1 DUP2 KECCAK256 DUP1 SLOAD DUP5 SWAP3 SWAP1 PUSH2 0x106B SWAP1 DUP5 SWAP1 PUSH2 0x1A6A JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP5 PUSH1 0x40 MLOAD PUSH2 0x10B7 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0xEF0 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x10CF PUSH2 0x44D JUMP JUMPDEST GT DUP1 PUSH2 0x4E7 JUMPI POP POP PUSH1 0x2 SLOAD ISZERO SWAP1 JUMP JUMPDEST PUSH2 0x110A PUSH32 0x0 DUP6 ADDRESS DUP6 PUSH2 0x12AE JUMP JUMPDEST PUSH2 0x1114 DUP4 DUP3 PUSH2 0x1319 JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xDCBC1C05240F31FF3AD067EF1EE35CE4997762752E3A095284754544F4C709D7 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH2 0x1162 SWAP3 SWAP2 SWAP1 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x1194 JUMPI PUSH2 0x1194 DUP4 DUP7 DUP4 PUSH2 0xE7C JUMP JUMPDEST PUSH2 0x119E DUP4 DUP3 PUSH2 0x13F8 JUMP JUMPDEST PUSH2 0x11C9 PUSH32 0x0 DUP6 DUP5 PUSH2 0x1546 JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xFBDE797D201C681B91056529119E0B02407C7BB96A4A2C75C01FC9667232C8DB DUP6 DUP6 PUSH1 0x40 MLOAD PUSH2 0x1221 SWAP3 SWAP2 SWAP1 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x123E DUP7 DUP7 DUP7 PUSH2 0x1576 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 DUP4 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x1262 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST EQ DUP1 ISZERO PUSH2 0x128D JUMPI POP PUSH1 0x0 DUP5 DUP1 PUSH2 0x1288 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP7 DUP9 MULMOD GT JUMPDEST ISZERO PUSH2 0x12A0 JUMPI PUSH2 0x129D PUSH1 0x1 DUP3 PUSH2 0x1A6A JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x24 DUP4 ADD MSTORE DUP4 AND PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0xEF0 SWAP1 DUP6 SWAP1 PUSH4 0x23B872DD PUSH1 0xE0 SHL SWAP1 PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE PUSH2 0x1634 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x136F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A206D696E7420746F20746865207A65726F206164647265737300 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x672 JUMP JUMPDEST DUP1 PUSH1 0x2 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x1381 SWAP2 SWAP1 PUSH2 0x1A6A JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD DUP4 SWAP3 SWAP1 PUSH2 0x13AE SWAP1 DUP5 SWAP1 PUSH2 0x1A6A JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 MLOAD DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH1 0x0 SWAP1 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x1458 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A206275726E2066726F6D20746865207A65726F20616464726573 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x73 PUSH1 0xF8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x672 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0x14CC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A206275726E20616D6F756E7420657863656564732062616C616E PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x6365 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x672 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP4 DUP4 SUB SWAP1 SSTORE PUSH1 0x2 DUP1 SLOAD DUP5 SWAP3 SWAP1 PUSH2 0x14FB SWAP1 DUP5 SWAP1 PUSH2 0x1B70 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 MLOAD DUP3 DUP2 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x12A9 SWAP1 DUP5 SWAP1 PUSH4 0xA9059CBB PUSH1 0xE0 SHL SWAP1 PUSH1 0x64 ADD PUSH2 0x12E2 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 PUSH1 0x0 NOT DUP6 DUP8 MULMOD DUP6 DUP8 MUL SWAP3 POP DUP3 DUP2 LT DUP4 DUP3 SUB SUB SWAP2 POP POP DUP1 PUSH1 0x0 EQ ISZERO PUSH2 0x15BF JUMPI DUP4 DUP3 DUP2 PUSH2 0x15B5 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DIV SWAP3 POP POP POP PUSH2 0x5D5 JUMP JUMPDEST DUP1 DUP5 GT PUSH2 0x15CB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP5 DUP7 DUP9 MULMOD PUSH1 0x2 PUSH1 0x1 DUP8 NOT DUP2 ADD DUP9 AND SWAP8 DUP9 SWAP1 DIV PUSH1 0x3 DUP2 MUL DUP4 XOR DUP1 DUP3 MUL DUP5 SUB MUL DUP1 DUP3 MUL DUP5 SUB MUL DUP1 DUP3 MUL DUP5 SUB MUL DUP1 DUP3 MUL DUP5 SUB MUL DUP1 DUP3 MUL DUP5 SUB MUL SWAP1 DUP2 MUL SWAP1 SWAP3 SUB SWAP1 SWAP2 MUL PUSH1 0x0 DUP9 SWAP1 SUB DUP9 SWAP1 DIV SWAP1 SWAP2 ADD DUP6 DUP4 GT SWAP1 SWAP5 SUB SWAP4 SWAP1 SWAP4 MUL SWAP4 SUB SWAP5 SWAP1 SWAP5 DIV SWAP2 SWAP1 SWAP2 OR MUL SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1689 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1706 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP2 POP ISZERO PUSH2 0x12A9 JUMPI DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x16A7 SWAP2 SWAP1 PUSH2 0x18E6 JUMP JUMPDEST PUSH2 0x12A9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x44 DUP3 ADD MSTORE PUSH10 0x1BDD081CDD58D8D95959 PUSH1 0xB2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x672 JUMP JUMPDEST PUSH1 0x60 PUSH2 0xA93 DUP5 DUP5 PUSH1 0x0 DUP6 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND EXTCODESIZE PUSH2 0x1768 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x672 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 DUP8 PUSH1 0x40 MLOAD PUSH2 0x1784 SWAP2 SWAP1 PUSH2 0x1A1B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x17C1 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x17C6 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x17D6 DUP3 DUP3 DUP7 PUSH2 0x17E1 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x17F0 JUMPI POP DUP2 PUSH2 0x5D5 JUMP JUMPDEST DUP3 MLOAD ISZERO PUSH2 0x1800 JUMPI DUP3 MLOAD DUP1 DUP5 PUSH1 0x20 ADD REVERT JUMPDEST DUP2 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x672 SWAP2 SWAP1 PUSH2 0x1A37 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x1831 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1847 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x5D5 DUP3 PUSH2 0x181A JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1862 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x186B DUP4 PUSH2 0x181A JUMP JUMPDEST SWAP2 POP PUSH2 0x1879 PUSH1 0x20 DUP5 ADD PUSH2 0x181A JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1896 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x189F DUP5 PUSH2 0x181A JUMP JUMPDEST SWAP3 POP PUSH2 0x18AD PUSH1 0x20 DUP6 ADD PUSH2 0x181A JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x18CF JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x18D8 DUP4 PUSH2 0x181A JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x18F7 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x5D5 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1917 JUMPI DUP1 DUP2 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x192F JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1948 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH2 0x1879 PUSH1 0x20 DUP5 ADD PUSH2 0x181A JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x196C JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 CALLDATALOAD SWAP3 POP PUSH2 0x197C PUSH1 0x20 DUP6 ADD PUSH2 0x181A JUMP JUMPDEST SWAP2 POP PUSH2 0x198A PUSH1 0x40 DUP6 ADD PUSH2 0x181A JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x19A8 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP5 CALLDATALOAD SWAP4 POP PUSH2 0x19B8 PUSH1 0x20 DUP7 ADD PUSH2 0x181A JUMP JUMPDEST SWAP3 POP PUSH2 0x19C6 PUSH1 0x40 DUP7 ADD PUSH2 0x181A JUMP JUMPDEST SWAP4 SWAP7 SWAP3 SWAP6 POP SWAP3 SWAP4 PUSH1 0x60 ADD CALLDATALOAD SWAP3 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x19EA JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 CALLDATALOAD SWAP3 POP PUSH2 0x18AD PUSH1 0x20 DUP6 ADD PUSH2 0x181A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1A0B JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH1 0xFF DUP2 AND DUP2 EQ PUSH2 0x5D5 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x1A2D DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x1B87 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x1A56 DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x1B87 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x1A7D JUMPI PUSH2 0x1A7D PUSH2 0x1BEE JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 JUMPDEST DUP1 DUP6 GT ISZERO PUSH2 0x1ABD JUMPI DUP2 PUSH1 0x0 NOT DIV DUP3 GT ISZERO PUSH2 0x1AA3 JUMPI PUSH2 0x1AA3 PUSH2 0x1BEE JUMP JUMPDEST DUP1 DUP6 AND ISZERO PUSH2 0x1AB0 JUMPI SWAP2 DUP2 MUL SWAP2 JUMPDEST SWAP4 DUP5 SHR SWAP4 SWAP1 DUP1 MUL SWAP1 PUSH2 0x1A87 JUMP JUMPDEST POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5D5 PUSH1 0xFF DUP5 AND DUP4 PUSH1 0x0 DUP3 PUSH2 0x1ADE JUMPI POP PUSH1 0x1 PUSH2 0x58B JUMP JUMPDEST DUP2 PUSH2 0x1AEB JUMPI POP PUSH1 0x0 PUSH2 0x58B JUMP JUMPDEST DUP2 PUSH1 0x1 DUP2 EQ PUSH2 0x1B01 JUMPI PUSH1 0x2 DUP2 EQ PUSH2 0x1B0B JUMPI PUSH2 0x1B27 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP PUSH2 0x58B JUMP JUMPDEST PUSH1 0xFF DUP5 GT ISZERO PUSH2 0x1B1C JUMPI PUSH2 0x1B1C PUSH2 0x1BEE JUMP JUMPDEST POP POP PUSH1 0x1 DUP3 SHL PUSH2 0x58B JUMP JUMPDEST POP PUSH1 0x20 DUP4 LT PUSH2 0x133 DUP4 LT AND PUSH1 0x4E DUP5 LT PUSH1 0xB DUP5 LT AND OR ISZERO PUSH2 0x1B4A JUMPI POP DUP2 DUP2 EXP PUSH2 0x58B JUMP JUMPDEST PUSH2 0x1B54 DUP4 DUP4 PUSH2 0x1A82 JUMP JUMPDEST DUP1 PUSH1 0x0 NOT DIV DUP3 GT ISZERO PUSH2 0x1B68 JUMPI PUSH2 0x1B68 PUSH2 0x1BEE JUMP JUMPDEST MUL SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0x1B82 JUMPI PUSH2 0x1B82 PUSH2 0x1BEE JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1BA2 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x1B8A JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0xEF0 JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x1BC7 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0x1BE8 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CALLER ORIGIN AND INVALID PUSH22 0x604DF7E9FD7519FAE33A6CBD122CDC5AEB260E0D3EF3 INVALID 0xBB ADD 0xB8 0xF8 PUSH5 0x736F6C6343 STOP ADDMOD DIV STOP CALLER ","sourceMap":"357:1745:10:-:0;;;459:70;;;;;;;;;-1:-1:-1;1978:113:1;;;;;;;;;;;;-1:-1:-1;;;1978:113:1;;;;;;;;;;;;;;;;;;;;;2044:13;;412:42:10;;1978:113:1;2044:13;;:5;;1978:113;2044:13;:::i;:::-;-1:-1:-1;2067:17:1;;;;:7;;:17;;;;;:::i;:::-;-1:-1:-1;;;1488:15:3;;-1:-1:-1;;;;;;1488:15:3;;;357:1745:10;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;357:1745:10;;;-1:-1:-1;357:1745:10;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;14:380:11;93:1;89:12;;;;136;;;157:2;;211:4;203:6;199:17;189:27;;157:2;264;256:6;253:14;233:18;230:38;227:2;;;310:10;305:3;301:20;298:1;291:31;345:4;342:1;335:15;373:4;370:1;363:15;227:2;;69:325;;;:::o;:::-;357:1745:10;;;;;;;;;;;;"},"deployedBytecode":{"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:15319:11","statements":[{"nodeType":"YulBlock","src":"6:3:11","statements":[]},{"body":{"nodeType":"YulBlock","src":"63:124:11","statements":[{"nodeType":"YulAssignment","src":"73:29:11","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"95:6:11"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"82:12:11"},"nodeType":"YulFunctionCall","src":"82:20:11"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"73:5:11"}]},{"body":{"nodeType":"YulBlock","src":"165:16:11","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"174:1:11","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"177:1:11","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"167:6:11"},"nodeType":"YulFunctionCall","src":"167:12:11"},"nodeType":"YulExpressionStatement","src":"167:12:11"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"124:5:11"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"135:5:11"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"150:3:11","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"155:1:11","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"146:3:11"},"nodeType":"YulFunctionCall","src":"146:11:11"},{"kind":"number","nodeType":"YulLiteral","src":"159:1:11","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"142:3:11"},"nodeType":"YulFunctionCall","src":"142:19:11"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"131:3:11"},"nodeType":"YulFunctionCall","src":"131:31:11"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"121:2:11"},"nodeType":"YulFunctionCall","src":"121:42:11"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"114:6:11"},"nodeType":"YulFunctionCall","src":"114:50:11"},"nodeType":"YulIf","src":"111:2:11"}]},"name":"abi_decode_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"42:6:11","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"53:5:11","type":""}],"src":"14:173:11"},{"body":{"nodeType":"YulBlock","src":"262:126:11","statements":[{"body":{"nodeType":"YulBlock","src":"308:26:11","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"317:6:11"},{"name":"value0","nodeType":"YulIdentifier","src":"325:6:11"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"310:6:11"},"nodeType":"YulFunctionCall","src":"310:22:11"},"nodeType":"YulExpressionStatement","src":"310:22:11"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"283:7:11"},{"name":"headStart","nodeType":"YulIdentifier","src":"292:9:11"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"279:3:11"},"nodeType":"YulFunctionCall","src":"279:23:11"},{"kind":"number","nodeType":"YulLiteral","src":"304:2:11","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"275:3:11"},"nodeType":"YulFunctionCall","src":"275:32:11"},"nodeType":"YulIf","src":"272:2:11"},{"nodeType":"YulAssignment","src":"343:39:11","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"372:9:11"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"353:18:11"},"nodeType":"YulFunctionCall","src":"353:29:11"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"343:6:11"}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"228:9:11","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"239:7:11","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"251:6:11","type":""}],"src":"192:196:11"},{"body":{"nodeType":"YulBlock","src":"480:183:11","statements":[{"body":{"nodeType":"YulBlock","src":"526:26:11","statements":[{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"535:6:11"},{"name":"value1","nodeType":"YulIdentifier","src":"543:6:11"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"528:6:11"},"nodeType":"YulFunctionCall","src":"528:22:11"},"nodeType":"YulExpressionStatement","src":"528:22:11"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"501:7:11"},{"name":"headStart","nodeType":"YulIdentifier","src":"510:9:11"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"497:3:11"},"nodeType":"YulFunctionCall","src":"497:23:11"},{"kind":"number","nodeType":"YulLiteral","src":"522:2:11","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"493:3:11"},"nodeType":"YulFunctionCall","src":"493:32:11"},"nodeType":"YulIf","src":"490:2:11"},{"nodeType":"YulAssignment","src":"561:39:11","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"590:9:11"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"571:18:11"},"nodeType":"YulFunctionCall","src":"571:29:11"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"561:6:11"}]},{"nodeType":"YulAssignment","src":"609:48:11","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"642:9:11"},{"kind":"number","nodeType":"YulLiteral","src":"653:2:11","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"638:3:11"},"nodeType":"YulFunctionCall","src":"638:18:11"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"619:18:11"},"nodeType":"YulFunctionCall","src":"619:38:11"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"609:6:11"}]}]},"name":"abi_decode_tuple_t_addresst_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"438:9:11","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"449:7:11","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"461:6:11","type":""},{"name":"value1","nodeType":"YulTypedName","src":"469:6:11","type":""}],"src":"393:270:11"},{"body":{"nodeType":"YulBlock","src":"772:234:11","statements":[{"body":{"nodeType":"YulBlock","src":"818:26:11","statements":[{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"827:6:11"},{"name":"value2","nodeType":"YulIdentifier","src":"835:6:11"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"820:6:11"},"nodeType":"YulFunctionCall","src":"820:22:11"},"nodeType":"YulExpressionStatement","src":"820:22:11"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"793:7:11"},{"name":"headStart","nodeType":"YulIdentifier","src":"802:9:11"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"789:3:11"},"nodeType":"YulFunctionCall","src":"789:23:11"},{"kind":"number","nodeType":"YulLiteral","src":"814:2:11","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"785:3:11"},"nodeType":"YulFunctionCall","src":"785:32:11"},"nodeType":"YulIf","src":"782:2:11"},{"nodeType":"YulAssignment","src":"853:39:11","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"882:9:11"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"863:18:11"},"nodeType":"YulFunctionCall","src":"863:29:11"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"853:6:11"}]},{"nodeType":"YulAssignment","src":"901:48:11","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"934:9:11"},{"kind":"number","nodeType":"YulLiteral","src":"945:2:11","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"930:3:11"},"nodeType":"YulFunctionCall","src":"930:18:11"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"911:18:11"},"nodeType":"YulFunctionCall","src":"911:38:11"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"901:6:11"}]},{"nodeType":"YulAssignment","src":"958:42:11","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"985:9:11"},{"kind":"number","nodeType":"YulLiteral","src":"996:2:11","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"981:3:11"},"nodeType":"YulFunctionCall","src":"981:18:11"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"968:12:11"},"nodeType":"YulFunctionCall","src":"968:32:11"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"958:6:11"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"722:9:11","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"733:7:11","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"745:6:11","type":""},{"name":"value1","nodeType":"YulTypedName","src":"753:6:11","type":""},{"name":"value2","nodeType":"YulTypedName","src":"761:6:11","type":""}],"src":"668:338:11"},{"body":{"nodeType":"YulBlock","src":"1098:177:11","statements":[{"body":{"nodeType":"YulBlock","src":"1144:26:11","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1153:6:11"},{"name":"value0","nodeType":"YulIdentifier","src":"1161:6:11"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1146:6:11"},"nodeType":"YulFunctionCall","src":"1146:22:11"},"nodeType":"YulExpressionStatement","src":"1146:22:11"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1119:7:11"},{"name":"headStart","nodeType":"YulIdentifier","src":"1128:9:11"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1115:3:11"},"nodeType":"YulFunctionCall","src":"1115:23:11"},{"kind":"number","nodeType":"YulLiteral","src":"1140:2:11","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1111:3:11"},"nodeType":"YulFunctionCall","src":"1111:32:11"},"nodeType":"YulIf","src":"1108:2:11"},{"nodeType":"YulAssignment","src":"1179:39:11","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1208:9:11"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"1189:18:11"},"nodeType":"YulFunctionCall","src":"1189:29:11"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1179:6:11"}]},{"nodeType":"YulAssignment","src":"1227:42:11","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1254:9:11"},{"kind":"number","nodeType":"YulLiteral","src":"1265:2:11","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1250:3:11"},"nodeType":"YulFunctionCall","src":"1250:18:11"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1237:12:11"},"nodeType":"YulFunctionCall","src":"1237:32:11"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"1227:6:11"}]}]},"name":"abi_decode_tuple_t_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1056:9:11","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1067:7:11","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1079:6:11","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1087:6:11","type":""}],"src":"1011:264:11"},{"body":{"nodeType":"YulBlock","src":"1358:219:11","statements":[{"body":{"nodeType":"YulBlock","src":"1404:26:11","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1413:6:11"},{"name":"value0","nodeType":"YulIdentifier","src":"1421:6:11"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1406:6:11"},"nodeType":"YulFunctionCall","src":"1406:22:11"},"nodeType":"YulExpressionStatement","src":"1406:22:11"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1379:7:11"},{"name":"headStart","nodeType":"YulIdentifier","src":"1388:9:11"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1375:3:11"},"nodeType":"YulFunctionCall","src":"1375:23:11"},{"kind":"number","nodeType":"YulLiteral","src":"1400:2:11","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1371:3:11"},"nodeType":"YulFunctionCall","src":"1371:32:11"},"nodeType":"YulIf","src":"1368:2:11"},{"nodeType":"YulVariableDeclaration","src":"1439:29:11","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1458:9:11"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1452:5:11"},"nodeType":"YulFunctionCall","src":"1452:16:11"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"1443:5:11","type":""}]},{"body":{"nodeType":"YulBlock","src":"1521:26:11","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1530:6:11"},{"name":"value0","nodeType":"YulIdentifier","src":"1538:6:11"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1523:6:11"},"nodeType":"YulFunctionCall","src":"1523:22:11"},"nodeType":"YulExpressionStatement","src":"1523:22:11"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1490:5:11"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1511:5:11"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1504:6:11"},"nodeType":"YulFunctionCall","src":"1504:13:11"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1497:6:11"},"nodeType":"YulFunctionCall","src":"1497:21:11"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"1487:2:11"},"nodeType":"YulFunctionCall","src":"1487:32:11"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1480:6:11"},"nodeType":"YulFunctionCall","src":"1480:40:11"},"nodeType":"YulIf","src":"1477:2:11"},{"nodeType":"YulAssignment","src":"1556:15:11","value":{"name":"value","nodeType":"YulIdentifier","src":"1566:5:11"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1556:6:11"}]}]},"name":"abi_decode_tuple_t_bool_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1324:9:11","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1335:7:11","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1347:6:11","type":""}],"src":"1280:297:11"},{"body":{"nodeType":"YulBlock","src":"1652:120:11","statements":[{"body":{"nodeType":"YulBlock","src":"1698:26:11","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1707:6:11"},{"name":"value0","nodeType":"YulIdentifier","src":"1715:6:11"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1700:6:11"},"nodeType":"YulFunctionCall","src":"1700:22:11"},"nodeType":"YulExpressionStatement","src":"1700:22:11"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1673:7:11"},{"name":"headStart","nodeType":"YulIdentifier","src":"1682:9:11"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1669:3:11"},"nodeType":"YulFunctionCall","src":"1669:23:11"},{"kind":"number","nodeType":"YulLiteral","src":"1694:2:11","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1665:3:11"},"nodeType":"YulFunctionCall","src":"1665:32:11"},"nodeType":"YulIf","src":"1662:2:11"},{"nodeType":"YulAssignment","src":"1733:33:11","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1756:9:11"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1743:12:11"},"nodeType":"YulFunctionCall","src":"1743:23:11"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1733:6:11"}]}]},"name":"abi_decode_tuple_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1618:9:11","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1629:7:11","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1641:6:11","type":""}],"src":"1582:190:11"},{"body":{"nodeType":"YulBlock","src":"1858:113:11","statements":[{"body":{"nodeType":"YulBlock","src":"1904:26:11","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1913:6:11"},{"name":"value0","nodeType":"YulIdentifier","src":"1921:6:11"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1906:6:11"},"nodeType":"YulFunctionCall","src":"1906:22:11"},"nodeType":"YulExpressionStatement","src":"1906:22:11"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1879:7:11"},{"name":"headStart","nodeType":"YulIdentifier","src":"1888:9:11"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1875:3:11"},"nodeType":"YulFunctionCall","src":"1875:23:11"},{"kind":"number","nodeType":"YulLiteral","src":"1900:2:11","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1871:3:11"},"nodeType":"YulFunctionCall","src":"1871:32:11"},"nodeType":"YulIf","src":"1868:2:11"},{"nodeType":"YulAssignment","src":"1939:26:11","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1955:9:11"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1949:5:11"},"nodeType":"YulFunctionCall","src":"1949:16:11"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1939:6:11"}]}]},"name":"abi_decode_tuple_t_uint256_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1824:9:11","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1835:7:11","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1847:6:11","type":""}],"src":"1777:194:11"},{"body":{"nodeType":"YulBlock","src":"2063:177:11","statements":[{"body":{"nodeType":"YulBlock","src":"2109:26:11","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"2118:6:11"},{"name":"value0","nodeType":"YulIdentifier","src":"2126:6:11"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2111:6:11"},"nodeType":"YulFunctionCall","src":"2111:22:11"},"nodeType":"YulExpressionStatement","src":"2111:22:11"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2084:7:11"},{"name":"headStart","nodeType":"YulIdentifier","src":"2093:9:11"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2080:3:11"},"nodeType":"YulFunctionCall","src":"2080:23:11"},{"kind":"number","nodeType":"YulLiteral","src":"2105:2:11","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2076:3:11"},"nodeType":"YulFunctionCall","src":"2076:32:11"},"nodeType":"YulIf","src":"2073:2:11"},{"nodeType":"YulAssignment","src":"2144:33:11","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2167:9:11"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2154:12:11"},"nodeType":"YulFunctionCall","src":"2154:23:11"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2144:6:11"}]},{"nodeType":"YulAssignment","src":"2186:48:11","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2219:9:11"},{"kind":"number","nodeType":"YulLiteral","src":"2230:2:11","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2215:3:11"},"nodeType":"YulFunctionCall","src":"2215:18:11"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"2196:18:11"},"nodeType":"YulFunctionCall","src":"2196:38:11"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"2186:6:11"}]}]},"name":"abi_decode_tuple_t_uint256t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2021:9:11","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2032:7:11","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2044:6:11","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2052:6:11","type":""}],"src":"1976:264:11"},{"body":{"nodeType":"YulBlock","src":"2349:234:11","statements":[{"body":{"nodeType":"YulBlock","src":"2395:26:11","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"2404:6:11"},{"name":"value0","nodeType":"YulIdentifier","src":"2412:6:11"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2397:6:11"},"nodeType":"YulFunctionCall","src":"2397:22:11"},"nodeType":"YulExpressionStatement","src":"2397:22:11"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2370:7:11"},{"name":"headStart","nodeType":"YulIdentifier","src":"2379:9:11"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2366:3:11"},"nodeType":"YulFunctionCall","src":"2366:23:11"},{"kind":"number","nodeType":"YulLiteral","src":"2391:2:11","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2362:3:11"},"nodeType":"YulFunctionCall","src":"2362:32:11"},"nodeType":"YulIf","src":"2359:2:11"},{"nodeType":"YulAssignment","src":"2430:33:11","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2453:9:11"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2440:12:11"},"nodeType":"YulFunctionCall","src":"2440:23:11"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2430:6:11"}]},{"nodeType":"YulAssignment","src":"2472:48:11","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2505:9:11"},{"kind":"number","nodeType":"YulLiteral","src":"2516:2:11","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2501:3:11"},"nodeType":"YulFunctionCall","src":"2501:18:11"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"2482:18:11"},"nodeType":"YulFunctionCall","src":"2482:38:11"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"2472:6:11"}]},{"nodeType":"YulAssignment","src":"2529:48:11","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2562:9:11"},{"kind":"number","nodeType":"YulLiteral","src":"2573:2:11","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2558:3:11"},"nodeType":"YulFunctionCall","src":"2558:18:11"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"2539:18:11"},"nodeType":"YulFunctionCall","src":"2539:38:11"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"2529:6:11"}]}]},"name":"abi_decode_tuple_t_uint256t_addresst_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2299:9:11","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2310:7:11","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2322:6:11","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2330:6:11","type":""},{"name":"value2","nodeType":"YulTypedName","src":"2338:6:11","type":""}],"src":"2245:338:11"},{"body":{"nodeType":"YulBlock","src":"2709:286:11","statements":[{"body":{"nodeType":"YulBlock","src":"2756:26:11","statements":[{"expression":{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"2765:6:11"},{"name":"value3","nodeType":"YulIdentifier","src":"2773:6:11"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2758:6:11"},"nodeType":"YulFunctionCall","src":"2758:22:11"},"nodeType":"YulExpressionStatement","src":"2758:22:11"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2730:7:11"},{"name":"headStart","nodeType":"YulIdentifier","src":"2739:9:11"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2726:3:11"},"nodeType":"YulFunctionCall","src":"2726:23:11"},{"kind":"number","nodeType":"YulLiteral","src":"2751:3:11","type":"","value":"128"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2722:3:11"},"nodeType":"YulFunctionCall","src":"2722:33:11"},"nodeType":"YulIf","src":"2719:2:11"},{"nodeType":"YulAssignment","src":"2791:33:11","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2814:9:11"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2801:12:11"},"nodeType":"YulFunctionCall","src":"2801:23:11"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2791:6:11"}]},{"nodeType":"YulAssignment","src":"2833:48:11","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2866:9:11"},{"kind":"number","nodeType":"YulLiteral","src":"2877:2:11","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2862:3:11"},"nodeType":"YulFunctionCall","src":"2862:18:11"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"2843:18:11"},"nodeType":"YulFunctionCall","src":"2843:38:11"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"2833:6:11"}]},{"nodeType":"YulAssignment","src":"2890:48:11","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2923:9:11"},{"kind":"number","nodeType":"YulLiteral","src":"2934:2:11","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2919:3:11"},"nodeType":"YulFunctionCall","src":"2919:18:11"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"2900:18:11"},"nodeType":"YulFunctionCall","src":"2900:38:11"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"2890:6:11"}]},{"nodeType":"YulAssignment","src":"2947:42:11","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2974:9:11"},{"kind":"number","nodeType":"YulLiteral","src":"2985:2:11","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2970:3:11"},"nodeType":"YulFunctionCall","src":"2970:18:11"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2957:12:11"},"nodeType":"YulFunctionCall","src":"2957:32:11"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"2947:6:11"}]}]},"name":"abi_decode_tuple_t_uint256t_addresst_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2651:9:11","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2662:7:11","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2674:6:11","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2682:6:11","type":""},{"name":"value2","nodeType":"YulTypedName","src":"2690:6:11","type":""},{"name":"value3","nodeType":"YulTypedName","src":"2698:6:11","type":""}],"src":"2588:407:11"},{"body":{"nodeType":"YulBlock","src":"3104:228:11","statements":[{"body":{"nodeType":"YulBlock","src":"3150:26:11","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"3159:6:11"},{"name":"value0","nodeType":"YulIdentifier","src":"3167:6:11"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3152:6:11"},"nodeType":"YulFunctionCall","src":"3152:22:11"},"nodeType":"YulExpressionStatement","src":"3152:22:11"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3125:7:11"},{"name":"headStart","nodeType":"YulIdentifier","src":"3134:9:11"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3121:3:11"},"nodeType":"YulFunctionCall","src":"3121:23:11"},{"kind":"number","nodeType":"YulLiteral","src":"3146:2:11","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3117:3:11"},"nodeType":"YulFunctionCall","src":"3117:32:11"},"nodeType":"YulIf","src":"3114:2:11"},{"nodeType":"YulAssignment","src":"3185:33:11","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3208:9:11"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3195:12:11"},"nodeType":"YulFunctionCall","src":"3195:23:11"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3185:6:11"}]},{"nodeType":"YulAssignment","src":"3227:48:11","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3260:9:11"},{"kind":"number","nodeType":"YulLiteral","src":"3271:2:11","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3256:3:11"},"nodeType":"YulFunctionCall","src":"3256:18:11"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"3237:18:11"},"nodeType":"YulFunctionCall","src":"3237:38:11"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"3227:6:11"}]},{"nodeType":"YulAssignment","src":"3284:42:11","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3311:9:11"},{"kind":"number","nodeType":"YulLiteral","src":"3322:2:11","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3307:3:11"},"nodeType":"YulFunctionCall","src":"3307:18:11"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3294:12:11"},"nodeType":"YulFunctionCall","src":"3294:32:11"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"3284:6:11"}]}]},"name":"abi_decode_tuple_t_uint256t_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3054:9:11","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3065:7:11","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3077:6:11","type":""},{"name":"value1","nodeType":"YulTypedName","src":"3085:6:11","type":""},{"name":"value2","nodeType":"YulTypedName","src":"3093:6:11","type":""}],"src":"3000:332:11"},{"body":{"nodeType":"YulBlock","src":"3416:214:11","statements":[{"body":{"nodeType":"YulBlock","src":"3462:26:11","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"3471:6:11"},{"name":"value0","nodeType":"YulIdentifier","src":"3479:6:11"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3464:6:11"},"nodeType":"YulFunctionCall","src":"3464:22:11"},"nodeType":"YulExpressionStatement","src":"3464:22:11"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3437:7:11"},{"name":"headStart","nodeType":"YulIdentifier","src":"3446:9:11"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3433:3:11"},"nodeType":"YulFunctionCall","src":"3433:23:11"},{"kind":"number","nodeType":"YulLiteral","src":"3458:2:11","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3429:3:11"},"nodeType":"YulFunctionCall","src":"3429:32:11"},"nodeType":"YulIf","src":"3426:2:11"},{"nodeType":"YulVariableDeclaration","src":"3497:29:11","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3516:9:11"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3510:5:11"},"nodeType":"YulFunctionCall","src":"3510:16:11"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"3501:5:11","type":""}]},{"body":{"nodeType":"YulBlock","src":"3574:26:11","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"3583:6:11"},{"name":"value0","nodeType":"YulIdentifier","src":"3591:6:11"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3576:6:11"},"nodeType":"YulFunctionCall","src":"3576:22:11"},"nodeType":"YulExpressionStatement","src":"3576:22:11"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3548:5:11"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3559:5:11"},{"kind":"number","nodeType":"YulLiteral","src":"3566:4:11","type":"","value":"0xff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3555:3:11"},"nodeType":"YulFunctionCall","src":"3555:16:11"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"3545:2:11"},"nodeType":"YulFunctionCall","src":"3545:27:11"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3538:6:11"},"nodeType":"YulFunctionCall","src":"3538:35:11"},"nodeType":"YulIf","src":"3535:2:11"},{"nodeType":"YulAssignment","src":"3609:15:11","value":{"name":"value","nodeType":"YulIdentifier","src":"3619:5:11"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3609:6:11"}]}]},"name":"abi_decode_tuple_t_uint8_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3382:9:11","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3393:7:11","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3405:6:11","type":""}],"src":"3337:293:11"},{"body":{"nodeType":"YulBlock","src":"3772:137:11","statements":[{"nodeType":"YulVariableDeclaration","src":"3782:27:11","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"3802:6:11"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3796:5:11"},"nodeType":"YulFunctionCall","src":"3796:13:11"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"3786:6:11","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"3844:6:11"},{"kind":"number","nodeType":"YulLiteral","src":"3852:4:11","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3840:3:11"},"nodeType":"YulFunctionCall","src":"3840:17:11"},{"name":"pos","nodeType":"YulIdentifier","src":"3859:3:11"},{"name":"length","nodeType":"YulIdentifier","src":"3864:6:11"}],"functionName":{"name":"copy_memory_to_memory","nodeType":"YulIdentifier","src":"3818:21:11"},"nodeType":"YulFunctionCall","src":"3818:53:11"},"nodeType":"YulExpressionStatement","src":"3818:53:11"},{"nodeType":"YulAssignment","src":"3880:23:11","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"3891:3:11"},{"name":"length","nodeType":"YulIdentifier","src":"3896:6:11"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3887:3:11"},"nodeType":"YulFunctionCall","src":"3887:16:11"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"3880:3:11"}]}]},"name":"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"3748:3:11","type":""},{"name":"value0","nodeType":"YulTypedName","src":"3753:6:11","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"3764:3:11","type":""}],"src":"3635:274:11"},{"body":{"nodeType":"YulBlock","src":"4015:102:11","statements":[{"nodeType":"YulAssignment","src":"4025:26:11","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4037:9:11"},{"kind":"number","nodeType":"YulLiteral","src":"4048:2:11","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4033:3:11"},"nodeType":"YulFunctionCall","src":"4033:18:11"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4025:4:11"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4067:9:11"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"4082:6:11"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4098:3:11","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"4103:1:11","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"4094:3:11"},"nodeType":"YulFunctionCall","src":"4094:11:11"},{"kind":"number","nodeType":"YulLiteral","src":"4107:1:11","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4090:3:11"},"nodeType":"YulFunctionCall","src":"4090:19:11"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4078:3:11"},"nodeType":"YulFunctionCall","src":"4078:32:11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4060:6:11"},"nodeType":"YulFunctionCall","src":"4060:51:11"},"nodeType":"YulExpressionStatement","src":"4060:51:11"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3984:9:11","type":""},{"name":"value0","nodeType":"YulTypedName","src":"3995:6:11","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4006:4:11","type":""}],"src":"3914:203:11"},{"body":{"nodeType":"YulBlock","src":"4279:218:11","statements":[{"nodeType":"YulAssignment","src":"4289:26:11","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4301:9:11"},{"kind":"number","nodeType":"YulLiteral","src":"4312:2:11","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4297:3:11"},"nodeType":"YulFunctionCall","src":"4297:18:11"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4289:4:11"}]},{"nodeType":"YulVariableDeclaration","src":"4324:29:11","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4342:3:11","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"4347:1:11","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"4338:3:11"},"nodeType":"YulFunctionCall","src":"4338:11:11"},{"kind":"number","nodeType":"YulLiteral","src":"4351:1:11","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4334:3:11"},"nodeType":"YulFunctionCall","src":"4334:19:11"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"4328:2:11","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4369:9:11"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"4384:6:11"},{"name":"_1","nodeType":"YulIdentifier","src":"4392:2:11"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4380:3:11"},"nodeType":"YulFunctionCall","src":"4380:15:11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4362:6:11"},"nodeType":"YulFunctionCall","src":"4362:34:11"},"nodeType":"YulExpressionStatement","src":"4362:34:11"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4416:9:11"},{"kind":"number","nodeType":"YulLiteral","src":"4427:2:11","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4412:3:11"},"nodeType":"YulFunctionCall","src":"4412:18:11"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"4436:6:11"},{"name":"_1","nodeType":"YulIdentifier","src":"4444:2:11"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4432:3:11"},"nodeType":"YulFunctionCall","src":"4432:15:11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4405:6:11"},"nodeType":"YulFunctionCall","src":"4405:43:11"},"nodeType":"YulExpressionStatement","src":"4405:43:11"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4468:9:11"},{"kind":"number","nodeType":"YulLiteral","src":"4479:2:11","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4464:3:11"},"nodeType":"YulFunctionCall","src":"4464:18:11"},{"name":"value2","nodeType":"YulIdentifier","src":"4484:6:11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4457:6:11"},"nodeType":"YulFunctionCall","src":"4457:34:11"},"nodeType":"YulExpressionStatement","src":"4457:34:11"}]},"name":"abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4232:9:11","type":""},{"name":"value2","nodeType":"YulTypedName","src":"4243:6:11","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4251:6:11","type":""},{"name":"value0","nodeType":"YulTypedName","src":"4259:6:11","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4270:4:11","type":""}],"src":"4122:375:11"},{"body":{"nodeType":"YulBlock","src":"4631:145:11","statements":[{"nodeType":"YulAssignment","src":"4641:26:11","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4653:9:11"},{"kind":"number","nodeType":"YulLiteral","src":"4664:2:11","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4649:3:11"},"nodeType":"YulFunctionCall","src":"4649:18:11"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4641:4:11"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4683:9:11"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"4698:6:11"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4714:3:11","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"4719:1:11","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"4710:3:11"},"nodeType":"YulFunctionCall","src":"4710:11:11"},{"kind":"number","nodeType":"YulLiteral","src":"4723:1:11","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4706:3:11"},"nodeType":"YulFunctionCall","src":"4706:19:11"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4694:3:11"},"nodeType":"YulFunctionCall","src":"4694:32:11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4676:6:11"},"nodeType":"YulFunctionCall","src":"4676:51:11"},"nodeType":"YulExpressionStatement","src":"4676:51:11"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4747:9:11"},{"kind":"number","nodeType":"YulLiteral","src":"4758:2:11","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4743:3:11"},"nodeType":"YulFunctionCall","src":"4743:18:11"},{"name":"value1","nodeType":"YulIdentifier","src":"4763:6:11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4736:6:11"},"nodeType":"YulFunctionCall","src":"4736:34:11"},"nodeType":"YulExpressionStatement","src":"4736:34:11"}]},"name":"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4592:9:11","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4603:6:11","type":""},{"name":"value0","nodeType":"YulTypedName","src":"4611:6:11","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4622:4:11","type":""}],"src":"4502:274:11"},{"body":{"nodeType":"YulBlock","src":"4876:92:11","statements":[{"nodeType":"YulAssignment","src":"4886:26:11","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4898:9:11"},{"kind":"number","nodeType":"YulLiteral","src":"4909:2:11","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4894:3:11"},"nodeType":"YulFunctionCall","src":"4894:18:11"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4886:4:11"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4928:9:11"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"4953:6:11"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4946:6:11"},"nodeType":"YulFunctionCall","src":"4946:14:11"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4939:6:11"},"nodeType":"YulFunctionCall","src":"4939:22:11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4921:6:11"},"nodeType":"YulFunctionCall","src":"4921:41:11"},"nodeType":"YulExpressionStatement","src":"4921:41:11"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4845:9:11","type":""},{"name":"value0","nodeType":"YulTypedName","src":"4856:6:11","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4867:4:11","type":""}],"src":"4781:187:11"},{"body":{"nodeType":"YulBlock","src":"5094:262:11","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5111:9:11"},{"kind":"number","nodeType":"YulLiteral","src":"5122:2:11","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5104:6:11"},"nodeType":"YulFunctionCall","src":"5104:21:11"},"nodeType":"YulExpressionStatement","src":"5104:21:11"},{"nodeType":"YulVariableDeclaration","src":"5134:27:11","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"5154:6:11"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"5148:5:11"},"nodeType":"YulFunctionCall","src":"5148:13:11"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"5138:6:11","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5181:9:11"},{"kind":"number","nodeType":"YulLiteral","src":"5192:2:11","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5177:3:11"},"nodeType":"YulFunctionCall","src":"5177:18:11"},{"name":"length","nodeType":"YulIdentifier","src":"5197:6:11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5170:6:11"},"nodeType":"YulFunctionCall","src":"5170:34:11"},"nodeType":"YulExpressionStatement","src":"5170:34:11"},{"expression":{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"5239:6:11"},{"kind":"number","nodeType":"YulLiteral","src":"5247:2:11","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5235:3:11"},"nodeType":"YulFunctionCall","src":"5235:15:11"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5256:9:11"},{"kind":"number","nodeType":"YulLiteral","src":"5267:2:11","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5252:3:11"},"nodeType":"YulFunctionCall","src":"5252:18:11"},{"name":"length","nodeType":"YulIdentifier","src":"5272:6:11"}],"functionName":{"name":"copy_memory_to_memory","nodeType":"YulIdentifier","src":"5213:21:11"},"nodeType":"YulFunctionCall","src":"5213:66:11"},"nodeType":"YulExpressionStatement","src":"5213:66:11"},{"nodeType":"YulAssignment","src":"5288:62:11","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5304:9:11"},{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"5323:6:11"},{"kind":"number","nodeType":"YulLiteral","src":"5331:2:11","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5319:3:11"},"nodeType":"YulFunctionCall","src":"5319:15:11"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5340:2:11","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"5336:3:11"},"nodeType":"YulFunctionCall","src":"5336:7:11"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"5315:3:11"},"nodeType":"YulFunctionCall","src":"5315:29:11"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5300:3:11"},"nodeType":"YulFunctionCall","src":"5300:45:11"},{"kind":"number","nodeType":"YulLiteral","src":"5347:2:11","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5296:3:11"},"nodeType":"YulFunctionCall","src":"5296:54:11"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5288:4:11"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5063:9:11","type":""},{"name":"value0","nodeType":"YulTypedName","src":"5074:6:11","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5085:4:11","type":""}],"src":"4973:383:11"},{"body":{"nodeType":"YulBlock","src":"5535:225:11","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5552:9:11"},{"kind":"number","nodeType":"YulLiteral","src":"5563:2:11","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5545:6:11"},"nodeType":"YulFunctionCall","src":"5545:21:11"},"nodeType":"YulExpressionStatement","src":"5545:21:11"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5586:9:11"},{"kind":"number","nodeType":"YulLiteral","src":"5597:2:11","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5582:3:11"},"nodeType":"YulFunctionCall","src":"5582:18:11"},{"kind":"number","nodeType":"YulLiteral","src":"5602:2:11","type":"","value":"35"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5575:6:11"},"nodeType":"YulFunctionCall","src":"5575:30:11"},"nodeType":"YulExpressionStatement","src":"5575:30:11"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5625:9:11"},{"kind":"number","nodeType":"YulLiteral","src":"5636:2:11","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5621:3:11"},"nodeType":"YulFunctionCall","src":"5621:18:11"},{"kind":"string","nodeType":"YulLiteral","src":"5641:34:11","type":"","value":"ERC20: transfer to the zero addr"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5614:6:11"},"nodeType":"YulFunctionCall","src":"5614:62:11"},"nodeType":"YulExpressionStatement","src":"5614:62:11"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5696:9:11"},{"kind":"number","nodeType":"YulLiteral","src":"5707:2:11","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5692:3:11"},"nodeType":"YulFunctionCall","src":"5692:18:11"},{"kind":"string","nodeType":"YulLiteral","src":"5712:5:11","type":"","value":"ess"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5685:6:11"},"nodeType":"YulFunctionCall","src":"5685:33:11"},"nodeType":"YulExpressionStatement","src":"5685:33:11"},{"nodeType":"YulAssignment","src":"5727:27:11","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5739:9:11"},{"kind":"number","nodeType":"YulLiteral","src":"5750:3:11","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5735:3:11"},"nodeType":"YulFunctionCall","src":"5735:19:11"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5727:4:11"}]}]},"name":"abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5512:9:11","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5526:4:11","type":""}],"src":"5361:399:11"},{"body":{"nodeType":"YulBlock","src":"5939:224:11","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5956:9:11"},{"kind":"number","nodeType":"YulLiteral","src":"5967:2:11","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5949:6:11"},"nodeType":"YulFunctionCall","src":"5949:21:11"},"nodeType":"YulExpressionStatement","src":"5949:21:11"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5990:9:11"},{"kind":"number","nodeType":"YulLiteral","src":"6001:2:11","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5986:3:11"},"nodeType":"YulFunctionCall","src":"5986:18:11"},{"kind":"number","nodeType":"YulLiteral","src":"6006:2:11","type":"","value":"34"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5979:6:11"},"nodeType":"YulFunctionCall","src":"5979:30:11"},"nodeType":"YulExpressionStatement","src":"5979:30:11"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6029:9:11"},{"kind":"number","nodeType":"YulLiteral","src":"6040:2:11","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6025:3:11"},"nodeType":"YulFunctionCall","src":"6025:18:11"},{"kind":"string","nodeType":"YulLiteral","src":"6045:34:11","type":"","value":"ERC20: burn amount exceeds balan"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6018:6:11"},"nodeType":"YulFunctionCall","src":"6018:62:11"},"nodeType":"YulExpressionStatement","src":"6018:62:11"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6100:9:11"},{"kind":"number","nodeType":"YulLiteral","src":"6111:2:11","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6096:3:11"},"nodeType":"YulFunctionCall","src":"6096:18:11"},{"kind":"string","nodeType":"YulLiteral","src":"6116:4:11","type":"","value":"ce"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6089:6:11"},"nodeType":"YulFunctionCall","src":"6089:32:11"},"nodeType":"YulExpressionStatement","src":"6089:32:11"},{"nodeType":"YulAssignment","src":"6130:27:11","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6142:9:11"},{"kind":"number","nodeType":"YulLiteral","src":"6153:3:11","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6138:3:11"},"nodeType":"YulFunctionCall","src":"6138:19:11"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6130:4:11"}]}]},"name":"abi_encode_tuple_t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5916:9:11","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5930:4:11","type":""}],"src":"5765:398:11"},{"body":{"nodeType":"YulBlock","src":"6342:224:11","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6359:9:11"},{"kind":"number","nodeType":"YulLiteral","src":"6370:2:11","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6352:6:11"},"nodeType":"YulFunctionCall","src":"6352:21:11"},"nodeType":"YulExpressionStatement","src":"6352:21:11"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6393:9:11"},{"kind":"number","nodeType":"YulLiteral","src":"6404:2:11","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6389:3:11"},"nodeType":"YulFunctionCall","src":"6389:18:11"},{"kind":"number","nodeType":"YulLiteral","src":"6409:2:11","type":"","value":"34"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6382:6:11"},"nodeType":"YulFunctionCall","src":"6382:30:11"},"nodeType":"YulExpressionStatement","src":"6382:30:11"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6432:9:11"},{"kind":"number","nodeType":"YulLiteral","src":"6443:2:11","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6428:3:11"},"nodeType":"YulFunctionCall","src":"6428:18:11"},{"kind":"string","nodeType":"YulLiteral","src":"6448:34:11","type":"","value":"ERC20: approve to the zero addre"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6421:6:11"},"nodeType":"YulFunctionCall","src":"6421:62:11"},"nodeType":"YulExpressionStatement","src":"6421:62:11"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6503:9:11"},{"kind":"number","nodeType":"YulLiteral","src":"6514:2:11","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6499:3:11"},"nodeType":"YulFunctionCall","src":"6499:18:11"},{"kind":"string","nodeType":"YulLiteral","src":"6519:4:11","type":"","value":"ss"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6492:6:11"},"nodeType":"YulFunctionCall","src":"6492:32:11"},"nodeType":"YulExpressionStatement","src":"6492:32:11"},{"nodeType":"YulAssignment","src":"6533:27:11","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6545:9:11"},{"kind":"number","nodeType":"YulLiteral","src":"6556:3:11","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6541:3:11"},"nodeType":"YulFunctionCall","src":"6541:19:11"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6533:4:11"}]}]},"name":"abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6319:9:11","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6333:4:11","type":""}],"src":"6168:398:11"},{"body":{"nodeType":"YulBlock","src":"6745:179:11","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6762:9:11"},{"kind":"number","nodeType":"YulLiteral","src":"6773:2:11","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6755:6:11"},"nodeType":"YulFunctionCall","src":"6755:21:11"},"nodeType":"YulExpressionStatement","src":"6755:21:11"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6796:9:11"},{"kind":"number","nodeType":"YulLiteral","src":"6807:2:11","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6792:3:11"},"nodeType":"YulFunctionCall","src":"6792:18:11"},{"kind":"number","nodeType":"YulLiteral","src":"6812:2:11","type":"","value":"29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6785:6:11"},"nodeType":"YulFunctionCall","src":"6785:30:11"},"nodeType":"YulExpressionStatement","src":"6785:30:11"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6835:9:11"},{"kind":"number","nodeType":"YulLiteral","src":"6846:2:11","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6831:3:11"},"nodeType":"YulFunctionCall","src":"6831:18:11"},{"kind":"string","nodeType":"YulLiteral","src":"6851:31:11","type":"","value":"ERC20: insufficient allowance"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6824:6:11"},"nodeType":"YulFunctionCall","src":"6824:59:11"},"nodeType":"YulExpressionStatement","src":"6824:59:11"},{"nodeType":"YulAssignment","src":"6892:26:11","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6904:9:11"},{"kind":"number","nodeType":"YulLiteral","src":"6915:2:11","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6900:3:11"},"nodeType":"YulFunctionCall","src":"6900:18:11"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6892:4:11"}]}]},"name":"abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6722:9:11","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6736:4:11","type":""}],"src":"6571:353:11"},{"body":{"nodeType":"YulBlock","src":"7103:179:11","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7120:9:11"},{"kind":"number","nodeType":"YulLiteral","src":"7131:2:11","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7113:6:11"},"nodeType":"YulFunctionCall","src":"7113:21:11"},"nodeType":"YulExpressionStatement","src":"7113:21:11"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7154:9:11"},{"kind":"number","nodeType":"YulLiteral","src":"7165:2:11","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7150:3:11"},"nodeType":"YulFunctionCall","src":"7150:18:11"},{"kind":"number","nodeType":"YulLiteral","src":"7170:2:11","type":"","value":"29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7143:6:11"},"nodeType":"YulFunctionCall","src":"7143:30:11"},"nodeType":"YulExpressionStatement","src":"7143:30:11"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7193:9:11"},{"kind":"number","nodeType":"YulLiteral","src":"7204:2:11","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7189:3:11"},"nodeType":"YulFunctionCall","src":"7189:18:11"},{"kind":"string","nodeType":"YulLiteral","src":"7209:31:11","type":"","value":"ERC4626: redeem more than max"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7182:6:11"},"nodeType":"YulFunctionCall","src":"7182:59:11"},"nodeType":"YulExpressionStatement","src":"7182:59:11"},{"nodeType":"YulAssignment","src":"7250:26:11","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7262:9:11"},{"kind":"number","nodeType":"YulLiteral","src":"7273:2:11","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7258:3:11"},"nodeType":"YulFunctionCall","src":"7258:18:11"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7250:4:11"}]}]},"name":"abi_encode_tuple_t_stringliteral_3cf75848883fee8cd3a46e6e14bbbd331bc8d0caaef08fbe607c62e5fba35c6d__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7080:9:11","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"7094:4:11","type":""}],"src":"6929:353:11"},{"body":{"nodeType":"YulBlock","src":"7461:228:11","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7478:9:11"},{"kind":"number","nodeType":"YulLiteral","src":"7489:2:11","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7471:6:11"},"nodeType":"YulFunctionCall","src":"7471:21:11"},"nodeType":"YulExpressionStatement","src":"7471:21:11"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7512:9:11"},{"kind":"number","nodeType":"YulLiteral","src":"7523:2:11","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7508:3:11"},"nodeType":"YulFunctionCall","src":"7508:18:11"},{"kind":"number","nodeType":"YulLiteral","src":"7528:2:11","type":"","value":"38"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7501:6:11"},"nodeType":"YulFunctionCall","src":"7501:30:11"},"nodeType":"YulExpressionStatement","src":"7501:30:11"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7551:9:11"},{"kind":"number","nodeType":"YulLiteral","src":"7562:2:11","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7547:3:11"},"nodeType":"YulFunctionCall","src":"7547:18:11"},{"kind":"string","nodeType":"YulLiteral","src":"7567:34:11","type":"","value":"ERC20: transfer amount exceeds b"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7540:6:11"},"nodeType":"YulFunctionCall","src":"7540:62:11"},"nodeType":"YulExpressionStatement","src":"7540:62:11"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7622:9:11"},{"kind":"number","nodeType":"YulLiteral","src":"7633:2:11","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7618:3:11"},"nodeType":"YulFunctionCall","src":"7618:18:11"},{"kind":"string","nodeType":"YulLiteral","src":"7638:8:11","type":"","value":"alance"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7611:6:11"},"nodeType":"YulFunctionCall","src":"7611:36:11"},"nodeType":"YulExpressionStatement","src":"7611:36:11"},{"nodeType":"YulAssignment","src":"7656:27:11","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7668:9:11"},{"kind":"number","nodeType":"YulLiteral","src":"7679:3:11","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7664:3:11"},"nodeType":"YulFunctionCall","src":"7664:19:11"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7656:4:11"}]}]},"name":"abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7438:9:11","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"7452:4:11","type":""}],"src":"7287:402:11"},{"body":{"nodeType":"YulBlock","src":"7868:228:11","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7885:9:11"},{"kind":"number","nodeType":"YulLiteral","src":"7896:2:11","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7878:6:11"},"nodeType":"YulFunctionCall","src":"7878:21:11"},"nodeType":"YulExpressionStatement","src":"7878:21:11"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7919:9:11"},{"kind":"number","nodeType":"YulLiteral","src":"7930:2:11","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7915:3:11"},"nodeType":"YulFunctionCall","src":"7915:18:11"},{"kind":"number","nodeType":"YulLiteral","src":"7935:2:11","type":"","value":"38"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7908:6:11"},"nodeType":"YulFunctionCall","src":"7908:30:11"},"nodeType":"YulExpressionStatement","src":"7908:30:11"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7958:9:11"},{"kind":"number","nodeType":"YulLiteral","src":"7969:2:11","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7954:3:11"},"nodeType":"YulFunctionCall","src":"7954:18:11"},{"kind":"string","nodeType":"YulLiteral","src":"7974:34:11","type":"","value":"Address: insufficient balance fo"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7947:6:11"},"nodeType":"YulFunctionCall","src":"7947:62:11"},"nodeType":"YulExpressionStatement","src":"7947:62:11"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8029:9:11"},{"kind":"number","nodeType":"YulLiteral","src":"8040:2:11","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8025:3:11"},"nodeType":"YulFunctionCall","src":"8025:18:11"},{"kind":"string","nodeType":"YulLiteral","src":"8045:8:11","type":"","value":"r call"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8018:6:11"},"nodeType":"YulFunctionCall","src":"8018:36:11"},"nodeType":"YulExpressionStatement","src":"8018:36:11"},{"nodeType":"YulAssignment","src":"8063:27:11","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8075:9:11"},{"kind":"number","nodeType":"YulLiteral","src":"8086:3:11","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8071:3:11"},"nodeType":"YulFunctionCall","src":"8071:19:11"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8063:4:11"}]}]},"name":"abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7845:9:11","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"7859:4:11","type":""}],"src":"7694:402:11"},{"body":{"nodeType":"YulBlock","src":"8275:181:11","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8292:9:11"},{"kind":"number","nodeType":"YulLiteral","src":"8303:2:11","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8285:6:11"},"nodeType":"YulFunctionCall","src":"8285:21:11"},"nodeType":"YulExpressionStatement","src":"8285:21:11"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8326:9:11"},{"kind":"number","nodeType":"YulLiteral","src":"8337:2:11","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8322:3:11"},"nodeType":"YulFunctionCall","src":"8322:18:11"},{"kind":"number","nodeType":"YulLiteral","src":"8342:2:11","type":"","value":"31"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8315:6:11"},"nodeType":"YulFunctionCall","src":"8315:30:11"},"nodeType":"YulExpressionStatement","src":"8315:30:11"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8365:9:11"},{"kind":"number","nodeType":"YulLiteral","src":"8376:2:11","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8361:3:11"},"nodeType":"YulFunctionCall","src":"8361:18:11"},{"kind":"string","nodeType":"YulLiteral","src":"8381:33:11","type":"","value":"ERC4626: withdraw more than max"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8354:6:11"},"nodeType":"YulFunctionCall","src":"8354:61:11"},"nodeType":"YulExpressionStatement","src":"8354:61:11"},{"nodeType":"YulAssignment","src":"8424:26:11","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8436:9:11"},{"kind":"number","nodeType":"YulLiteral","src":"8447:2:11","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8432:3:11"},"nodeType":"YulFunctionCall","src":"8432:18:11"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8424:4:11"}]}]},"name":"abi_encode_tuple_t_stringliteral_6d33bd82b6352ef75960e453c6162657943d72f718df3c8a607eeb1427f0aa42__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8252:9:11","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8266:4:11","type":""}],"src":"8101:355:11"},{"body":{"nodeType":"YulBlock","src":"8635:180:11","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8652:9:11"},{"kind":"number","nodeType":"YulLiteral","src":"8663:2:11","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8645:6:11"},"nodeType":"YulFunctionCall","src":"8645:21:11"},"nodeType":"YulExpressionStatement","src":"8645:21:11"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8686:9:11"},{"kind":"number","nodeType":"YulLiteral","src":"8697:2:11","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8682:3:11"},"nodeType":"YulFunctionCall","src":"8682:18:11"},{"kind":"number","nodeType":"YulLiteral","src":"8702:2:11","type":"","value":"30"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8675:6:11"},"nodeType":"YulFunctionCall","src":"8675:30:11"},"nodeType":"YulExpressionStatement","src":"8675:30:11"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8725:9:11"},{"kind":"number","nodeType":"YulLiteral","src":"8736:2:11","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8721:3:11"},"nodeType":"YulFunctionCall","src":"8721:18:11"},{"kind":"string","nodeType":"YulLiteral","src":"8741:32:11","type":"","value":"ERC4626: deposit more than max"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8714:6:11"},"nodeType":"YulFunctionCall","src":"8714:60:11"},"nodeType":"YulExpressionStatement","src":"8714:60:11"},{"nodeType":"YulAssignment","src":"8783:26:11","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8795:9:11"},{"kind":"number","nodeType":"YulLiteral","src":"8806:2:11","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8791:3:11"},"nodeType":"YulFunctionCall","src":"8791:18:11"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8783:4:11"}]}]},"name":"abi_encode_tuple_t_stringliteral_942dfdb1d5d5ae526782b9f85d1470d0ba794a7c694ad01b5b8d1ba2521ed1a1__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8612:9:11","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8626:4:11","type":""}],"src":"8461:354:11"},{"body":{"nodeType":"YulBlock","src":"8994:177:11","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9011:9:11"},{"kind":"number","nodeType":"YulLiteral","src":"9022:2:11","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9004:6:11"},"nodeType":"YulFunctionCall","src":"9004:21:11"},"nodeType":"YulExpressionStatement","src":"9004:21:11"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9045:9:11"},{"kind":"number","nodeType":"YulLiteral","src":"9056:2:11","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9041:3:11"},"nodeType":"YulFunctionCall","src":"9041:18:11"},{"kind":"number","nodeType":"YulLiteral","src":"9061:2:11","type":"","value":"27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9034:6:11"},"nodeType":"YulFunctionCall","src":"9034:30:11"},"nodeType":"YulExpressionStatement","src":"9034:30:11"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9084:9:11"},{"kind":"number","nodeType":"YulLiteral","src":"9095:2:11","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9080:3:11"},"nodeType":"YulFunctionCall","src":"9080:18:11"},{"kind":"string","nodeType":"YulLiteral","src":"9100:29:11","type":"","value":"ERC4626: mint more than max"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9073:6:11"},"nodeType":"YulFunctionCall","src":"9073:57:11"},"nodeType":"YulExpressionStatement","src":"9073:57:11"},{"nodeType":"YulAssignment","src":"9139:26:11","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9151:9:11"},{"kind":"number","nodeType":"YulLiteral","src":"9162:2:11","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9147:3:11"},"nodeType":"YulFunctionCall","src":"9147:18:11"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9139:4:11"}]}]},"name":"abi_encode_tuple_t_stringliteral_a4a897ed07dc1191e15e1ac5726d86067d87f89bebeded2b310bdf1e25a3dac3__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8971:9:11","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8985:4:11","type":""}],"src":"8820:351:11"},{"body":{"nodeType":"YulBlock","src":"9350:223:11","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9367:9:11"},{"kind":"number","nodeType":"YulLiteral","src":"9378:2:11","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9360:6:11"},"nodeType":"YulFunctionCall","src":"9360:21:11"},"nodeType":"YulExpressionStatement","src":"9360:21:11"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9401:9:11"},{"kind":"number","nodeType":"YulLiteral","src":"9412:2:11","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9397:3:11"},"nodeType":"YulFunctionCall","src":"9397:18:11"},{"kind":"number","nodeType":"YulLiteral","src":"9417:2:11","type":"","value":"33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9390:6:11"},"nodeType":"YulFunctionCall","src":"9390:30:11"},"nodeType":"YulExpressionStatement","src":"9390:30:11"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9440:9:11"},{"kind":"number","nodeType":"YulLiteral","src":"9451:2:11","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9436:3:11"},"nodeType":"YulFunctionCall","src":"9436:18:11"},{"kind":"string","nodeType":"YulLiteral","src":"9456:34:11","type":"","value":"ERC20: burn from the zero addres"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9429:6:11"},"nodeType":"YulFunctionCall","src":"9429:62:11"},"nodeType":"YulExpressionStatement","src":"9429:62:11"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9511:9:11"},{"kind":"number","nodeType":"YulLiteral","src":"9522:2:11","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9507:3:11"},"nodeType":"YulFunctionCall","src":"9507:18:11"},{"kind":"string","nodeType":"YulLiteral","src":"9527:3:11","type":"","value":"s"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9500:6:11"},"nodeType":"YulFunctionCall","src":"9500:31:11"},"nodeType":"YulExpressionStatement","src":"9500:31:11"},{"nodeType":"YulAssignment","src":"9540:27:11","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9552:9:11"},{"kind":"number","nodeType":"YulLiteral","src":"9563:3:11","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9548:3:11"},"nodeType":"YulFunctionCall","src":"9548:19:11"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9540:4:11"}]}]},"name":"abi_encode_tuple_t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9327:9:11","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"9341:4:11","type":""}],"src":"9176:397:11"},{"body":{"nodeType":"YulBlock","src":"9752:227:11","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9769:9:11"},{"kind":"number","nodeType":"YulLiteral","src":"9780:2:11","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9762:6:11"},"nodeType":"YulFunctionCall","src":"9762:21:11"},"nodeType":"YulExpressionStatement","src":"9762:21:11"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9803:9:11"},{"kind":"number","nodeType":"YulLiteral","src":"9814:2:11","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9799:3:11"},"nodeType":"YulFunctionCall","src":"9799:18:11"},{"kind":"number","nodeType":"YulLiteral","src":"9819:2:11","type":"","value":"37"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9792:6:11"},"nodeType":"YulFunctionCall","src":"9792:30:11"},"nodeType":"YulExpressionStatement","src":"9792:30:11"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9842:9:11"},{"kind":"number","nodeType":"YulLiteral","src":"9853:2:11","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9838:3:11"},"nodeType":"YulFunctionCall","src":"9838:18:11"},{"kind":"string","nodeType":"YulLiteral","src":"9858:34:11","type":"","value":"ERC20: transfer from the zero ad"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9831:6:11"},"nodeType":"YulFunctionCall","src":"9831:62:11"},"nodeType":"YulExpressionStatement","src":"9831:62:11"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9913:9:11"},{"kind":"number","nodeType":"YulLiteral","src":"9924:2:11","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9909:3:11"},"nodeType":"YulFunctionCall","src":"9909:18:11"},{"kind":"string","nodeType":"YulLiteral","src":"9929:7:11","type":"","value":"dress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9902:6:11"},"nodeType":"YulFunctionCall","src":"9902:35:11"},"nodeType":"YulExpressionStatement","src":"9902:35:11"},{"nodeType":"YulAssignment","src":"9946:27:11","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9958:9:11"},{"kind":"number","nodeType":"YulLiteral","src":"9969:3:11","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9954:3:11"},"nodeType":"YulFunctionCall","src":"9954:19:11"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9946:4:11"}]}]},"name":"abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9729:9:11","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"9743:4:11","type":""}],"src":"9578:401:11"},{"body":{"nodeType":"YulBlock","src":"10158:226:11","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10175:9:11"},{"kind":"number","nodeType":"YulLiteral","src":"10186:2:11","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10168:6:11"},"nodeType":"YulFunctionCall","src":"10168:21:11"},"nodeType":"YulExpressionStatement","src":"10168:21:11"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10209:9:11"},{"kind":"number","nodeType":"YulLiteral","src":"10220:2:11","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10205:3:11"},"nodeType":"YulFunctionCall","src":"10205:18:11"},{"kind":"number","nodeType":"YulLiteral","src":"10225:2:11","type":"","value":"36"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10198:6:11"},"nodeType":"YulFunctionCall","src":"10198:30:11"},"nodeType":"YulExpressionStatement","src":"10198:30:11"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10248:9:11"},{"kind":"number","nodeType":"YulLiteral","src":"10259:2:11","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10244:3:11"},"nodeType":"YulFunctionCall","src":"10244:18:11"},{"kind":"string","nodeType":"YulLiteral","src":"10264:34:11","type":"","value":"ERC20: approve from the zero add"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10237:6:11"},"nodeType":"YulFunctionCall","src":"10237:62:11"},"nodeType":"YulExpressionStatement","src":"10237:62:11"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10319:9:11"},{"kind":"number","nodeType":"YulLiteral","src":"10330:2:11","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10315:3:11"},"nodeType":"YulFunctionCall","src":"10315:18:11"},{"kind":"string","nodeType":"YulLiteral","src":"10335:6:11","type":"","value":"ress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10308:6:11"},"nodeType":"YulFunctionCall","src":"10308:34:11"},"nodeType":"YulExpressionStatement","src":"10308:34:11"},{"nodeType":"YulAssignment","src":"10351:27:11","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10363:9:11"},{"kind":"number","nodeType":"YulLiteral","src":"10374:3:11","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10359:3:11"},"nodeType":"YulFunctionCall","src":"10359:19:11"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"10351:4:11"}]}]},"name":"abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10135:9:11","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"10149:4:11","type":""}],"src":"9984:400:11"},{"body":{"nodeType":"YulBlock","src":"10563:179:11","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10580:9:11"},{"kind":"number","nodeType":"YulLiteral","src":"10591:2:11","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10573:6:11"},"nodeType":"YulFunctionCall","src":"10573:21:11"},"nodeType":"YulExpressionStatement","src":"10573:21:11"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10614:9:11"},{"kind":"number","nodeType":"YulLiteral","src":"10625:2:11","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10610:3:11"},"nodeType":"YulFunctionCall","src":"10610:18:11"},{"kind":"number","nodeType":"YulLiteral","src":"10630:2:11","type":"","value":"29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10603:6:11"},"nodeType":"YulFunctionCall","src":"10603:30:11"},"nodeType":"YulExpressionStatement","src":"10603:30:11"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10653:9:11"},{"kind":"number","nodeType":"YulLiteral","src":"10664:2:11","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10649:3:11"},"nodeType":"YulFunctionCall","src":"10649:18:11"},{"kind":"string","nodeType":"YulLiteral","src":"10669:31:11","type":"","value":"Address: call to non-contract"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10642:6:11"},"nodeType":"YulFunctionCall","src":"10642:59:11"},"nodeType":"YulExpressionStatement","src":"10642:59:11"},{"nodeType":"YulAssignment","src":"10710:26:11","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10722:9:11"},{"kind":"number","nodeType":"YulLiteral","src":"10733:2:11","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10718:3:11"},"nodeType":"YulFunctionCall","src":"10718:18:11"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"10710:4:11"}]}]},"name":"abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10540:9:11","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"10554:4:11","type":""}],"src":"10389:353:11"},{"body":{"nodeType":"YulBlock","src":"10921:232:11","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10938:9:11"},{"kind":"number","nodeType":"YulLiteral","src":"10949:2:11","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10931:6:11"},"nodeType":"YulFunctionCall","src":"10931:21:11"},"nodeType":"YulExpressionStatement","src":"10931:21:11"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10972:9:11"},{"kind":"number","nodeType":"YulLiteral","src":"10983:2:11","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10968:3:11"},"nodeType":"YulFunctionCall","src":"10968:18:11"},{"kind":"number","nodeType":"YulLiteral","src":"10988:2:11","type":"","value":"42"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10961:6:11"},"nodeType":"YulFunctionCall","src":"10961:30:11"},"nodeType":"YulExpressionStatement","src":"10961:30:11"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11011:9:11"},{"kind":"number","nodeType":"YulLiteral","src":"11022:2:11","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11007:3:11"},"nodeType":"YulFunctionCall","src":"11007:18:11"},{"kind":"string","nodeType":"YulLiteral","src":"11027:34:11","type":"","value":"SafeERC20: ERC20 operation did n"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11000:6:11"},"nodeType":"YulFunctionCall","src":"11000:62:11"},"nodeType":"YulExpressionStatement","src":"11000:62:11"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11082:9:11"},{"kind":"number","nodeType":"YulLiteral","src":"11093:2:11","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11078:3:11"},"nodeType":"YulFunctionCall","src":"11078:18:11"},{"kind":"string","nodeType":"YulLiteral","src":"11098:12:11","type":"","value":"ot succeed"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11071:6:11"},"nodeType":"YulFunctionCall","src":"11071:40:11"},"nodeType":"YulExpressionStatement","src":"11071:40:11"},{"nodeType":"YulAssignment","src":"11120:27:11","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11132:9:11"},{"kind":"number","nodeType":"YulLiteral","src":"11143:3:11","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11128:3:11"},"nodeType":"YulFunctionCall","src":"11128:19:11"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11120:4:11"}]}]},"name":"abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10898:9:11","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"10912:4:11","type":""}],"src":"10747:406:11"},{"body":{"nodeType":"YulBlock","src":"11332:169:11","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11349:9:11"},{"kind":"number","nodeType":"YulLiteral","src":"11360:2:11","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11342:6:11"},"nodeType":"YulFunctionCall","src":"11342:21:11"},"nodeType":"YulExpressionStatement","src":"11342:21:11"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11383:9:11"},{"kind":"number","nodeType":"YulLiteral","src":"11394:2:11","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11379:3:11"},"nodeType":"YulFunctionCall","src":"11379:18:11"},{"kind":"number","nodeType":"YulLiteral","src":"11399:2:11","type":"","value":"19"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11372:6:11"},"nodeType":"YulFunctionCall","src":"11372:30:11"},"nodeType":"YulExpressionStatement","src":"11372:30:11"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11422:9:11"},{"kind":"number","nodeType":"YulLiteral","src":"11433:2:11","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11418:3:11"},"nodeType":"YulFunctionCall","src":"11418:18:11"},{"kind":"string","nodeType":"YulLiteral","src":"11438:21:11","type":"","value":"Too little received"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11411:6:11"},"nodeType":"YulFunctionCall","src":"11411:49:11"},"nodeType":"YulExpressionStatement","src":"11411:49:11"},{"nodeType":"YulAssignment","src":"11469:26:11","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11481:9:11"},{"kind":"number","nodeType":"YulLiteral","src":"11492:2:11","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11477:3:11"},"nodeType":"YulFunctionCall","src":"11477:18:11"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11469:4:11"}]}]},"name":"abi_encode_tuple_t_stringliteral_f037a9cbca9be03859489f289f0cf5f85c0414bbfdd9785bc7ab31bd734e249c__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11309:9:11","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"11323:4:11","type":""}],"src":"11158:343:11"},{"body":{"nodeType":"YulBlock","src":"11680:227:11","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11697:9:11"},{"kind":"number","nodeType":"YulLiteral","src":"11708:2:11","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11690:6:11"},"nodeType":"YulFunctionCall","src":"11690:21:11"},"nodeType":"YulExpressionStatement","src":"11690:21:11"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11731:9:11"},{"kind":"number","nodeType":"YulLiteral","src":"11742:2:11","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11727:3:11"},"nodeType":"YulFunctionCall","src":"11727:18:11"},{"kind":"number","nodeType":"YulLiteral","src":"11747:2:11","type":"","value":"37"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11720:6:11"},"nodeType":"YulFunctionCall","src":"11720:30:11"},"nodeType":"YulExpressionStatement","src":"11720:30:11"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11770:9:11"},{"kind":"number","nodeType":"YulLiteral","src":"11781:2:11","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11766:3:11"},"nodeType":"YulFunctionCall","src":"11766:18:11"},{"kind":"string","nodeType":"YulLiteral","src":"11786:34:11","type":"","value":"ERC20: decreased allowance below"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11759:6:11"},"nodeType":"YulFunctionCall","src":"11759:62:11"},"nodeType":"YulExpressionStatement","src":"11759:62:11"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11841:9:11"},{"kind":"number","nodeType":"YulLiteral","src":"11852:2:11","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11837:3:11"},"nodeType":"YulFunctionCall","src":"11837:18:11"},{"kind":"string","nodeType":"YulLiteral","src":"11857:7:11","type":"","value":" zero"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11830:6:11"},"nodeType":"YulFunctionCall","src":"11830:35:11"},"nodeType":"YulExpressionStatement","src":"11830:35:11"},{"nodeType":"YulAssignment","src":"11874:27:11","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11886:9:11"},{"kind":"number","nodeType":"YulLiteral","src":"11897:3:11","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11882:3:11"},"nodeType":"YulFunctionCall","src":"11882:19:11"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11874:4:11"}]}]},"name":"abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11657:9:11","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"11671:4:11","type":""}],"src":"11506:401:11"},{"body":{"nodeType":"YulBlock","src":"12086:181:11","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12103:9:11"},{"kind":"number","nodeType":"YulLiteral","src":"12114:2:11","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12096:6:11"},"nodeType":"YulFunctionCall","src":"12096:21:11"},"nodeType":"YulExpressionStatement","src":"12096:21:11"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12137:9:11"},{"kind":"number","nodeType":"YulLiteral","src":"12148:2:11","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12133:3:11"},"nodeType":"YulFunctionCall","src":"12133:18:11"},{"kind":"number","nodeType":"YulLiteral","src":"12153:2:11","type":"","value":"31"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12126:6:11"},"nodeType":"YulFunctionCall","src":"12126:30:11"},"nodeType":"YulExpressionStatement","src":"12126:30:11"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12176:9:11"},{"kind":"number","nodeType":"YulLiteral","src":"12187:2:11","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12172:3:11"},"nodeType":"YulFunctionCall","src":"12172:18:11"},{"kind":"string","nodeType":"YulLiteral","src":"12192:33:11","type":"","value":"ERC20: mint to the zero address"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12165:6:11"},"nodeType":"YulFunctionCall","src":"12165:61:11"},"nodeType":"YulExpressionStatement","src":"12165:61:11"},{"nodeType":"YulAssignment","src":"12235:26:11","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12247:9:11"},{"kind":"number","nodeType":"YulLiteral","src":"12258:2:11","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12243:3:11"},"nodeType":"YulFunctionCall","src":"12243:18:11"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12235:4:11"}]}]},"name":"abi_encode_tuple_t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12063:9:11","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"12077:4:11","type":""}],"src":"11912:355:11"},{"body":{"nodeType":"YulBlock","src":"12373:76:11","statements":[{"nodeType":"YulAssignment","src":"12383:26:11","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12395:9:11"},{"kind":"number","nodeType":"YulLiteral","src":"12406:2:11","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12391:3:11"},"nodeType":"YulFunctionCall","src":"12391:18:11"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12383:4:11"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12425:9:11"},{"name":"value0","nodeType":"YulIdentifier","src":"12436:6:11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12418:6:11"},"nodeType":"YulFunctionCall","src":"12418:25:11"},"nodeType":"YulExpressionStatement","src":"12418:25:11"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12342:9:11","type":""},{"name":"value0","nodeType":"YulTypedName","src":"12353:6:11","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"12364:4:11","type":""}],"src":"12272:177:11"},{"body":{"nodeType":"YulBlock","src":"12583:119:11","statements":[{"nodeType":"YulAssignment","src":"12593:26:11","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12605:9:11"},{"kind":"number","nodeType":"YulLiteral","src":"12616:2:11","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12601:3:11"},"nodeType":"YulFunctionCall","src":"12601:18:11"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12593:4:11"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12635:9:11"},{"name":"value0","nodeType":"YulIdentifier","src":"12646:6:11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12628:6:11"},"nodeType":"YulFunctionCall","src":"12628:25:11"},"nodeType":"YulExpressionStatement","src":"12628:25:11"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12673:9:11"},{"kind":"number","nodeType":"YulLiteral","src":"12684:2:11","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12669:3:11"},"nodeType":"YulFunctionCall","src":"12669:18:11"},{"name":"value1","nodeType":"YulIdentifier","src":"12689:6:11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12662:6:11"},"nodeType":"YulFunctionCall","src":"12662:34:11"},"nodeType":"YulExpressionStatement","src":"12662:34:11"}]},"name":"abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12544:9:11","type":""},{"name":"value1","nodeType":"YulTypedName","src":"12555:6:11","type":""},{"name":"value0","nodeType":"YulTypedName","src":"12563:6:11","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"12574:4:11","type":""}],"src":"12454:248:11"},{"body":{"nodeType":"YulBlock","src":"12804:87:11","statements":[{"nodeType":"YulAssignment","src":"12814:26:11","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12826:9:11"},{"kind":"number","nodeType":"YulLiteral","src":"12837:2:11","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12822:3:11"},"nodeType":"YulFunctionCall","src":"12822:18:11"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12814:4:11"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12856:9:11"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"12871:6:11"},{"kind":"number","nodeType":"YulLiteral","src":"12879:4:11","type":"","value":"0xff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"12867:3:11"},"nodeType":"YulFunctionCall","src":"12867:17:11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12849:6:11"},"nodeType":"YulFunctionCall","src":"12849:36:11"},"nodeType":"YulExpressionStatement","src":"12849:36:11"}]},"name":"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12773:9:11","type":""},{"name":"value0","nodeType":"YulTypedName","src":"12784:6:11","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"12795:4:11","type":""}],"src":"12707:184:11"},{"body":{"nodeType":"YulBlock","src":"12944:80:11","statements":[{"body":{"nodeType":"YulBlock","src":"12971:22:11","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"12973:16:11"},"nodeType":"YulFunctionCall","src":"12973:18:11"},"nodeType":"YulExpressionStatement","src":"12973:18:11"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"12960:1:11"},{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"12967:1:11"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"12963:3:11"},"nodeType":"YulFunctionCall","src":"12963:6:11"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"12957:2:11"},"nodeType":"YulFunctionCall","src":"12957:13:11"},"nodeType":"YulIf","src":"12954:2:11"},{"nodeType":"YulAssignment","src":"13002:16:11","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"13013:1:11"},{"name":"y","nodeType":"YulIdentifier","src":"13016:1:11"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13009:3:11"},"nodeType":"YulFunctionCall","src":"13009:9:11"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"13002:3:11"}]}]},"name":"checked_add_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"12927:1:11","type":""},{"name":"y","nodeType":"YulTypedName","src":"12930:1:11","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"12936:3:11","type":""}],"src":"12896:128:11"},{"body":{"nodeType":"YulBlock","src":"13093:358:11","statements":[{"nodeType":"YulVariableDeclaration","src":"13103:16:11","value":{"kind":"number","nodeType":"YulLiteral","src":"13118:1:11","type":"","value":"1"},"variables":[{"name":"power_1","nodeType":"YulTypedName","src":"13107:7:11","type":""}]},{"nodeType":"YulAssignment","src":"13128:16:11","value":{"name":"power_1","nodeType":"YulIdentifier","src":"13137:7:11"},"variableNames":[{"name":"power","nodeType":"YulIdentifier","src":"13128:5:11"}]},{"nodeType":"YulAssignment","src":"13153:13:11","value":{"name":"_base","nodeType":"YulIdentifier","src":"13161:5:11"},"variableNames":[{"name":"base","nodeType":"YulIdentifier","src":"13153:4:11"}]},{"body":{"nodeType":"YulBlock","src":"13217:228:11","statements":[{"body":{"nodeType":"YulBlock","src":"13262:22:11","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"13264:16:11"},"nodeType":"YulFunctionCall","src":"13264:18:11"},"nodeType":"YulExpressionStatement","src":"13264:18:11"}]},"condition":{"arguments":[{"name":"base","nodeType":"YulIdentifier","src":"13237:4:11"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13251:1:11","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"13247:3:11"},"nodeType":"YulFunctionCall","src":"13247:6:11"},{"name":"base","nodeType":"YulIdentifier","src":"13255:4:11"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"13243:3:11"},"nodeType":"YulFunctionCall","src":"13243:17:11"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"13234:2:11"},"nodeType":"YulFunctionCall","src":"13234:27:11"},"nodeType":"YulIf","src":"13231:2:11"},{"body":{"nodeType":"YulBlock","src":"13323:29:11","statements":[{"nodeType":"YulAssignment","src":"13325:25:11","value":{"arguments":[{"name":"power","nodeType":"YulIdentifier","src":"13338:5:11"},{"name":"base","nodeType":"YulIdentifier","src":"13345:4:11"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"13334:3:11"},"nodeType":"YulFunctionCall","src":"13334:16:11"},"variableNames":[{"name":"power","nodeType":"YulIdentifier","src":"13325:5:11"}]}]},"condition":{"arguments":[{"name":"exponent","nodeType":"YulIdentifier","src":"13304:8:11"},{"name":"power_1","nodeType":"YulIdentifier","src":"13314:7:11"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"13300:3:11"},"nodeType":"YulFunctionCall","src":"13300:22:11"},"nodeType":"YulIf","src":"13297:2:11"},{"nodeType":"YulAssignment","src":"13365:23:11","value":{"arguments":[{"name":"base","nodeType":"YulIdentifier","src":"13377:4:11"},{"name":"base","nodeType":"YulIdentifier","src":"13383:4:11"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"13373:3:11"},"nodeType":"YulFunctionCall","src":"13373:15:11"},"variableNames":[{"name":"base","nodeType":"YulIdentifier","src":"13365:4:11"}]},{"nodeType":"YulAssignment","src":"13401:34:11","value":{"arguments":[{"name":"power_1","nodeType":"YulIdentifier","src":"13417:7:11"},{"name":"exponent","nodeType":"YulIdentifier","src":"13426:8:11"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"13413:3:11"},"nodeType":"YulFunctionCall","src":"13413:22:11"},"variableNames":[{"name":"exponent","nodeType":"YulIdentifier","src":"13401:8:11"}]}]},"condition":{"arguments":[{"name":"exponent","nodeType":"YulIdentifier","src":"13186:8:11"},{"name":"power_1","nodeType":"YulIdentifier","src":"13196:7:11"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"13183:2:11"},"nodeType":"YulFunctionCall","src":"13183:21:11"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"13205:3:11","statements":[]},"pre":{"nodeType":"YulBlock","src":"13179:3:11","statements":[]},"src":"13175:270:11"}]},"name":"checked_exp_helper","nodeType":"YulFunctionDefinition","parameters":[{"name":"_base","nodeType":"YulTypedName","src":"13057:5:11","type":""},{"name":"exponent","nodeType":"YulTypedName","src":"13064:8:11","type":""}],"returnVariables":[{"name":"power","nodeType":"YulTypedName","src":"13077:5:11","type":""},{"name":"base","nodeType":"YulTypedName","src":"13084:4:11","type":""}],"src":"13029:422:11"},{"body":{"nodeType":"YulBlock","src":"13524:72:11","statements":[{"nodeType":"YulAssignment","src":"13534:56:11","value":{"arguments":[{"name":"base","nodeType":"YulIdentifier","src":"13564:4:11"},{"arguments":[{"name":"exponent","nodeType":"YulIdentifier","src":"13574:8:11"},{"kind":"number","nodeType":"YulLiteral","src":"13584:4:11","type":"","value":"0xff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"13570:3:11"},"nodeType":"YulFunctionCall","src":"13570:19:11"}],"functionName":{"name":"checked_exp_unsigned","nodeType":"YulIdentifier","src":"13543:20:11"},"nodeType":"YulFunctionCall","src":"13543:47:11"},"variableNames":[{"name":"power","nodeType":"YulIdentifier","src":"13534:5:11"}]}]},"name":"checked_exp_t_uint256_t_uint8","nodeType":"YulFunctionDefinition","parameters":[{"name":"base","nodeType":"YulTypedName","src":"13495:4:11","type":""},{"name":"exponent","nodeType":"YulTypedName","src":"13501:8:11","type":""}],"returnVariables":[{"name":"power","nodeType":"YulTypedName","src":"13514:5:11","type":""}],"src":"13456:140:11"},{"body":{"nodeType":"YulBlock","src":"13660:747:11","statements":[{"body":{"nodeType":"YulBlock","src":"13698:52:11","statements":[{"nodeType":"YulAssignment","src":"13712:10:11","value":{"kind":"number","nodeType":"YulLiteral","src":"13721:1:11","type":"","value":"1"},"variableNames":[{"name":"power","nodeType":"YulIdentifier","src":"13712:5:11"}]},{"nodeType":"YulLeave","src":"13735:5:11"}]},"condition":{"arguments":[{"name":"exponent","nodeType":"YulIdentifier","src":"13680:8:11"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"13673:6:11"},"nodeType":"YulFunctionCall","src":"13673:16:11"},"nodeType":"YulIf","src":"13670:2:11"},{"body":{"nodeType":"YulBlock","src":"13783:52:11","statements":[{"nodeType":"YulAssignment","src":"13797:10:11","value":{"kind":"number","nodeType":"YulLiteral","src":"13806:1:11","type":"","value":"0"},"variableNames":[{"name":"power","nodeType":"YulIdentifier","src":"13797:5:11"}]},{"nodeType":"YulLeave","src":"13820:5:11"}]},"condition":{"arguments":[{"name":"base","nodeType":"YulIdentifier","src":"13769:4:11"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"13762:6:11"},"nodeType":"YulFunctionCall","src":"13762:12:11"},"nodeType":"YulIf","src":"13759:2:11"},{"cases":[{"body":{"nodeType":"YulBlock","src":"13871:52:11","statements":[{"nodeType":"YulAssignment","src":"13885:10:11","value":{"kind":"number","nodeType":"YulLiteral","src":"13894:1:11","type":"","value":"1"},"variableNames":[{"name":"power","nodeType":"YulIdentifier","src":"13885:5:11"}]},{"nodeType":"YulLeave","src":"13908:5:11"}]},"nodeType":"YulCase","src":"13864:59:11","value":{"kind":"number","nodeType":"YulLiteral","src":"13869:1:11","type":"","value":"1"}},{"body":{"nodeType":"YulBlock","src":"13939:123:11","statements":[{"body":{"nodeType":"YulBlock","src":"13974:22:11","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"13976:16:11"},"nodeType":"YulFunctionCall","src":"13976:18:11"},"nodeType":"YulExpressionStatement","src":"13976:18:11"}]},"condition":{"arguments":[{"name":"exponent","nodeType":"YulIdentifier","src":"13959:8:11"},{"kind":"number","nodeType":"YulLiteral","src":"13969:3:11","type":"","value":"255"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"13956:2:11"},"nodeType":"YulFunctionCall","src":"13956:17:11"},"nodeType":"YulIf","src":"13953:2:11"},{"nodeType":"YulAssignment","src":"14009:25:11","value":{"arguments":[{"name":"exponent","nodeType":"YulIdentifier","src":"14022:8:11"},{"kind":"number","nodeType":"YulLiteral","src":"14032:1:11","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"14018:3:11"},"nodeType":"YulFunctionCall","src":"14018:16:11"},"variableNames":[{"name":"power","nodeType":"YulIdentifier","src":"14009:5:11"}]},{"nodeType":"YulLeave","src":"14047:5:11"}]},"nodeType":"YulCase","src":"13932:130:11","value":{"kind":"number","nodeType":"YulLiteral","src":"13937:1:11","type":"","value":"2"}}],"expression":{"name":"base","nodeType":"YulIdentifier","src":"13851:4:11"},"nodeType":"YulSwitch","src":"13844:218:11"},{"body":{"nodeType":"YulBlock","src":"14160:70:11","statements":[{"nodeType":"YulAssignment","src":"14174:28:11","value":{"arguments":[{"name":"base","nodeType":"YulIdentifier","src":"14187:4:11"},{"name":"exponent","nodeType":"YulIdentifier","src":"14193:8:11"}],"functionName":{"name":"exp","nodeType":"YulIdentifier","src":"14183:3:11"},"nodeType":"YulFunctionCall","src":"14183:19:11"},"variableNames":[{"name":"power","nodeType":"YulIdentifier","src":"14174:5:11"}]},{"nodeType":"YulLeave","src":"14215:5:11"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"base","nodeType":"YulIdentifier","src":"14084:4:11"},{"kind":"number","nodeType":"YulLiteral","src":"14090:2:11","type":"","value":"11"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"14081:2:11"},"nodeType":"YulFunctionCall","src":"14081:12:11"},{"arguments":[{"name":"exponent","nodeType":"YulIdentifier","src":"14098:8:11"},{"kind":"number","nodeType":"YulLiteral","src":"14108:2:11","type":"","value":"78"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"14095:2:11"},"nodeType":"YulFunctionCall","src":"14095:16:11"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"14077:3:11"},"nodeType":"YulFunctionCall","src":"14077:35:11"},{"arguments":[{"arguments":[{"name":"base","nodeType":"YulIdentifier","src":"14121:4:11"},{"kind":"number","nodeType":"YulLiteral","src":"14127:3:11","type":"","value":"307"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"14118:2:11"},"nodeType":"YulFunctionCall","src":"14118:13:11"},{"arguments":[{"name":"exponent","nodeType":"YulIdentifier","src":"14136:8:11"},{"kind":"number","nodeType":"YulLiteral","src":"14146:2:11","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"14133:2:11"},"nodeType":"YulFunctionCall","src":"14133:16:11"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"14114:3:11"},"nodeType":"YulFunctionCall","src":"14114:36:11"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"14074:2:11"},"nodeType":"YulFunctionCall","src":"14074:77:11"},"nodeType":"YulIf","src":"14071:2:11"},{"nodeType":"YulVariableDeclaration","src":"14239:57:11","value":{"arguments":[{"name":"base","nodeType":"YulIdentifier","src":"14281:4:11"},{"name":"exponent","nodeType":"YulIdentifier","src":"14287:8:11"}],"functionName":{"name":"checked_exp_helper","nodeType":"YulIdentifier","src":"14262:18:11"},"nodeType":"YulFunctionCall","src":"14262:34:11"},"variables":[{"name":"power_1","nodeType":"YulTypedName","src":"14243:7:11","type":""},{"name":"base_1","nodeType":"YulTypedName","src":"14252:6:11","type":""}]},{"body":{"nodeType":"YulBlock","src":"14341:22:11","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"14343:16:11"},"nodeType":"YulFunctionCall","src":"14343:18:11"},"nodeType":"YulExpressionStatement","src":"14343:18:11"}]},"condition":{"arguments":[{"name":"power_1","nodeType":"YulIdentifier","src":"14311:7:11"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"14328:1:11","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"14324:3:11"},"nodeType":"YulFunctionCall","src":"14324:6:11"},{"name":"base_1","nodeType":"YulIdentifier","src":"14332:6:11"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"14320:3:11"},"nodeType":"YulFunctionCall","src":"14320:19:11"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"14308:2:11"},"nodeType":"YulFunctionCall","src":"14308:32:11"},"nodeType":"YulIf","src":"14305:2:11"},{"nodeType":"YulAssignment","src":"14372:29:11","value":{"arguments":[{"name":"power_1","nodeType":"YulIdentifier","src":"14385:7:11"},{"name":"base_1","nodeType":"YulIdentifier","src":"14394:6:11"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"14381:3:11"},"nodeType":"YulFunctionCall","src":"14381:20:11"},"variableNames":[{"name":"power","nodeType":"YulIdentifier","src":"14372:5:11"}]}]},"name":"checked_exp_unsigned","nodeType":"YulFunctionDefinition","parameters":[{"name":"base","nodeType":"YulTypedName","src":"13631:4:11","type":""},{"name":"exponent","nodeType":"YulTypedName","src":"13637:8:11","type":""}],"returnVariables":[{"name":"power","nodeType":"YulTypedName","src":"13650:5:11","type":""}],"src":"13601:806:11"},{"body":{"nodeType":"YulBlock","src":"14461:76:11","statements":[{"body":{"nodeType":"YulBlock","src":"14483:22:11","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"14485:16:11"},"nodeType":"YulFunctionCall","src":"14485:18:11"},"nodeType":"YulExpressionStatement","src":"14485:18:11"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"14477:1:11"},{"name":"y","nodeType":"YulIdentifier","src":"14480:1:11"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"14474:2:11"},"nodeType":"YulFunctionCall","src":"14474:8:11"},"nodeType":"YulIf","src":"14471:2:11"},{"nodeType":"YulAssignment","src":"14514:17:11","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"14526:1:11"},{"name":"y","nodeType":"YulIdentifier","src":"14529:1:11"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"14522:3:11"},"nodeType":"YulFunctionCall","src":"14522:9:11"},"variableNames":[{"name":"diff","nodeType":"YulIdentifier","src":"14514:4:11"}]}]},"name":"checked_sub_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"14443:1:11","type":""},{"name":"y","nodeType":"YulTypedName","src":"14446:1:11","type":""}],"returnVariables":[{"name":"diff","nodeType":"YulTypedName","src":"14452:4:11","type":""}],"src":"14412:125:11"},{"body":{"nodeType":"YulBlock","src":"14595:205:11","statements":[{"nodeType":"YulVariableDeclaration","src":"14605:10:11","value":{"kind":"number","nodeType":"YulLiteral","src":"14614:1:11","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"14609:1:11","type":""}]},{"body":{"nodeType":"YulBlock","src":"14674:63:11","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"14699:3:11"},{"name":"i","nodeType":"YulIdentifier","src":"14704:1:11"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14695:3:11"},"nodeType":"YulFunctionCall","src":"14695:11:11"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"14718:3:11"},{"name":"i","nodeType":"YulIdentifier","src":"14723:1:11"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14714:3:11"},"nodeType":"YulFunctionCall","src":"14714:11:11"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"14708:5:11"},"nodeType":"YulFunctionCall","src":"14708:18:11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14688:6:11"},"nodeType":"YulFunctionCall","src":"14688:39:11"},"nodeType":"YulExpressionStatement","src":"14688:39:11"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"14635:1:11"},{"name":"length","nodeType":"YulIdentifier","src":"14638:6:11"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"14632:2:11"},"nodeType":"YulFunctionCall","src":"14632:13:11"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"14646:19:11","statements":[{"nodeType":"YulAssignment","src":"14648:15:11","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"14657:1:11"},{"kind":"number","nodeType":"YulLiteral","src":"14660:2:11","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14653:3:11"},"nodeType":"YulFunctionCall","src":"14653:10:11"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"14648:1:11"}]}]},"pre":{"nodeType":"YulBlock","src":"14628:3:11","statements":[]},"src":"14624:113:11"},{"body":{"nodeType":"YulBlock","src":"14763:31:11","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"14776:3:11"},{"name":"length","nodeType":"YulIdentifier","src":"14781:6:11"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14772:3:11"},"nodeType":"YulFunctionCall","src":"14772:16:11"},{"kind":"number","nodeType":"YulLiteral","src":"14790:1:11","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14765:6:11"},"nodeType":"YulFunctionCall","src":"14765:27:11"},"nodeType":"YulExpressionStatement","src":"14765:27:11"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"14752:1:11"},{"name":"length","nodeType":"YulIdentifier","src":"14755:6:11"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"14749:2:11"},"nodeType":"YulFunctionCall","src":"14749:13:11"},"nodeType":"YulIf","src":"14746:2:11"}]},"name":"copy_memory_to_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"14573:3:11","type":""},{"name":"dst","nodeType":"YulTypedName","src":"14578:3:11","type":""},{"name":"length","nodeType":"YulTypedName","src":"14583:6:11","type":""}],"src":"14542:258:11"},{"body":{"nodeType":"YulBlock","src":"14860:325:11","statements":[{"nodeType":"YulAssignment","src":"14870:22:11","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"14884:1:11","type":"","value":"1"},{"name":"data","nodeType":"YulIdentifier","src":"14887:4:11"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"14880:3:11"},"nodeType":"YulFunctionCall","src":"14880:12:11"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"14870:6:11"}]},{"nodeType":"YulVariableDeclaration","src":"14901:38:11","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"14931:4:11"},{"kind":"number","nodeType":"YulLiteral","src":"14937:1:11","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"14927:3:11"},"nodeType":"YulFunctionCall","src":"14927:12:11"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"14905:18:11","type":""}]},{"body":{"nodeType":"YulBlock","src":"14978:31:11","statements":[{"nodeType":"YulAssignment","src":"14980:27:11","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"14994:6:11"},{"kind":"number","nodeType":"YulLiteral","src":"15002:4:11","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"14990:3:11"},"nodeType":"YulFunctionCall","src":"14990:17:11"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"14980:6:11"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"14958:18:11"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"14951:6:11"},"nodeType":"YulFunctionCall","src":"14951:26:11"},"nodeType":"YulIf","src":"14948:2:11"},{"body":{"nodeType":"YulBlock","src":"15068:111:11","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15089:1:11","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15096:3:11","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"15101:10:11","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"15092:3:11"},"nodeType":"YulFunctionCall","src":"15092:20:11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15082:6:11"},"nodeType":"YulFunctionCall","src":"15082:31:11"},"nodeType":"YulExpressionStatement","src":"15082:31:11"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15133:1:11","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"15136:4:11","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15126:6:11"},"nodeType":"YulFunctionCall","src":"15126:15:11"},"nodeType":"YulExpressionStatement","src":"15126:15:11"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15161:1:11","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"15164:4:11","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"15154:6:11"},"nodeType":"YulFunctionCall","src":"15154:15:11"},"nodeType":"YulExpressionStatement","src":"15154:15:11"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"15024:18:11"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"15047:6:11"},{"kind":"number","nodeType":"YulLiteral","src":"15055:2:11","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"15044:2:11"},"nodeType":"YulFunctionCall","src":"15044:14:11"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"15021:2:11"},"nodeType":"YulFunctionCall","src":"15021:38:11"},"nodeType":"YulIf","src":"15018:2:11"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"14840:4:11","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"14849:6:11","type":""}],"src":"14805:380:11"},{"body":{"nodeType":"YulBlock","src":"15222:95:11","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15239:1:11","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15246:3:11","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"15251:10:11","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"15242:3:11"},"nodeType":"YulFunctionCall","src":"15242:20:11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15232:6:11"},"nodeType":"YulFunctionCall","src":"15232:31:11"},"nodeType":"YulExpressionStatement","src":"15232:31:11"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15279:1:11","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"15282:4:11","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15272:6:11"},"nodeType":"YulFunctionCall","src":"15272:15:11"},"nodeType":"YulExpressionStatement","src":"15272:15:11"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15303:1:11","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"15306:4:11","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"15296:6:11"},"nodeType":"YulFunctionCall","src":"15296:15:11"},"nodeType":"YulExpressionStatement","src":"15296:15:11"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"15190:127:11"}]},"contents":"{\n    { }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(value1, value1) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(value2, value2) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(value0, value0) }\n        value0 := abi_decode_address(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        let value := mload(headStart)\n        if iszero(eq(value, iszero(iszero(value)))) { revert(value0, value0) }\n        value0 := value\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        value0 := mload(headStart)\n    }\n    function abi_decode_tuple_t_uint256t_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(value0, value0) }\n        value0 := calldataload(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_uint256t_addresst_address(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(value0, value0) }\n        value0 := calldataload(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := abi_decode_address(add(headStart, 64))\n    }\n    function abi_decode_tuple_t_uint256t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(value3, value3) }\n        value0 := calldataload(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := abi_decode_address(add(headStart, 64))\n        value3 := calldataload(add(headStart, 96))\n    }\n    function abi_decode_tuple_t_uint256t_addresst_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(value0, value0) }\n        value0 := calldataload(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n    }\n    function abi_decode_tuple_t_uint8_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        let value := mload(headStart)\n        if iszero(eq(value, and(value, 0xff))) { revert(value0, value0) }\n        value0 := value\n    }\n    function abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        let length := mload(value0)\n        copy_memory_to_memory(add(value0, 0x20), pos, length)\n        end := add(pos, length)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        let length := mload(value0)\n        mstore(add(headStart, 32), length)\n        copy_memory_to_memory(add(value0, 32), add(headStart, 64), length)\n        tail := add(add(headStart, and(add(length, 31), not(31))), 64)\n    }\n    function abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 35)\n        mstore(add(headStart, 64), \"ERC20: transfer to the zero addr\")\n        mstore(add(headStart, 96), \"ess\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 34)\n        mstore(add(headStart, 64), \"ERC20: burn amount exceeds balan\")\n        mstore(add(headStart, 96), \"ce\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 34)\n        mstore(add(headStart, 64), \"ERC20: approve to the zero addre\")\n        mstore(add(headStart, 96), \"ss\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"ERC20: insufficient allowance\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_3cf75848883fee8cd3a46e6e14bbbd331bc8d0caaef08fbe607c62e5fba35c6d__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"ERC4626: redeem more than max\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"ERC20: transfer amount exceeds b\")\n        mstore(add(headStart, 96), \"alance\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Address: insufficient balance fo\")\n        mstore(add(headStart, 96), \"r call\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_6d33bd82b6352ef75960e453c6162657943d72f718df3c8a607eeb1427f0aa42__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 31)\n        mstore(add(headStart, 64), \"ERC4626: withdraw more than max\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_942dfdb1d5d5ae526782b9f85d1470d0ba794a7c694ad01b5b8d1ba2521ed1a1__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 30)\n        mstore(add(headStart, 64), \"ERC4626: deposit more than max\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_a4a897ed07dc1191e15e1ac5726d86067d87f89bebeded2b310bdf1e25a3dac3__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 27)\n        mstore(add(headStart, 64), \"ERC4626: mint more than max\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 33)\n        mstore(add(headStart, 64), \"ERC20: burn from the zero addres\")\n        mstore(add(headStart, 96), \"s\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 37)\n        mstore(add(headStart, 64), \"ERC20: transfer from the zero ad\")\n        mstore(add(headStart, 96), \"dress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 36)\n        mstore(add(headStart, 64), \"ERC20: approve from the zero add\")\n        mstore(add(headStart, 96), \"ress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"Address: call to non-contract\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 42)\n        mstore(add(headStart, 64), \"SafeERC20: ERC20 operation did n\")\n        mstore(add(headStart, 96), \"ot succeed\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_f037a9cbca9be03859489f289f0cf5f85c0414bbfdd9785bc7ab31bd734e249c__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 19)\n        mstore(add(headStart, 64), \"Too little received\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 37)\n        mstore(add(headStart, 64), \"ERC20: decreased allowance below\")\n        mstore(add(headStart, 96), \" zero\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 31)\n        mstore(add(headStart, 64), \"ERC20: mint to the zero address\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xff))\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        if gt(x, not(y)) { panic_error_0x11() }\n        sum := add(x, y)\n    }\n    function checked_exp_helper(_base, exponent) -> power, base\n    {\n        let power_1 := 1\n        power := power_1\n        base := _base\n        for { } gt(exponent, power_1) { }\n        {\n            if gt(base, div(not(0), base)) { panic_error_0x11() }\n            if and(exponent, power_1) { power := mul(power, base) }\n            base := mul(base, base)\n            exponent := shr(power_1, exponent)\n        }\n    }\n    function checked_exp_t_uint256_t_uint8(base, exponent) -> power\n    {\n        power := checked_exp_unsigned(base, and(exponent, 0xff))\n    }\n    function checked_exp_unsigned(base, exponent) -> power\n    {\n        if iszero(exponent)\n        {\n            power := 1\n            leave\n        }\n        if iszero(base)\n        {\n            power := 0\n            leave\n        }\n        switch base\n        case 1 {\n            power := 1\n            leave\n        }\n        case 2 {\n            if gt(exponent, 255) { panic_error_0x11() }\n            power := shl(exponent, 1)\n            leave\n        }\n        if or(and(lt(base, 11), lt(exponent, 78)), and(lt(base, 307), lt(exponent, 32)))\n        {\n            power := exp(base, exponent)\n            leave\n        }\n        let power_1, base_1 := checked_exp_helper(base, exponent)\n        if gt(power_1, div(not(0), base_1)) { panic_error_0x11() }\n        power := mul(power_1, base_1)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        if lt(x, y) { panic_error_0x11() }\n        diff := sub(x, y)\n    }\n    function copy_memory_to_memory(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        if gt(i, length) { mstore(add(dst, length), 0) }\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n}","id":11,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{"848":[{"length":32,"start":666},{"length":32,"start":1125},{"length":32,"start":3038},{"length":32,"start":3565},{"length":32,"start":4323},{"length":32,"start":4515}]},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106101e55760003560e01c806394bf804d1161010f578063ba087652116100a2578063ce96cb7711610071578063ce96cb7714610414578063d905777e14610427578063dd62ed3e1461043a578063ef8b30f71461040157600080fd5b8063ba087652146103c6578063bc157ac1146103d9578063c63d75b6146103ec578063c6e6f5921461040157600080fd5b8063a457c2d7116100de578063a457c2d71461037a578063a9059cbb1461038d578063b3d7f6b9146103a0578063b460af94146103b357600080fd5b806394bf804d1461033957806395d89b411461034c5780639f40a7b314610354578063a318c1a41461036757600080fd5b8063313ce567116101875780634cdad506116101565780634cdad5061461021a5780636e553f65146102ea57806370a08231146102fd578063836a10401461032657600080fd5b8063313ce5671461027e57806338d52e0f1461028d57806339509351146102c4578063402d267d146102d757600080fd5b8063095ea7b3116101c3578063095ea7b31461022d5780630a28a4771461025057806318160ddd1461026357806323b872dd1461026b57600080fd5b806301e1d114146101ea57806306fdde031461020557806307a2d13a1461021a575b600080fd5b6101f261044d565b6040519081526020015b60405180910390f35b61020d6104ec565b6040516101fc9190611a37565b6101f2610228366004611906565b61057e565b61024061023b3660046118bd565b610591565b60405190151581526020016101fc565b6101f261025e366004611906565b6105a9565b6002546101f2565b610240610279366004611882565b6105b6565b604051601281526020016101fc565b6040516001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001681526020016101fc565b6102406102d23660046118bd565b6105dc565b6101f26102e5366004611836565b6105fe565b6101f26102f8366004611936565b61061c565b6101f261030b366004611836565b6001600160a01b031660009081526020819052604090205490565b6101f26103343660046119d6565b610694565b6101f2610347366004611936565b610732565b61020d61074c565b6101f2610362366004611993565b61075b565b6101f2610375366004611993565b6108e1565b6102406103883660046118bd565b61097e565b61024061039b3660046118bd565b610a04565b6101f26103ae366004611906565b610a12565b6101f26103c1366004611958565b610a1f565b6101f26103d4366004611958565b610a9b565b6101f26103e73660046119d6565b610b0f565b6101f26103fa366004611836565b5060001990565b6101f261040f366004611906565b610b32565b6101f2610422366004611836565b610b3f565b6101f2610435366004611836565b610b63565b6101f2610448366004611850565b610b81565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b1580156104af57600080fd5b505afa1580156104c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104e7919061191e565b905090565b6060600380546104fb90611bb3565b80601f016020809104026020016040519081016040528092919081815260200182805461052790611bb3565b80156105745780601f1061054957610100808354040283529160200191610574565b820191906000526020600020905b81548152906001019060200180831161055757829003601f168201915b5050505050905090565b600061058b826000610bac565b92915050565b60003361059f818585610c8f565b5060019392505050565b600061058b826001610db3565b6000336105c4858285610e7c565b6105cf858585610ef6565b60019150505b9392505050565b60003361059f8185856105ef8383610b81565b6105f99190611a6a565b610c8f565b60006106086110c4565b61061357600061058b565b60001992915050565b6000610627826105fe565b83111561067b5760405162461bcd60e51b815260206004820152601e60248201527f455243343632363a206465706f736974206d6f7265207468616e206d6178000060448201526064015b60405180910390fd5b600061068684610b32565b90506105d5338486846110de565b6001600160a01b0382166000908152602081905260408120546106b78585610732565b50806106d8856001600160a01b031660009081526020819052604090205490565b6106e29190611b70565b91508282101561072a5760405162461bcd60e51b8152602060048201526013602482015272151bdbc81b1a5d1d1b19481c9958d95a5d9959606a1b6044820152606401610672565b509392505050565b60008061073e84610a12565b90506105d5338483876110de565b6060600480546104fb90611bb3565b6040516370a0823160e01b81526001600160a01b0384166004820152600090819073eb4c2781e4eba804ce9a9803c67d0893436bb27d906370a082319060240160206040518083038186803b1580156107b357600080fd5b505afa1580156107c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107eb919061191e565b90506107f8868686610a9b565b506040516370a0823160e01b81526001600160a01b0386166004820152819073eb4c2781e4eba804ce9a9803c67d0893436bb27d906370a082319060240160206040518083038186803b15801561084e57600080fd5b505afa158015610862573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610886919061191e565b6108909190611b70565b9150828210156108d85760405162461bcd60e51b8152602060048201526013602482015272151bdbc81b1a5d1d1b19481c9958d95a5d9959606a1b6044820152606401610672565b50949350505050565b6040516370a0823160e01b81526001600160a01b0384166004820152600090819073eb4c2781e4eba804ce9a9803c67d0893436bb27d906370a082319060240160206040518083038186803b15801561093957600080fd5b505afa15801561094d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610971919061191e565b90506107f8868686610a1f565b6000338161098c8286610b81565b9050838110156109ec5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610672565b6109f98286868403610c8f565b506001949350505050565b60003361059f818585610ef6565b600061058b826001610bac565b6000610a2a82610b3f565b841115610a795760405162461bcd60e51b815260206004820152601f60248201527f455243343632363a207769746864726177206d6f7265207468616e206d6178006044820152606401610672565b6000610a84856105a9565b9050610a933385858885611170565b949350505050565b6000610aa682610b63565b841115610af55760405162461bcd60e51b815260206004820152601d60248201527f455243343632363a2072656465656d206d6f7265207468616e206d61780000006044820152606401610672565b6000610b008561057e565b9050610a933385858489611170565b6001600160a01b0382166000908152602081905260408120546106b7858561061c565b600061058b826000610db3565b6001600160a01b03811660009081526020819052604081205461058b906000610bac565b6001600160a01b03811660009081526020819052604081205461058b565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b600080610bb860025490565b90508015610bd957610bd4610bcb61044d565b85908386611230565b610a93565b610a937f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610c3557600080fd5b505afa158015610c49573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c6d91906119fa565b610c7890600a611ac5565b60125b610c8690600a611ac5565b86919086611230565b6001600160a01b038316610cf15760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610672565b6001600160a01b038216610d525760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610672565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b600080610dbf60025490565b9050831580610dcc575080155b610ddc57610bd481610c8661044d565b610a93610deb6012600a611ac5565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610e4457600080fd5b505afa158015610e58573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c7b91906119fa565b6000610e888484610b81565b90506000198114610ef05781811015610ee35760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610672565b610ef08484848403610c8f565b50505050565b6001600160a01b038316610f5a5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610672565b6001600160a01b038216610fbc5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610672565b6001600160a01b038316600090815260208190526040902054818110156110345760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610672565b6001600160a01b0380851660009081526020819052604080822085850390559185168152908120805484929061106b908490611a6a565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516110b791815260200190565b60405180910390a3610ef0565b6000806110cf61044d565b11806104e75750506002541590565b61110a7f00000000000000000000000000000000000000000000000000000000000000008530856112ae565b6111148382611319565b826001600160a01b0316846001600160a01b03167fdcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d78484604051611162929190918252602082015260400190565b60405180910390a350505050565b826001600160a01b0316856001600160a01b03161461119457611194838683610e7c565b61119e83826113f8565b6111c97f00000000000000000000000000000000000000000000000000000000000000008584611546565b826001600160a01b0316846001600160a01b0316866001600160a01b03167ffbde797d201c681b91056529119e0b02407c7bb96a4a2c75c01fc9667232c8db8585604051611221929190918252602082015260400190565b60405180910390a45050505050565b60008061123e868686611576565b9050600183600281111561126257634e487b7160e01b600052602160045260246000fd5b14801561128d57506000848061128857634e487b7160e01b600052601260045260246000fd5b868809115b156112a05761129d600182611a6a565b90505b95945050505050565b505050565b6040516001600160a01b0380851660248301528316604482015260648101829052610ef09085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611634565b6001600160a01b03821661136f5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610672565b80600260008282546113819190611a6a565b90915550506001600160a01b038216600090815260208190526040812080548392906113ae908490611a6a565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b6001600160a01b0382166114585760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401610672565b6001600160a01b038216600090815260208190526040902054818110156114cc5760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401610672565b6001600160a01b03831660009081526020819052604081208383039055600280548492906114fb908490611b70565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a3505050565b6040516001600160a01b0383166024820152604481018290526112a990849063a9059cbb60e01b906064016112e2565b6000808060001985870985870292508281108382030391505080600014156115bf578382816115b557634e487b7160e01b600052601260045260246000fd5b04925050506105d5565b8084116115cb57600080fd5b60008486880960026001871981018816978890046003810283188082028403028082028403028082028403028082028403028082028403029081029092039091026000889003889004909101858311909403939093029303949094049190911702949350505050565b6000611689826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166117069092919063ffffffff16565b8051909150156112a957808060200190518101906116a791906118e6565b6112a95760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610672565b6060610a938484600085856001600160a01b0385163b6117685760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610672565b600080866001600160a01b031685876040516117849190611a1b565b60006040518083038185875af1925050503d80600081146117c1576040519150601f19603f3d011682016040523d82523d6000602084013e6117c6565b606091505b50915091506117d68282866117e1565b979650505050505050565b606083156117f05750816105d5565b8251156118005782518084602001fd5b8160405162461bcd60e51b81526004016106729190611a37565b80356001600160a01b038116811461183157600080fd5b919050565b600060208284031215611847578081fd5b6105d58261181a565b60008060408385031215611862578081fd5b61186b8361181a565b91506118796020840161181a565b90509250929050565b600080600060608486031215611896578081fd5b61189f8461181a565b92506118ad6020850161181a565b9150604084013590509250925092565b600080604083850312156118cf578182fd5b6118d88361181a565b946020939093013593505050565b6000602082840312156118f7578081fd5b815180151581146105d5578182fd5b600060208284031215611917578081fd5b5035919050565b60006020828403121561192f578081fd5b5051919050565b60008060408385031215611948578182fd5b823591506118796020840161181a565b60008060006060848603121561196c578283fd5b8335925061197c6020850161181a565b915061198a6040850161181a565b90509250925092565b600080600080608085870312156119a8578081fd5b843593506119b86020860161181a565b92506119c66040860161181a565b9396929550929360600135925050565b6000806000606084860312156119ea578283fd5b833592506118ad6020850161181a565b600060208284031215611a0b578081fd5b815160ff811681146105d5578182fd5b60008251611a2d818460208701611b87565b9190910192915050565b6020815260008251806020840152611a56816040850160208701611b87565b601f01601f19169190910160400192915050565b60008219821115611a7d57611a7d611bee565b500190565b600181815b80851115611abd578160001904821115611aa357611aa3611bee565b80851615611ab057918102915b93841c9390800290611a87565b509250929050565b60006105d560ff841683600082611ade5750600161058b565b81611aeb5750600061058b565b8160018114611b015760028114611b0b57611b27565b600191505061058b565b60ff841115611b1c57611b1c611bee565b50506001821b61058b565b5060208310610133831016604e8410600b8410161715611b4a575081810a61058b565b611b548383611a82565b8060001904821115611b6857611b68611bee565b029392505050565b600082821015611b8257611b82611bee565b500390565b60005b83811015611ba2578181015183820152602001611b8a565b83811115610ef05750506000910152565b600181811c90821680611bc757607f821691505b60208210811415611be857634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fdfea2646970667358221220333216fe75604df7e9fd7519fae33a6cbd122cdc5aeb260e0d3ef3febb01b8f864736f6c63430008040033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x1E5 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x94BF804D GT PUSH2 0x10F JUMPI DUP1 PUSH4 0xBA087652 GT PUSH2 0xA2 JUMPI DUP1 PUSH4 0xCE96CB77 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0xCE96CB77 EQ PUSH2 0x414 JUMPI DUP1 PUSH4 0xD905777E EQ PUSH2 0x427 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x43A JUMPI DUP1 PUSH4 0xEF8B30F7 EQ PUSH2 0x401 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xBA087652 EQ PUSH2 0x3C6 JUMPI DUP1 PUSH4 0xBC157AC1 EQ PUSH2 0x3D9 JUMPI DUP1 PUSH4 0xC63D75B6 EQ PUSH2 0x3EC JUMPI DUP1 PUSH4 0xC6E6F592 EQ PUSH2 0x401 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xA457C2D7 GT PUSH2 0xDE JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x37A JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x38D JUMPI DUP1 PUSH4 0xB3D7F6B9 EQ PUSH2 0x3A0 JUMPI DUP1 PUSH4 0xB460AF94 EQ PUSH2 0x3B3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x94BF804D EQ PUSH2 0x339 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x34C JUMPI DUP1 PUSH4 0x9F40A7B3 EQ PUSH2 0x354 JUMPI DUP1 PUSH4 0xA318C1A4 EQ PUSH2 0x367 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x313CE567 GT PUSH2 0x187 JUMPI DUP1 PUSH4 0x4CDAD506 GT PUSH2 0x156 JUMPI DUP1 PUSH4 0x4CDAD506 EQ PUSH2 0x21A JUMPI DUP1 PUSH4 0x6E553F65 EQ PUSH2 0x2EA JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x2FD JUMPI DUP1 PUSH4 0x836A1040 EQ PUSH2 0x326 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x313CE567 EQ PUSH2 0x27E JUMPI DUP1 PUSH4 0x38D52E0F EQ PUSH2 0x28D JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x2C4 JUMPI DUP1 PUSH4 0x402D267D EQ PUSH2 0x2D7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x95EA7B3 GT PUSH2 0x1C3 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x22D JUMPI DUP1 PUSH4 0xA28A477 EQ PUSH2 0x250 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x263 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x26B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1E1D114 EQ PUSH2 0x1EA JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x205 JUMPI DUP1 PUSH4 0x7A2D13A EQ PUSH2 0x21A JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1F2 PUSH2 0x44D JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x20D PUSH2 0x4EC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1FC SWAP2 SWAP1 PUSH2 0x1A37 JUMP JUMPDEST PUSH2 0x1F2 PUSH2 0x228 CALLDATASIZE PUSH1 0x4 PUSH2 0x1906 JUMP JUMPDEST PUSH2 0x57E JUMP JUMPDEST PUSH2 0x240 PUSH2 0x23B CALLDATASIZE PUSH1 0x4 PUSH2 0x18BD JUMP JUMPDEST PUSH2 0x591 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1FC JUMP JUMPDEST PUSH2 0x1F2 PUSH2 0x25E CALLDATASIZE PUSH1 0x4 PUSH2 0x1906 JUMP JUMPDEST PUSH2 0x5A9 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH2 0x1F2 JUMP JUMPDEST PUSH2 0x240 PUSH2 0x279 CALLDATASIZE PUSH1 0x4 PUSH2 0x1882 JUMP JUMPDEST PUSH2 0x5B6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x12 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1FC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1FC JUMP JUMPDEST PUSH2 0x240 PUSH2 0x2D2 CALLDATASIZE PUSH1 0x4 PUSH2 0x18BD JUMP JUMPDEST PUSH2 0x5DC JUMP JUMPDEST PUSH2 0x1F2 PUSH2 0x2E5 CALLDATASIZE PUSH1 0x4 PUSH2 0x1836 JUMP JUMPDEST PUSH2 0x5FE JUMP JUMPDEST PUSH2 0x1F2 PUSH2 0x2F8 CALLDATASIZE PUSH1 0x4 PUSH2 0x1936 JUMP JUMPDEST PUSH2 0x61C JUMP JUMPDEST PUSH2 0x1F2 PUSH2 0x30B CALLDATASIZE PUSH1 0x4 PUSH2 0x1836 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x1F2 PUSH2 0x334 CALLDATASIZE PUSH1 0x4 PUSH2 0x19D6 JUMP JUMPDEST PUSH2 0x694 JUMP JUMPDEST PUSH2 0x1F2 PUSH2 0x347 CALLDATASIZE PUSH1 0x4 PUSH2 0x1936 JUMP JUMPDEST PUSH2 0x732 JUMP JUMPDEST PUSH2 0x20D PUSH2 0x74C JUMP JUMPDEST PUSH2 0x1F2 PUSH2 0x362 CALLDATASIZE PUSH1 0x4 PUSH2 0x1993 JUMP JUMPDEST PUSH2 0x75B JUMP JUMPDEST PUSH2 0x1F2 PUSH2 0x375 CALLDATASIZE PUSH1 0x4 PUSH2 0x1993 JUMP JUMPDEST PUSH2 0x8E1 JUMP JUMPDEST PUSH2 0x240 PUSH2 0x388 CALLDATASIZE PUSH1 0x4 PUSH2 0x18BD JUMP JUMPDEST PUSH2 0x97E JUMP JUMPDEST PUSH2 0x240 PUSH2 0x39B CALLDATASIZE PUSH1 0x4 PUSH2 0x18BD JUMP JUMPDEST PUSH2 0xA04 JUMP JUMPDEST PUSH2 0x1F2 PUSH2 0x3AE CALLDATASIZE PUSH1 0x4 PUSH2 0x1906 JUMP JUMPDEST PUSH2 0xA12 JUMP JUMPDEST PUSH2 0x1F2 PUSH2 0x3C1 CALLDATASIZE PUSH1 0x4 PUSH2 0x1958 JUMP JUMPDEST PUSH2 0xA1F JUMP JUMPDEST PUSH2 0x1F2 PUSH2 0x3D4 CALLDATASIZE PUSH1 0x4 PUSH2 0x1958 JUMP JUMPDEST PUSH2 0xA9B JUMP JUMPDEST PUSH2 0x1F2 PUSH2 0x3E7 CALLDATASIZE PUSH1 0x4 PUSH2 0x19D6 JUMP JUMPDEST PUSH2 0xB0F JUMP JUMPDEST PUSH2 0x1F2 PUSH2 0x3FA CALLDATASIZE PUSH1 0x4 PUSH2 0x1836 JUMP JUMPDEST POP PUSH1 0x0 NOT SWAP1 JUMP JUMPDEST PUSH2 0x1F2 PUSH2 0x40F CALLDATASIZE PUSH1 0x4 PUSH2 0x1906 JUMP JUMPDEST PUSH2 0xB32 JUMP JUMPDEST PUSH2 0x1F2 PUSH2 0x422 CALLDATASIZE PUSH1 0x4 PUSH2 0x1836 JUMP JUMPDEST PUSH2 0xB3F JUMP JUMPDEST PUSH2 0x1F2 PUSH2 0x435 CALLDATASIZE PUSH1 0x4 PUSH2 0x1836 JUMP JUMPDEST PUSH2 0xB63 JUMP JUMPDEST PUSH2 0x1F2 PUSH2 0x448 CALLDATASIZE PUSH1 0x4 PUSH2 0x1850 JUMP JUMPDEST PUSH2 0xB81 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x0 SWAP1 PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4AF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4C3 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4E7 SWAP2 SWAP1 PUSH2 0x191E JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH2 0x4FB SWAP1 PUSH2 0x1BB3 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x527 SWAP1 PUSH2 0x1BB3 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x574 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x549 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x574 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x557 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x58B DUP3 PUSH1 0x0 PUSH2 0xBAC JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x59F DUP2 DUP6 DUP6 PUSH2 0xC8F JUMP JUMPDEST POP PUSH1 0x1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x58B DUP3 PUSH1 0x1 PUSH2 0xDB3 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x5C4 DUP6 DUP3 DUP6 PUSH2 0xE7C JUMP JUMPDEST PUSH2 0x5CF DUP6 DUP6 DUP6 PUSH2 0xEF6 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x59F DUP2 DUP6 DUP6 PUSH2 0x5EF DUP4 DUP4 PUSH2 0xB81 JUMP JUMPDEST PUSH2 0x5F9 SWAP2 SWAP1 PUSH2 0x1A6A JUMP JUMPDEST PUSH2 0xC8F JUMP JUMPDEST PUSH1 0x0 PUSH2 0x608 PUSH2 0x10C4 JUMP JUMPDEST PUSH2 0x613 JUMPI PUSH1 0x0 PUSH2 0x58B JUMP JUMPDEST PUSH1 0x0 NOT SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x627 DUP3 PUSH2 0x5FE JUMP JUMPDEST DUP4 GT ISZERO PUSH2 0x67B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243343632363A206465706F736974206D6F7265207468616E206D61780000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x686 DUP5 PUSH2 0xB32 JUMP JUMPDEST SWAP1 POP PUSH2 0x5D5 CALLER DUP5 DUP7 DUP5 PUSH2 0x10DE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH2 0x6B7 DUP6 DUP6 PUSH2 0x732 JUMP JUMPDEST POP DUP1 PUSH2 0x6D8 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x6E2 SWAP2 SWAP1 PUSH2 0x1B70 JUMP JUMPDEST SWAP2 POP DUP3 DUP3 LT ISZERO PUSH2 0x72A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH19 0x151BDBC81B1A5D1D1B19481C9958D95A5D9959 PUSH1 0x6A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x672 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x73E DUP5 PUSH2 0xA12 JUMP JUMPDEST SWAP1 POP PUSH2 0x5D5 CALLER DUP5 DUP4 DUP8 PUSH2 0x10DE JUMP JUMPDEST PUSH1 0x60 PUSH1 0x4 DUP1 SLOAD PUSH2 0x4FB SWAP1 PUSH2 0x1BB3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x0 SWAP1 DUP2 SWAP1 PUSH20 0xEB4C2781E4EBA804CE9A9803C67D0893436BB27D SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x7B3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x7C7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x7EB SWAP2 SWAP1 PUSH2 0x191E JUMP JUMPDEST SWAP1 POP PUSH2 0x7F8 DUP7 DUP7 DUP7 PUSH2 0xA9B JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH1 0x4 DUP3 ADD MSTORE DUP2 SWAP1 PUSH20 0xEB4C2781E4EBA804CE9A9803C67D0893436BB27D SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x84E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x862 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x886 SWAP2 SWAP1 PUSH2 0x191E JUMP JUMPDEST PUSH2 0x890 SWAP2 SWAP1 PUSH2 0x1B70 JUMP JUMPDEST SWAP2 POP DUP3 DUP3 LT ISZERO PUSH2 0x8D8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH19 0x151BDBC81B1A5D1D1B19481C9958D95A5D9959 PUSH1 0x6A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x672 JUMP JUMPDEST POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x0 SWAP1 DUP2 SWAP1 PUSH20 0xEB4C2781E4EBA804CE9A9803C67D0893436BB27D SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x939 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x94D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x971 SWAP2 SWAP1 PUSH2 0x191E JUMP JUMPDEST SWAP1 POP PUSH2 0x7F8 DUP7 DUP7 DUP7 PUSH2 0xA1F JUMP JUMPDEST PUSH1 0x0 CALLER DUP2 PUSH2 0x98C DUP3 DUP7 PUSH2 0xB81 JUMP JUMPDEST SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0x9EC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x207A65726F PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x672 JUMP JUMPDEST PUSH2 0x9F9 DUP3 DUP7 DUP7 DUP5 SUB PUSH2 0xC8F JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x59F DUP2 DUP6 DUP6 PUSH2 0xEF6 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x58B DUP3 PUSH1 0x1 PUSH2 0xBAC JUMP JUMPDEST PUSH1 0x0 PUSH2 0xA2A DUP3 PUSH2 0xB3F JUMP JUMPDEST DUP5 GT ISZERO PUSH2 0xA79 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243343632363A207769746864726177206D6F7265207468616E206D617800 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x672 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xA84 DUP6 PUSH2 0x5A9 JUMP JUMPDEST SWAP1 POP PUSH2 0xA93 CALLER DUP6 DUP6 DUP9 DUP6 PUSH2 0x1170 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xAA6 DUP3 PUSH2 0xB63 JUMP JUMPDEST DUP5 GT ISZERO PUSH2 0xAF5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243343632363A2072656465656D206D6F7265207468616E206D6178000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x672 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB00 DUP6 PUSH2 0x57E JUMP JUMPDEST SWAP1 POP PUSH2 0xA93 CALLER DUP6 DUP6 DUP5 DUP10 PUSH2 0x1170 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH2 0x6B7 DUP6 DUP6 PUSH2 0x61C JUMP JUMPDEST PUSH1 0x0 PUSH2 0x58B DUP3 PUSH1 0x0 PUSH2 0xDB3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH2 0x58B SWAP1 PUSH1 0x0 PUSH2 0xBAC JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH2 0x58B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xBB8 PUSH1 0x2 SLOAD SWAP1 JUMP JUMPDEST SWAP1 POP DUP1 ISZERO PUSH2 0xBD9 JUMPI PUSH2 0xBD4 PUSH2 0xBCB PUSH2 0x44D JUMP JUMPDEST DUP6 SWAP1 DUP4 DUP7 PUSH2 0x1230 JUMP JUMPDEST PUSH2 0xA93 JUMP JUMPDEST PUSH2 0xA93 PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x313CE567 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xC35 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xC49 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xC6D SWAP2 SWAP1 PUSH2 0x19FA JUMP JUMPDEST PUSH2 0xC78 SWAP1 PUSH1 0xA PUSH2 0x1AC5 JUMP JUMPDEST PUSH1 0x12 JUMPDEST PUSH2 0xC86 SWAP1 PUSH1 0xA PUSH2 0x1AC5 JUMP JUMPDEST DUP7 SWAP2 SWAP1 DUP7 PUSH2 0x1230 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0xCF1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x672 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0xD52 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x7373 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x672 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP6 SWAP1 SSTORE SWAP1 MLOAD DUP5 DUP2 MSTORE PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xDBF PUSH1 0x2 SLOAD SWAP1 JUMP JUMPDEST SWAP1 POP DUP4 ISZERO DUP1 PUSH2 0xDCC JUMPI POP DUP1 ISZERO JUMPDEST PUSH2 0xDDC JUMPI PUSH2 0xBD4 DUP2 PUSH2 0xC86 PUSH2 0x44D JUMP JUMPDEST PUSH2 0xA93 PUSH2 0xDEB PUSH1 0x12 PUSH1 0xA PUSH2 0x1AC5 JUMP JUMPDEST PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x313CE567 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xE44 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xE58 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xC7B SWAP2 SWAP1 PUSH2 0x19FA JUMP JUMPDEST PUSH1 0x0 PUSH2 0xE88 DUP5 DUP5 PUSH2 0xB81 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 NOT DUP2 EQ PUSH2 0xEF0 JUMPI DUP2 DUP2 LT ISZERO PUSH2 0xEE3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x672 JUMP JUMPDEST PUSH2 0xEF0 DUP5 DUP5 DUP5 DUP5 SUB PUSH2 0xC8F JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0xF5A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x6472657373 PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x672 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0xFBC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x44 DUP3 ADD MSTORE PUSH3 0x657373 PUSH1 0xE8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x672 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0x1034 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x616C616E6365 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x672 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP6 DUP6 SUB SWAP1 SSTORE SWAP2 DUP6 AND DUP2 MSTORE SWAP1 DUP2 KECCAK256 DUP1 SLOAD DUP5 SWAP3 SWAP1 PUSH2 0x106B SWAP1 DUP5 SWAP1 PUSH2 0x1A6A JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP5 PUSH1 0x40 MLOAD PUSH2 0x10B7 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0xEF0 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x10CF PUSH2 0x44D JUMP JUMPDEST GT DUP1 PUSH2 0x4E7 JUMPI POP POP PUSH1 0x2 SLOAD ISZERO SWAP1 JUMP JUMPDEST PUSH2 0x110A PUSH32 0x0 DUP6 ADDRESS DUP6 PUSH2 0x12AE JUMP JUMPDEST PUSH2 0x1114 DUP4 DUP3 PUSH2 0x1319 JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xDCBC1C05240F31FF3AD067EF1EE35CE4997762752E3A095284754544F4C709D7 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH2 0x1162 SWAP3 SWAP2 SWAP1 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x1194 JUMPI PUSH2 0x1194 DUP4 DUP7 DUP4 PUSH2 0xE7C JUMP JUMPDEST PUSH2 0x119E DUP4 DUP3 PUSH2 0x13F8 JUMP JUMPDEST PUSH2 0x11C9 PUSH32 0x0 DUP6 DUP5 PUSH2 0x1546 JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xFBDE797D201C681B91056529119E0B02407C7BB96A4A2C75C01FC9667232C8DB DUP6 DUP6 PUSH1 0x40 MLOAD PUSH2 0x1221 SWAP3 SWAP2 SWAP1 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x123E DUP7 DUP7 DUP7 PUSH2 0x1576 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 DUP4 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x1262 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST EQ DUP1 ISZERO PUSH2 0x128D JUMPI POP PUSH1 0x0 DUP5 DUP1 PUSH2 0x1288 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP7 DUP9 MULMOD GT JUMPDEST ISZERO PUSH2 0x12A0 JUMPI PUSH2 0x129D PUSH1 0x1 DUP3 PUSH2 0x1A6A JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x24 DUP4 ADD MSTORE DUP4 AND PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0xEF0 SWAP1 DUP6 SWAP1 PUSH4 0x23B872DD PUSH1 0xE0 SHL SWAP1 PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE PUSH2 0x1634 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x136F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A206D696E7420746F20746865207A65726F206164647265737300 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x672 JUMP JUMPDEST DUP1 PUSH1 0x2 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x1381 SWAP2 SWAP1 PUSH2 0x1A6A JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD DUP4 SWAP3 SWAP1 PUSH2 0x13AE SWAP1 DUP5 SWAP1 PUSH2 0x1A6A JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 MLOAD DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH1 0x0 SWAP1 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x1458 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A206275726E2066726F6D20746865207A65726F20616464726573 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x73 PUSH1 0xF8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x672 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0x14CC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A206275726E20616D6F756E7420657863656564732062616C616E PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x6365 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x672 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP4 DUP4 SUB SWAP1 SSTORE PUSH1 0x2 DUP1 SLOAD DUP5 SWAP3 SWAP1 PUSH2 0x14FB SWAP1 DUP5 SWAP1 PUSH2 0x1B70 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 MLOAD DUP3 DUP2 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x12A9 SWAP1 DUP5 SWAP1 PUSH4 0xA9059CBB PUSH1 0xE0 SHL SWAP1 PUSH1 0x64 ADD PUSH2 0x12E2 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 PUSH1 0x0 NOT DUP6 DUP8 MULMOD DUP6 DUP8 MUL SWAP3 POP DUP3 DUP2 LT DUP4 DUP3 SUB SUB SWAP2 POP POP DUP1 PUSH1 0x0 EQ ISZERO PUSH2 0x15BF JUMPI DUP4 DUP3 DUP2 PUSH2 0x15B5 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DIV SWAP3 POP POP POP PUSH2 0x5D5 JUMP JUMPDEST DUP1 DUP5 GT PUSH2 0x15CB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP5 DUP7 DUP9 MULMOD PUSH1 0x2 PUSH1 0x1 DUP8 NOT DUP2 ADD DUP9 AND SWAP8 DUP9 SWAP1 DIV PUSH1 0x3 DUP2 MUL DUP4 XOR DUP1 DUP3 MUL DUP5 SUB MUL DUP1 DUP3 MUL DUP5 SUB MUL DUP1 DUP3 MUL DUP5 SUB MUL DUP1 DUP3 MUL DUP5 SUB MUL DUP1 DUP3 MUL DUP5 SUB MUL SWAP1 DUP2 MUL SWAP1 SWAP3 SUB SWAP1 SWAP2 MUL PUSH1 0x0 DUP9 SWAP1 SUB DUP9 SWAP1 DIV SWAP1 SWAP2 ADD DUP6 DUP4 GT SWAP1 SWAP5 SUB SWAP4 SWAP1 SWAP4 MUL SWAP4 SUB SWAP5 SWAP1 SWAP5 DIV SWAP2 SWAP1 SWAP2 OR MUL SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1689 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1706 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP2 POP ISZERO PUSH2 0x12A9 JUMPI DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x16A7 SWAP2 SWAP1 PUSH2 0x18E6 JUMP JUMPDEST PUSH2 0x12A9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x44 DUP3 ADD MSTORE PUSH10 0x1BDD081CDD58D8D95959 PUSH1 0xB2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x672 JUMP JUMPDEST PUSH1 0x60 PUSH2 0xA93 DUP5 DUP5 PUSH1 0x0 DUP6 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND EXTCODESIZE PUSH2 0x1768 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x672 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 DUP8 PUSH1 0x40 MLOAD PUSH2 0x1784 SWAP2 SWAP1 PUSH2 0x1A1B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x17C1 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x17C6 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x17D6 DUP3 DUP3 DUP7 PUSH2 0x17E1 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x17F0 JUMPI POP DUP2 PUSH2 0x5D5 JUMP JUMPDEST DUP3 MLOAD ISZERO PUSH2 0x1800 JUMPI DUP3 MLOAD DUP1 DUP5 PUSH1 0x20 ADD REVERT JUMPDEST DUP2 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x672 SWAP2 SWAP1 PUSH2 0x1A37 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x1831 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1847 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x5D5 DUP3 PUSH2 0x181A JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1862 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x186B DUP4 PUSH2 0x181A JUMP JUMPDEST SWAP2 POP PUSH2 0x1879 PUSH1 0x20 DUP5 ADD PUSH2 0x181A JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1896 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x189F DUP5 PUSH2 0x181A JUMP JUMPDEST SWAP3 POP PUSH2 0x18AD PUSH1 0x20 DUP6 ADD PUSH2 0x181A JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x18CF JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x18D8 DUP4 PUSH2 0x181A JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x18F7 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x5D5 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1917 JUMPI DUP1 DUP2 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x192F JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1948 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH2 0x1879 PUSH1 0x20 DUP5 ADD PUSH2 0x181A JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x196C JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 CALLDATALOAD SWAP3 POP PUSH2 0x197C PUSH1 0x20 DUP6 ADD PUSH2 0x181A JUMP JUMPDEST SWAP2 POP PUSH2 0x198A PUSH1 0x40 DUP6 ADD PUSH2 0x181A JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x19A8 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP5 CALLDATALOAD SWAP4 POP PUSH2 0x19B8 PUSH1 0x20 DUP7 ADD PUSH2 0x181A JUMP JUMPDEST SWAP3 POP PUSH2 0x19C6 PUSH1 0x40 DUP7 ADD PUSH2 0x181A JUMP JUMPDEST SWAP4 SWAP7 SWAP3 SWAP6 POP SWAP3 SWAP4 PUSH1 0x60 ADD CALLDATALOAD SWAP3 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x19EA JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 CALLDATALOAD SWAP3 POP PUSH2 0x18AD PUSH1 0x20 DUP6 ADD PUSH2 0x181A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1A0B JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH1 0xFF DUP2 AND DUP2 EQ PUSH2 0x5D5 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x1A2D DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x1B87 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x1A56 DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x1B87 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x1A7D JUMPI PUSH2 0x1A7D PUSH2 0x1BEE JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 JUMPDEST DUP1 DUP6 GT ISZERO PUSH2 0x1ABD JUMPI DUP2 PUSH1 0x0 NOT DIV DUP3 GT ISZERO PUSH2 0x1AA3 JUMPI PUSH2 0x1AA3 PUSH2 0x1BEE JUMP JUMPDEST DUP1 DUP6 AND ISZERO PUSH2 0x1AB0 JUMPI SWAP2 DUP2 MUL SWAP2 JUMPDEST SWAP4 DUP5 SHR SWAP4 SWAP1 DUP1 MUL SWAP1 PUSH2 0x1A87 JUMP JUMPDEST POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5D5 PUSH1 0xFF DUP5 AND DUP4 PUSH1 0x0 DUP3 PUSH2 0x1ADE JUMPI POP PUSH1 0x1 PUSH2 0x58B JUMP JUMPDEST DUP2 PUSH2 0x1AEB JUMPI POP PUSH1 0x0 PUSH2 0x58B JUMP JUMPDEST DUP2 PUSH1 0x1 DUP2 EQ PUSH2 0x1B01 JUMPI PUSH1 0x2 DUP2 EQ PUSH2 0x1B0B JUMPI PUSH2 0x1B27 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP PUSH2 0x58B JUMP JUMPDEST PUSH1 0xFF DUP5 GT ISZERO PUSH2 0x1B1C JUMPI PUSH2 0x1B1C PUSH2 0x1BEE JUMP JUMPDEST POP POP PUSH1 0x1 DUP3 SHL PUSH2 0x58B JUMP JUMPDEST POP PUSH1 0x20 DUP4 LT PUSH2 0x133 DUP4 LT AND PUSH1 0x4E DUP5 LT PUSH1 0xB DUP5 LT AND OR ISZERO PUSH2 0x1B4A JUMPI POP DUP2 DUP2 EXP PUSH2 0x58B JUMP JUMPDEST PUSH2 0x1B54 DUP4 DUP4 PUSH2 0x1A82 JUMP JUMPDEST DUP1 PUSH1 0x0 NOT DIV DUP3 GT ISZERO PUSH2 0x1B68 JUMPI PUSH2 0x1B68 PUSH2 0x1BEE JUMP JUMPDEST MUL SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0x1B82 JUMPI PUSH2 0x1B82 PUSH2 0x1BEE JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1BA2 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x1B8A JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0xEF0 JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x1BC7 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0x1BE8 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CALLER ORIGIN AND INVALID PUSH22 0x604DF7E9FD7519FAE33A6CBD122CDC5AEB260E0D3EF3 INVALID 0xBB ADD 0xB8 0xF8 PUSH5 0x736F6C6343 STOP ADDMOD DIV STOP CALLER ","sourceMap":"357:1745:10:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1707:125:3;;;:::i;:::-;;;12418:25:11;;;12406:2;12391:18;1707:125:3;;;;;;;;2156:98:1;;;:::i;:::-;;;;;;;:::i;2103:163:3:-;;;;;;:::i;:::-;;:::i;4433:197:1:-;;;;;;:::i;:::-;;:::i;:::-;;;4946:14:11;;4939:22;4921:41;;4909:2;4894:18;4433:197:1;4876:92:11;3465:154:3;;;;;;:::i;:::-;;:::i;3244:106:1:-;3331:12;;3244:106;;5192:286;;;;;;:::i;:::-;;:::i;3093:91::-;;;3175:2;12849:36:11;;12837:2;12822:18;3093:91:1;12804:87:11;1554:103:3;;;-1:-1:-1;;;;;1643:6:3;4078:32:11;4060:51;;4048:2;4033:18;1554:103:3;4015:102:11;5873:234:1;;;;;;:::i;:::-;;:::i;2315:148:3:-;;;;;;:::i;:::-;;:::i;3871:315::-;;;;;;:::i;:::-;;:::i;3408:125:1:-;;;;;;:::i;:::-;-1:-1:-1;;;;;3508:18:1;3482:7;3508:18;;;;;;;;;;;;3408:125;1163:278:10;;;;;;:::i;:::-;;:::i;4229:303:3:-;;;;;;:::i;:::-;;:::i;2367:102:1:-;;;:::i;1445:334:10:-;;;;;;:::i;:::-;;:::i;821:338::-;;;;;;:::i;:::-;;:::i;6594:427:1:-;;;;;;:::i;:::-;;:::i;3729:189::-;;;;;;:::i;:::-;;:::i;3261:150:3:-;;;;;;:::i;:::-;;:::i;4579:369::-;;;;;;:::i;:::-;;:::i;4993:361::-;;;;;;:::i;:::-;;:::i;533:284:10:-;;;;;;:::i;:::-;;:::i;2509:114:3:-;;;;;;:::i;:::-;-1:-1:-1;;;2599:17:3;2509:114;1886:163;;;;;;:::i;:::-;;:::i;2673:161::-;;;;;;:::i;:::-;;:::i;2882:121::-;;;;;;:::i;:::-;;:::i;3976:149:1:-;;;;;;:::i;:::-;;:::i;1707:125:3:-;1794:31;;-1:-1:-1;;;1794:31:3;;1819:4;1794:31;;;4060:51:11;1768:7:3;;1794:6;-1:-1:-1;;;;;1794:16:3;;;;4033:18:11;;1794:31:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1787:38;;1707:125;:::o;2156:98:1:-;2210:13;2242:5;2235:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2156:98;:::o;2103:163:3:-;2182:14;2215:44;2232:6;2240:18;2215:16;:44::i;:::-;2208:51;2103:163;-1:-1:-1;;2103:163:3:o;4433:197:1:-;4516:4;719:10:8;4570:32:1;719:10:8;4586:7:1;4595:6;4570:8;:32::i;:::-;-1:-1:-1;4619:4:1;;4433:197;-1:-1:-1;;;4433:197:1:o;3465:154:3:-;3544:7;3570:42;3587:6;3595:16;3570;:42::i;5192:286:1:-;5319:4;719:10:8;5375:38:1;5391:4;719:10:8;5406:6:1;5375:15;:38::i;:::-;5423:27;5433:4;5439:2;5443:6;5423:9;:27::i;:::-;5467:4;5460:11;;;5192:286;;;;;;:::o;5873:234::-;5961:4;719:10:8;6015:64:1;719:10:8;6031:7:1;6068:10;6040:25;719:10:8;6031:7:1;6040:9;:25::i;:::-;:38;;;;:::i;:::-;6015:8;:64::i;2315:148:3:-;2382:7;2408:24;:22;:24::i;:::-;:48;;2455:1;2408:48;;;-1:-1:-1;;2401:55:3;2315:148;-1:-1:-1;;2315:148:3:o;3871:315::-;3955:7;3992:20;4003:8;3992:10;:20::i;:::-;3982:6;:30;;3974:73;;;;-1:-1:-1;;;3974:73:3;;8663:2:11;3974:73:3;;;8645:21:11;8702:2;8682:18;;;8675:30;8741:32;8721:18;;;8714:60;8791:18;;3974:73:3;;;;;;;;;4058:14;4075:22;4090:6;4075:14;:22::i;:::-;4058:39;-1:-1:-1;4107:48:3;719:10:8;4130:8:3;4140:6;4148;4107:8;:48::i;1163:278:10:-;-1:-1:-1;;;;;3508:18:1;;1243:14:10;3508:18:1;;;;;;;;;;;1309:28:10;1320:6;1328:8;1309:10;:28::i;:::-;;1374:7;1352:19;1362:8;-1:-1:-1;;;;;3508:18:1;3482:7;3508:18;;;;;;;;;;;;3408:125;1352:19:10;:29;;;;:::i;:::-;1343:38;;1406:6;1396;:16;;1388:48;;;;-1:-1:-1;;;1388:48:10;;11360:2:11;1388:48:10;;;11342:21:11;11399:2;11379:18;;;11372:30;-1:-1:-1;;;11418:18:11;;;11411:49;11477:18;;1388:48:10;11332:169:11;1388:48:10;1163:278;;;;;;:::o;4229:303:3:-;4310:7;4407:14;4424:19;4436:6;4424:11;:19::i;:::-;4407:36;-1:-1:-1;4453:48:3;719:10:8;4476:8:3;4486:6;4494;4453:8;:48::i;2367:102:1:-;2423:13;2455:7;2448:14;;;;;:::i;1445:334:10:-;1582:34;;-1:-1:-1;;;1582:34:10;;-1:-1:-1;;;;;4078:32:11;;1582:34:10;;;4060:51:11;1542:14:10;;;;412:42;;1582:24;;4033:18:11;;1582:34:10;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1564:52;;1623:37;1636:6;1644:8;1654:5;1623:12;:37::i;:::-;-1:-1:-1;1675:34:10;;-1:-1:-1;;;1675:34:10;;-1:-1:-1;;;;;4078:32:11;;1675:34:10;;;4060:51:11;1712:7:10;;412:42;;1675:24;;4033:18:11;;1675:34:10;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:44;;;;:::i;:::-;1666:53;;1744:6;1734;:16;;1726:48;;;;-1:-1:-1;;;1726:48:10;;11360:2:11;1726:48:10;;;11342:21:11;11399:2;11379:18;;;11372:30;-1:-1:-1;;;11418:18:11;;;11411:49;11477:18;;1726:48:10;11332:169:11;1726:48:10;1445:334;;;;;;;:::o;821:338::-;960:34;;-1:-1:-1;;;960:34:10;;-1:-1:-1;;;;;4078:32:11;;960:34:10;;;4060:51:11;920:14:10;;;;412:42;;960:24;;4033:18:11;;960:34:10;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;942:52;;1001:39;1016:6;1024:8;1034:5;1001:14;:39::i;6594:427:1:-;6687:4;719:10:8;6687:4:1;6768:25;719:10:8;6785:7:1;6768:9;:25::i;:::-;6741:52;;6831:15;6811:16;:35;;6803:85;;;;-1:-1:-1;;;6803:85:1;;11708:2:11;6803:85:1;;;11690:21:11;11747:2;11727:18;;;11720:30;11786:34;11766:18;;;11759:62;-1:-1:-1;;;11837:18:11;;;11830:35;11882:19;;6803:85:1;11680:227:11;6803:85:1;6922:60;6931:5;6938:7;6966:15;6947:16;:34;6922:8;:60::i;:::-;-1:-1:-1;7010:4:1;;6594:427;-1:-1:-1;;;;6594:427:1:o;3729:189::-;3808:4;719:10:8;3862:28:1;719:10:8;3879:2:1;3883:6;3862:9;:28::i;3261:150:3:-;3336:7;3362:42;3379:6;3387:16;3362;:42::i;4579:369::-;4709:7;4746:18;4758:5;4746:11;:18::i;:::-;4736:6;:28;;4728:72;;;;-1:-1:-1;;;4728:72:3;;8303:2:11;4728:72:3;;;8285:21:11;8342:2;8322:18;;;8315:30;8381:33;8361:18;;;8354:61;8432:18;;4728:72:3;8275:181:11;4728:72:3;4811:14;4828:23;4844:6;4828:15;:23::i;:::-;4811:40;-1:-1:-1;4861:56:3;719:10:8;4885:8:3;4895:5;4902:6;4910;4861:9;:56::i;:::-;4935:6;4579:369;-1:-1:-1;;;;4579:369:3:o;4993:361::-;5121:7;5158:16;5168:5;5158:9;:16::i;:::-;5148:6;:26;;5140:68;;;;-1:-1:-1;;;5140:68:3;;7131:2:11;5140:68:3;;;7113:21:11;7170:2;7150:18;;;7143:30;7209:31;7189:18;;;7182:59;7258:18;;5140:68:3;7103:179:11;5140:68:3;5219:14;5236:21;5250:6;5236:13;:21::i;:::-;5219:38;-1:-1:-1;5267:56:3;719:10:8;5291:8:3;5301:5;5308:6;5316;5267:9;:56::i;533:284:10:-;-1:-1:-1;;;;;3508:18:1;;616:14:10;3508:18:1;;;;;;;;;;;682:31:10;696:6;704:8;682:13;:31::i;1886:163:3:-;1965:14;1998:44;2015:6;2023:18;1998:16;:44::i;2673:161::-;-1:-1:-1;;;;;3508:18:1;;2747:7:3;3508:18:1;;;;;;;;;;;2773:54:3;;2808:18;2773:16;:54::i;2882:121::-;-1:-1:-1;;;;;3508:18:1;;2954:7:3;3508:18:1;;;;;;;;;;;2980:16:3;3408:125:1;3976:149;-1:-1:-1;;;;;4091:18:1;;;4065:7;4091:18;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;3976:149::o;6138:348:3:-;6235:14;6261;6278:13;3331:12:1;;;3244:106;6278:13:3;6261:30;-1:-1:-1;6321:11:3;;6320:159;;6433:46;6447:13;:11;:13::i;:::-;6433:6;;6462;6470:8;6433:13;:46::i;:::-;6320:159;;;6352:62;6370:6;-1:-1:-1;;;;;6370:15:3;;:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;6366:21;;:2;:21;:::i;:::-;3175:2:1;6393:10:3;6389:14;;:2;:14;:::i;:::-;6352:6;;:62;6405:8;6352:13;:62::i;10110:370:1:-;-1:-1:-1;;;;;10241:19:1;;10233:68;;;;-1:-1:-1;;;10233:68:1;;10186:2:11;10233:68:1;;;10168:21:11;10225:2;10205:18;;;10198:30;10264:34;10244:18;;;10237:62;-1:-1:-1;;;10315:18:11;;;10308:34;10359:19;;10233:68:1;10158:226:11;10233:68:1;-1:-1:-1;;;;;10319:21:1;;10311:68;;;;-1:-1:-1;;;10311:68:1;;6370:2:11;10311:68:1;;;6352:21:11;6409:2;6389:18;;;6382:30;6448:34;6428:18;;;6421:62;-1:-1:-1;;;6499:18:11;;;6492:32;6541:19;;10311:68:1;6342:224:11;10311:68:1;-1:-1:-1;;;;;10390:18:1;;;;;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;:36;;;10441:32;;12418:25:11;;;10441:32:1;;12391:18:11;10441:32:1;;;;;;;10110:370;;;:::o;5651:363:3:-;5748:14;5774;5791:13;3331:12:1;;;3244:106;5791:13:3;5774:30;-1:-1:-1;5834:11:3;;;:26;;-1:-1:-1;5849:11:3;;5834:26;5833:174;;5961:46;5975:6;5983:13;:11;:13::i;5833:174::-;5880:62;5894:14;3175:2:1;5894::3;:14;:::i;:::-;5914:6;-1:-1:-1;;;;;5914:15:3;;:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;10761:441:1:-;10891:24;10918:25;10928:5;10935:7;10918:9;:25::i;:::-;10891:52;;-1:-1:-1;;10957:16:1;:37;10953:243;;11038:6;11018:16;:26;;11010:68;;;;-1:-1:-1;;;11010:68:1;;6773:2:11;11010:68:1;;;6755:21:11;6812:2;6792:18;;;6785:30;6851:31;6831:18;;;6824:59;6900:18;;11010:68:1;6745:179:11;11010:68:1;11120:51;11129:5;11136:7;11164:6;11145:16;:25;11120:8;:51::i;:::-;10761:441;;;;:::o;7475:651::-;-1:-1:-1;;;;;7601:18:1;;7593:68;;;;-1:-1:-1;;;7593:68:1;;9780:2:11;7593:68:1;;;9762:21:11;9819:2;9799:18;;;9792:30;9858:34;9838:18;;;9831:62;-1:-1:-1;;;9909:18:11;;;9902:35;9954:19;;7593:68:1;9752:227:11;7593:68:1;-1:-1:-1;;;;;7679:16:1;;7671:64;;;;-1:-1:-1;;;7671:64:1;;5563:2:11;7671:64:1;;;5545:21:11;5602:2;5582:18;;;5575:30;5641:34;5621:18;;;5614:62;-1:-1:-1;;;5692:18:11;;;5685:33;5735:19;;7671:64:1;5535:225:11;7671:64:1;-1:-1:-1;;;;;7817:15:1;;7795:19;7817:15;;;;;;;;;;;7850:21;;;;7842:72;;;;-1:-1:-1;;;7842:72:1;;7489:2:11;7842:72:1;;;7471:21:11;7528:2;7508:18;;;7501:30;7567:34;7547:18;;;7540:62;-1:-1:-1;;;7618:18:11;;;7611:36;7664:19;;7842:72:1;7461:228:11;7842:72:1;-1:-1:-1;;;;;7948:15:1;;;:9;:15;;;;;;;;;;;7966:20;;;7948:38;;8006:13;;;;;;;;:23;;7980:6;;7948:9;8006:23;;7980:6;;8006:23;:::i;:::-;;;;;;;;8060:2;-1:-1:-1;;;;;8045:26:1;8054:4;-1:-1:-1;;;;;8045:26:1;;8064:6;8045:26;;;;12418:25:11;;12406:2;12391:18;;12373:76;8045:26:1;;;;;;;;8082:37;11786:121;8404:125:3;8460:4;8499:1;8483:13;:11;:13::i;:::-;:17;:39;;;-1:-1:-1;;3331:12:1;;8504:18:3;;8404:125::o;6550:868::-;7256:65;7283:6;7291;7307:4;7314:6;7256:26;:65::i;:::-;7331:23;7337:8;7347:6;7331:5;:23::i;:::-;7386:8;-1:-1:-1;;;;;7370:41:3;7378:6;-1:-1:-1;;;;;7370:41:3;;7396:6;7404;7370:41;;;;;;12628:25:11;;;12684:2;12669:18;;12662:34;12616:2;12601:18;;12583:119;7370:41:3;;;;;;;;6550:868;;;;:::o;7485:913::-;7672:5;-1:-1:-1;;;;;7662:15:3;:6;-1:-1:-1;;;;;7662:15:3;;7658:84;;7693:38;7709:5;7716:6;7724;7693:15;:38::i;:::-;8248:20;8254:5;8261:6;8248:5;:20::i;:::-;8278:48;8301:6;8309:8;8319:6;8278:22;:48::i;:::-;8369:5;-1:-1:-1;;;;;8342:49:3;8359:8;-1:-1:-1;;;;;8342:49:3;8351:6;-1:-1:-1;;;;;8342:49:3;;8376:6;8384;8342:49;;;;;;12628:25:11;;;12684:2;12669:18;;12662:34;12616:2;12601:18;;12583:119;8342:49:3;;;;;;;;7485:913;;;;;:::o;5725:337:9:-;5864:7;5883:14;5900:25;5907:1;5910;5913:11;5900:6;:25::i;:::-;5883:42;-1:-1:-1;5951:11:9;5939:8;:23;;;;;;-1:-1:-1;;;5939:23:9;;;;;;;;;;:56;;;;;5994:1;5979:11;5966:25;;;-1:-1:-1;;;5966:25:9;;;;;;;;;5976:1;5973;5966:25;:29;5939:56;5935:98;;;6011:11;6021:1;6011:11;;:::i;:::-;;;5935:98;6049:6;5725:337;-1:-1:-1;;;;;5725:337:9:o;11786:121:1:-;;;;:::o;974:241:6:-;1139:68;;-1:-1:-1;;;;;4380:15:11;;;1139:68:6;;;4362:34:11;4432:15;;4412:18;;;4405:43;4464:18;;;4457:34;;;1112:96:6;;1132:5;;-1:-1:-1;;;1162:27:6;4297:18:11;;1139:68:6;;;;-1:-1:-1;;1139:68:6;;;;;;;;;;;;;;-1:-1:-1;;;;;1139:68:6;-1:-1:-1;;;;;;1139:68:6;;;;;;;;;;1112:19;:96::i;8402:389:1:-;-1:-1:-1;;;;;8485:21:1;;8477:65;;;;-1:-1:-1;;;8477:65:1;;12114:2:11;8477:65:1;;;12096:21:11;12153:2;12133:18;;;12126:30;12192:33;12172:18;;;12165:61;12243:18;;8477:65:1;12086:181:11;8477:65:1;8629:6;8613:12;;:22;;;;;;;:::i;:::-;;;;-1:-1:-1;;;;;;;8645:18:1;;:9;:18;;;;;;;;;;:28;;8667:6;;8645:9;:28;;8667:6;;8645:28;:::i;:::-;;;;-1:-1:-1;;8688:37:1;;12418:25:11;;;-1:-1:-1;;;;;8688:37:1;;;8705:1;;8688:37;;12406:2:11;12391:18;8688:37:1;;;;;;;8402:389;;:::o;9111:576::-;-1:-1:-1;;;;;9194:21:1;;9186:67;;;;-1:-1:-1;;;9186:67:1;;9378:2:11;9186:67:1;;;9360:21:11;9417:2;9397:18;;;9390:30;9456:34;9436:18;;;9429:62;-1:-1:-1;;;9507:18:11;;;9500:31;9548:19;;9186:67:1;9350:223:11;9186:67:1;-1:-1:-1;;;;;9349:18:1;;9324:22;9349:18;;;;;;;;;;;9385:24;;;;9377:71;;;;-1:-1:-1;;;9377:71:1;;5967:2:11;9377:71:1;;;5949:21:11;6006:2;5986:18;;;5979:30;6045:34;6025:18;;;6018:62;-1:-1:-1;;;6096:18:11;;;6089:32;6138:19;;9377:71:1;5939:224:11;9377:71:1;-1:-1:-1;;;;;9482:18:1;;:9;:18;;;;;;;;;;9503:23;;;9482:44;;9546:12;:22;;9520:6;;9482:9;9546:22;;9520:6;;9546:22;:::i;:::-;;;;-1:-1:-1;;9584:37:1;;12418:25:11;;;9610:1:1;;-1:-1:-1;;;;;9584:37:1;;;;;12406:2:11;12391:18;9584:37:1;;;;;;;11786:121;;;:::o;763:205:6:-;902:58;;-1:-1:-1;;;;;4694:32:11;;902:58:6;;;4676:51:11;4743:18;;;4736:34;;;875:86:6;;895:5;;-1:-1:-1;;;925:23:6;4649:18:11;;902:58:6;4631:145:11;1668:3925:9;1780:14;;;-1:-1:-1;;2317:1:9;2314;2307:20;2360:1;2357;2353:9;2344:18;;2415:5;2411:2;2408:13;2400:5;2396:2;2392:14;2388:34;2379:43;;;2517:5;2526:1;2517:10;2513:75;;;2562:11;2554:5;:19;;;-1:-1:-1;;;2554:19:9;;;;;;;;;;2547:26;;;;;;2513:75;2712:5;2698:11;:19;2690:28;;;;;;2974:17;3109:11;3106:1;3103;3096:25;4487:1;3657;3642:12;;:16;;3627:32;;3762:22;;;;4468:1;:15;;4467:21;;4720;;;4716:25;;4705:36;4789:21;;;4785:25;;4774:36;4859:21;;;4855:25;;4844:36;4929:21;;;4925:25;;4914:36;4999:21;;;4995:25;;4984:36;5070:21;;;5066:25;;;5055:36;;;3612:12;4007;;;4003:23;;;3999:31;;;3223:20;;;3212:32;;;4119:12;;;;3270:21;;3860:16;;;;4110:21;;;;5534:15;;;-1:-1:-1;;;;1668:3925:9:o;3747:706:6:-;4166:23;4192:69;4220:4;4192:69;;;;;;;;;;;;;;;;;4200:5;-1:-1:-1;;;;;4192:27:6;;;:69;;;;;:::i;:::-;4275:17;;4166:95;;-1:-1:-1;4275:21:6;4271:176;;4370:10;4359:30;;;;;;;;;;;;:::i;:::-;4351:85;;;;-1:-1:-1;;;4351:85:6;;10949:2:11;4351:85:6;;;10931:21:11;10988:2;10968:18;;;10961:30;11027:34;11007:18;;;11000:62;-1:-1:-1;;;11078:18:11;;;11071:40;11128:19;;4351:85:6;10921:232:11;3861:223:7;3994:12;4025:52;4047:6;4055:4;4061:1;4064:12;3994;-1:-1:-1;;;;;1465:19:7;;;5228:60;;;;-1:-1:-1;;;5228:60:7;;10591:2:11;5228:60:7;;;10573:21:11;10630:2;10610:18;;;10603:30;10669:31;10649:18;;;10642:59;10718:18;;5228:60:7;10563:179:11;5228:60:7;5300:12;5314:23;5341:6;-1:-1:-1;;;;;5341:11:7;5360:5;5367:4;5341:31;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5299:73;;;;5389:51;5406:7;5415:10;5427:12;5389:16;:51::i;:::-;5382:58;4948:499;-1:-1:-1;;;;;;;4948:499:7:o;7561:742::-;7707:12;7735:7;7731:566;;;-1:-1:-1;7765:10:7;7758:17;;7731:566;7876:17;;:21;7872:415;;8120:10;8114:17;8180:15;8167:10;8163:2;8159:19;8152:44;8069:145;8259:12;8252:20;;-1:-1:-1;;;8252:20:7;;;;;;;;:::i;14:173:11:-;82:20;;-1:-1:-1;;;;;131:31:11;;121:42;;111:2;;177:1;174;167:12;111:2;63:124;;;:::o;192:196::-;251:6;304:2;292:9;283:7;279:23;275:32;272:2;;;325:6;317;310:22;272:2;353:29;372:9;353:29;:::i;393:270::-;461:6;469;522:2;510:9;501:7;497:23;493:32;490:2;;;543:6;535;528:22;490:2;571:29;590:9;571:29;:::i;:::-;561:39;;619:38;653:2;642:9;638:18;619:38;:::i;:::-;609:48;;480:183;;;;;:::o;668:338::-;745:6;753;761;814:2;802:9;793:7;789:23;785:32;782:2;;;835:6;827;820:22;782:2;863:29;882:9;863:29;:::i;:::-;853:39;;911:38;945:2;934:9;930:18;911:38;:::i;:::-;901:48;;996:2;985:9;981:18;968:32;958:42;;772:234;;;;;:::o;1011:264::-;1079:6;1087;1140:2;1128:9;1119:7;1115:23;1111:32;1108:2;;;1161:6;1153;1146:22;1108:2;1189:29;1208:9;1189:29;:::i;:::-;1179:39;1265:2;1250:18;;;;1237:32;;-1:-1:-1;;;1098:177:11:o;1280:297::-;1347:6;1400:2;1388:9;1379:7;1375:23;1371:32;1368:2;;;1421:6;1413;1406:22;1368:2;1458:9;1452:16;1511:5;1504:13;1497:21;1490:5;1487:32;1477:2;;1538:6;1530;1523:22;1582:190;1641:6;1694:2;1682:9;1673:7;1669:23;1665:32;1662:2;;;1715:6;1707;1700:22;1662:2;-1:-1:-1;1743:23:11;;1652:120;-1:-1:-1;1652:120:11:o;1777:194::-;1847:6;1900:2;1888:9;1879:7;1875:23;1871:32;1868:2;;;1921:6;1913;1906:22;1868:2;-1:-1:-1;1949:16:11;;1858:113;-1:-1:-1;1858:113:11:o;1976:264::-;2044:6;2052;2105:2;2093:9;2084:7;2080:23;2076:32;2073:2;;;2126:6;2118;2111:22;2073:2;2167:9;2154:23;2144:33;;2196:38;2230:2;2219:9;2215:18;2196:38;:::i;2245:338::-;2322:6;2330;2338;2391:2;2379:9;2370:7;2366:23;2362:32;2359:2;;;2412:6;2404;2397:22;2359:2;2453:9;2440:23;2430:33;;2482:38;2516:2;2505:9;2501:18;2482:38;:::i;:::-;2472:48;;2539:38;2573:2;2562:9;2558:18;2539:38;:::i;:::-;2529:48;;2349:234;;;;;:::o;2588:407::-;2674:6;2682;2690;2698;2751:3;2739:9;2730:7;2726:23;2722:33;2719:2;;;2773:6;2765;2758:22;2719:2;2814:9;2801:23;2791:33;;2843:38;2877:2;2866:9;2862:18;2843:38;:::i;:::-;2833:48;;2900:38;2934:2;2923:9;2919:18;2900:38;:::i;:::-;2709:286;;;;-1:-1:-1;2890:48:11;;2985:2;2970:18;2957:32;;-1:-1:-1;;2709:286:11:o;3000:332::-;3077:6;3085;3093;3146:2;3134:9;3125:7;3121:23;3117:32;3114:2;;;3167:6;3159;3152:22;3114:2;3208:9;3195:23;3185:33;;3237:38;3271:2;3260:9;3256:18;3237:38;:::i;3337:293::-;3405:6;3458:2;3446:9;3437:7;3433:23;3429:32;3426:2;;;3479:6;3471;3464:22;3426:2;3516:9;3510:16;3566:4;3559:5;3555:16;3548:5;3545:27;3535:2;;3591:6;3583;3576:22;3635:274;3764:3;3802:6;3796:13;3818:53;3864:6;3859:3;3852:4;3844:6;3840:17;3818:53;:::i;:::-;3887:16;;;;;3772:137;-1:-1:-1;;3772:137:11:o;4973:383::-;5122:2;5111:9;5104:21;5085:4;5154:6;5148:13;5197:6;5192:2;5181:9;5177:18;5170:34;5213:66;5272:6;5267:2;5256:9;5252:18;5247:2;5239:6;5235:15;5213:66;:::i;:::-;5340:2;5319:15;-1:-1:-1;;5315:29:11;5300:45;;;;5347:2;5296:54;;5094:262;-1:-1:-1;;5094:262:11:o;12896:128::-;12936:3;12967:1;12963:6;12960:1;12957:13;12954:2;;;12973:18;;:::i;:::-;-1:-1:-1;13009:9:11;;12944:80::o;13029:422::-;13118:1;13161:5;13118:1;13175:270;13196:7;13186:8;13183:21;13175:270;;;13255:4;13251:1;13247:6;13243:17;13237:4;13234:27;13231:2;;;13264:18;;:::i;:::-;13314:7;13304:8;13300:22;13297:2;;;13334:16;;;;13297:2;13413:22;;;;13373:15;;;;13175:270;;;13179:3;13093:358;;;;;:::o;13456:140::-;13514:5;13543:47;13584:4;13574:8;13570:19;13564:4;13650:5;13680:8;13670:2;;-1:-1:-1;13721:1:11;13735:5;;13670:2;13769:4;13759:2;;-1:-1:-1;13806:1:11;13820:5;;13759:2;13851:4;13869:1;13864:59;;;;13937:1;13932:130;;;;13844:218;;13864:59;13894:1;13885:10;;13908:5;;;13932:130;13969:3;13959:8;13956:17;13953:2;;;13976:18;;:::i;:::-;-1:-1:-1;;14032:1:11;14018:16;;14047:5;;13844:218;;14146:2;14136:8;14133:16;14127:3;14121:4;14118:13;14114:36;14108:2;14098:8;14095:16;14090:2;14084:4;14081:12;14077:35;14074:77;14071:2;;;-1:-1:-1;14183:19:11;;;14215:5;;14071:2;14262:34;14287:8;14281:4;14262:34;:::i;:::-;14332:6;14328:1;14324:6;14320:19;14311:7;14308:32;14305:2;;;14343:18;;:::i;:::-;14381:20;;13660:747;-1:-1:-1;;;13660:747:11:o;14412:125::-;14452:4;14480:1;14477;14474:8;14471:2;;;14485:18;;:::i;:::-;-1:-1:-1;14522:9:11;;14461:76::o;14542:258::-;14614:1;14624:113;14638:6;14635:1;14632:13;14624:113;;;14714:11;;;14708:18;14695:11;;;14688:39;14660:2;14653:10;14624:113;;;14755:6;14752:1;14749:13;14746:2;;;-1:-1:-1;;14790:1:11;14772:16;;14765:27;14595:205::o;14805:380::-;14884:1;14880:12;;;;14927;;;14948:2;;15002:4;14994:6;14990:17;14980:27;;14948:2;15055;15047:6;15044:14;15024:18;15021:38;15018:2;;;15101:10;15096:3;15092:20;15089:1;15082:31;15136:4;15133:1;15126:15;15164:4;15161:1;15154:15;15018:2;;14860:325;;;:::o;15190:127::-;15251:10;15246:3;15242:20;15239:1;15232:31;15282:4;15279:1;15272:15;15306:4;15303:1;15296:15"},"gasEstimates":{"creation":{"codeDepositCost":"1445200","executionCost":"infinite","totalCost":"infinite"},"external":{"allowance(address,address)":"infinite","approve(address,uint256)":"22547","asset()":"infinite","balanceOf(address)":"1318","convertToAssets(uint256)":"infinite","convertToShares(uint256)":"infinite","decimals()":"223","decreaseAllowance(address,uint256)":"23595","deposit(uint256,address)":"infinite","deposit(uint256,address,uint256)":"infinite","increaseAllowance(address,uint256)":"23668","maxDeposit(address)":"infinite","maxMint(address)":"436","maxRedeem(address)":"1329","maxWithdraw(address)":"infinite","mint(uint256,address)":"infinite","mint(uint256,address,uint256)":"infinite","name()":"infinite","previewDeposit(uint256)":"infinite","previewMint(uint256)":"infinite","previewRedeem(uint256)":"infinite","previewWithdraw(uint256)":"infinite","redeem(uint256,address,address)":"infinite","redeem(uint256,address,address,uint256)":"infinite","symbol()":"infinite","totalAssets()":"infinite","totalSupply()":"1071","transfer(address,uint256)":"44449","transferFrom(address,address,uint256)":"infinite","withdraw(uint256,address,address)":"infinite","withdraw(uint256,address,address,uint256)":"infinite"}},"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","asset()":"38d52e0f","balanceOf(address)":"70a08231","convertToAssets(uint256)":"07a2d13a","convertToShares(uint256)":"c6e6f592","decimals()":"313ce567","decreaseAllowance(address,uint256)":"a457c2d7","deposit(uint256,address)":"6e553f65","deposit(uint256,address,uint256)":"bc157ac1","increaseAllowance(address,uint256)":"39509351","maxDeposit(address)":"402d267d","maxMint(address)":"c63d75b6","maxRedeem(address)":"d905777e","maxWithdraw(address)":"ce96cb77","mint(uint256,address)":"94bf804d","mint(uint256,address,uint256)":"836a1040","name()":"06fdde03","previewDeposit(uint256)":"ef8b30f7","previewMint(uint256)":"b3d7f6b9","previewRedeem(uint256)":"4cdad506","previewWithdraw(uint256)":"0a28a477","redeem(uint256,address,address)":"ba087652","redeem(uint256,address,address,uint256)":"9f40a7b3","symbol()":"95d89b41","totalAssets()":"01e1d114","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd","withdraw(uint256,address,address)":"b460af94","withdraw(uint256,address,address,uint256)":"a318c1a4"}},"metadata":"{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"asset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"convertToAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"convertToShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minOut\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"maxRedeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"maxWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minOut\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"previewDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"previewMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"previewRedeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"previewWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minOut\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minOut\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"asset()\":{\"details\":\"See {IERC4262-asset}. \"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"convertToAssets(uint256)\":{\"details\":\"See {IERC4262-convertToAssets}. \"},\"convertToShares(uint256)\":{\"details\":\"See {IERC4262-convertToShares}. \"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"deposit(uint256,address)\":{\"details\":\"See {IERC4262-deposit}. \"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"maxDeposit(address)\":{\"details\":\"See {IERC4262-maxDeposit}. \"},\"maxMint(address)\":{\"details\":\"See {IERC4262-maxMint}. \"},\"maxRedeem(address)\":{\"details\":\"See {IERC4262-maxRedeem}. \"},\"maxWithdraw(address)\":{\"details\":\"See {IERC4262-maxWithdraw}. \"},\"mint(uint256,address)\":{\"details\":\"See {IERC4262-mint}. \"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"previewDeposit(uint256)\":{\"details\":\"See {IERC4262-previewDeposit}. \"},\"previewMint(uint256)\":{\"details\":\"See {IERC4262-previewMint}. \"},\"previewRedeem(uint256)\":{\"details\":\"See {IERC4262-previewRedeem}. \"},\"previewWithdraw(uint256)\":{\"details\":\"See {IERC4262-previewWithdraw}. \"},\"redeem(uint256,address,address)\":{\"details\":\"See {IERC4262-redeem}. \"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalAssets()\":{\"details\":\"See {IERC4262-totalAssets}. \"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"},\"withdraw(uint256,address,address)\":{\"details\":\"See {IERC4262-withdraw}. \"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Drip.sol\":\"DRIP\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC4626.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (interfaces/IERC4626.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\nimport \\\"../token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\n/**\\n * @dev Interface of the ERC4626 \\\"Tokenized Vault Standard\\\", as defined in\\n * https://eips.ethereum.org/EIPS/eip-4626[ERC-4626].\\n *\\n * _Available since v4.7._\\n */\\ninterface IERC4626 is IERC20, IERC20Metadata {\\n    event Deposit(address indexed caller, address indexed owner, uint256 assets, uint256 shares);\\n\\n    event Withdraw(\\n        address indexed caller,\\n        address indexed receiver,\\n        address indexed owner,\\n        uint256 assets,\\n        uint256 shares\\n    );\\n\\n    /**\\n     * @dev Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing.\\n     *\\n     * - MUST be an ERC-20 token contract.\\n     * - MUST NOT revert.\\n     */\\n    function asset() external view returns (address assetTokenAddress);\\n\\n    /**\\n     * @dev Returns the total amount of the underlying asset that is \\u201cmanaged\\u201d by Vault.\\n     *\\n     * - SHOULD include any compounding that occurs from yield.\\n     * - MUST be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT revert.\\n     */\\n    function totalAssets() external view returns (uint256 totalManagedAssets);\\n\\n    /**\\n     * @dev Returns the amount of shares that the Vault would exchange for the amount of assets provided, in an ideal\\n     * scenario where all the conditions are met.\\n     *\\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT show any variations depending on the caller.\\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: This calculation MAY NOT reflect the \\u201cper-user\\u201d price-per-share, and instead should reflect the\\n     * \\u201caverage-user\\u2019s\\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\\n     * from.\\n     */\\n    function convertToShares(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an ideal\\n     * scenario where all the conditions are met.\\n     *\\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT show any variations depending on the caller.\\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: This calculation MAY NOT reflect the \\u201cper-user\\u201d price-per-share, and instead should reflect the\\n     * \\u201caverage-user\\u2019s\\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\\n     * from.\\n     */\\n    function convertToAssets(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Returns the maximum amount of the underlying asset that can be deposited into the Vault for the receiver,\\n     * through a deposit call.\\n     *\\n     * - MUST return a limited value if receiver is subject to some deposit limit.\\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited.\\n     * - MUST NOT revert.\\n     */\\n    function maxDeposit(address receiver) external view returns (uint256 maxAssets);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given\\n     * current on-chain conditions.\\n     *\\n     * - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit\\n     *   call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called\\n     *   in the same transaction.\\n     * - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the\\n     *   deposit would be accepted, regardless if the user has enough tokens approved, etc.\\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\\n     */\\n    function previewDeposit(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Mints shares Vault shares to receiver by depositing exactly amount of underlying tokens.\\n     *\\n     * - MUST emit the Deposit event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   deposit execution, and are accounted for during deposit.\\n     * - MUST revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not\\n     *   approving enough underlying tokens to the Vault contract, etc).\\n     *\\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault\\u2019s underlying asset token.\\n     */\\n    function deposit(uint256 assets, address receiver) external returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the maximum amount of the Vault shares that can be minted for the receiver, through a mint call.\\n     * - MUST return a limited value if receiver is subject to some mint limit.\\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted.\\n     * - MUST NOT revert.\\n     */\\n    function maxMint(address receiver) external view returns (uint256 maxShares);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given\\n     * current on-chain conditions.\\n     *\\n     * - MUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call\\n     *   in the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the\\n     *   same transaction.\\n     * - MUST NOT account for mint limits like those returned from maxMint and should always act as though the mint\\n     *   would be accepted, regardless if the user has enough tokens approved, etc.\\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by minting.\\n     */\\n    function previewMint(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens.\\n     *\\n     * - MUST emit the Deposit event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the mint\\n     *   execution, and are accounted for during mint.\\n     * - MUST revert if all of shares cannot be minted (due to deposit limit being reached, slippage, the user not\\n     *   approving enough underlying tokens to the Vault contract, etc).\\n     *\\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault\\u2019s underlying asset token.\\n     */\\n    function mint(uint256 shares, address receiver) external returns (uint256 assets);\\n\\n    /**\\n     * @dev Returns the maximum amount of the underlying asset that can be withdrawn from the owner balance in the\\n     * Vault, through a withdraw call.\\n     *\\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\n     * - MUST NOT revert.\\n     */\\n    function maxWithdraw(address owner) external view returns (uint256 maxAssets);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block,\\n     * given current on-chain conditions.\\n     *\\n     * - MUST return as close to and no fewer than the exact amount of Vault shares that would be burned in a withdraw\\n     *   call in the same transaction. I.e. withdraw should return the same or fewer shares as previewWithdraw if\\n     *   called\\n     *   in the same transaction.\\n     * - MUST NOT account for withdrawal limits like those returned from maxWithdraw and should always act as though\\n     *   the withdrawal would be accepted, regardless if the user has enough shares, etc.\\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\\n     */\\n    function previewWithdraw(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Burns shares from owner and sends exactly assets of underlying tokens to receiver.\\n     *\\n     * - MUST emit the Withdraw event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   withdraw execution, and are accounted for during withdraw.\\n     * - MUST revert if all of assets cannot be withdrawn (due to withdrawal limit being reached, slippage, the owner\\n     *   not having enough shares, etc).\\n     *\\n     * Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\n     * Those methods should be performed separately.\\n     */\\n    function withdraw(\\n        uint256 assets,\\n        address receiver,\\n        address owner\\n    ) external returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the maximum amount of Vault shares that can be redeemed from the owner balance in the Vault,\\n     * through a redeem call.\\n     *\\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\n     * - MUST return balanceOf(owner) if owner is not subject to any withdrawal limit or timelock.\\n     * - MUST NOT revert.\\n     */\\n    function maxRedeem(address owner) external view returns (uint256 maxShares);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their redeemption at the current block,\\n     * given current on-chain conditions.\\n     *\\n     * - MUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call\\n     *   in the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the\\n     *   same transaction.\\n     * - MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the\\n     *   redemption would be accepted, regardless if the user has enough shares, etc.\\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by redeeming.\\n     */\\n    function previewRedeem(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Burns exactly shares from owner and sends assets of underlying tokens to receiver.\\n     *\\n     * - MUST emit the Withdraw event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   redeem execution, and are accounted for during redeem.\\n     * - MUST revert if all of shares cannot be redeemed (due to withdrawal limit being reached, slippage, the owner\\n     *   not having enough shares, etc).\\n     *\\n     * NOTE: some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\n     * Those methods should be performed separately.\\n     */\\n    function redeem(\\n        uint256 shares,\\n        address receiver,\\n        address owner\\n    ) external returns (uint256 assets);\\n}\\n\",\"keccak256\":\"0x9750c6fec736eb3320e85924f36a3060fa4a4ab1758d06d9585e175d164eefdb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x24b04b8aacaaf1a4a0719117b29c9c3647b1f479c5ac2a60f5ff1bb6d839c238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/extensions/ERC4626.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../utils/SafeERC20.sol\\\";\\nimport \\\"../../../interfaces/IERC4626.sol\\\";\\nimport \\\"../../../utils/math/Math.sol\\\";\\n\\n/**\\n * @dev Implementation of the ERC4626 \\\"Tokenized Vault Standard\\\" as defined in\\n * https://eips.ethereum.org/EIPS/eip-4626[EIP-4626].\\n *\\n * This extension allows the minting and burning of \\\"shares\\\" (represented using the ERC20 inheritance) in exchange for\\n * underlying \\\"assets\\\" through standardized {deposit}, {mint}, {redeem} and {burn} workflows. This contract extends\\n * the ERC20 standard. Any additional extensions included along it would affect the \\\"shares\\\" token represented by this\\n * contract and not the \\\"assets\\\" token which is an independent contract.\\n *\\n * CAUTION: Deposits and withdrawals may incur unexpected slippage. Users should verify that the amount received of\\n * shares or assets is as expected. EOAs should operate through a wrapper that performs these checks such as\\n * https://github.com/fei-protocol/ERC4626#erc4626router-and-base[ERC4626Router].\\n *\\n * _Available since v4.7._\\n */\\nabstract contract ERC4626 is ERC20, IERC4626 {\\n    using Math for uint256;\\n\\n    IERC20Metadata private immutable _asset;\\n\\n    /**\\n     * @dev Set the underlying asset contract. This must be an ERC20-compatible contract (ERC20 or ERC777).\\n     */\\n    constructor(IERC20Metadata asset_) {\\n        _asset = asset_;\\n    }\\n\\n    /** @dev See {IERC4262-asset}. */\\n    function asset() public view virtual override returns (address) {\\n        return address(_asset);\\n    }\\n\\n    /** @dev See {IERC4262-totalAssets}. */\\n    function totalAssets() public view virtual override returns (uint256) {\\n        return _asset.balanceOf(address(this));\\n    }\\n\\n    /** @dev See {IERC4262-convertToShares}. */\\n    function convertToShares(uint256 assets) public view virtual override returns (uint256 shares) {\\n        return _convertToShares(assets, Math.Rounding.Down);\\n    }\\n\\n    /** @dev See {IERC4262-convertToAssets}. */\\n    function convertToAssets(uint256 shares) public view virtual override returns (uint256 assets) {\\n        return _convertToAssets(shares, Math.Rounding.Down);\\n    }\\n\\n    /** @dev See {IERC4262-maxDeposit}. */\\n    function maxDeposit(address) public view virtual override returns (uint256) {\\n        return _isVaultCollateralized() ? type(uint256).max : 0;\\n    }\\n\\n    /** @dev See {IERC4262-maxMint}. */\\n    function maxMint(address) public view virtual override returns (uint256) {\\n        return type(uint256).max;\\n    }\\n\\n    /** @dev See {IERC4262-maxWithdraw}. */\\n    function maxWithdraw(address owner) public view virtual override returns (uint256) {\\n        return _convertToAssets(balanceOf(owner), Math.Rounding.Down);\\n    }\\n\\n    /** @dev See {IERC4262-maxRedeem}. */\\n    function maxRedeem(address owner) public view virtual override returns (uint256) {\\n        return balanceOf(owner);\\n    }\\n\\n    /** @dev See {IERC4262-previewDeposit}. */\\n    function previewDeposit(uint256 assets) public view virtual override returns (uint256) {\\n        return _convertToShares(assets, Math.Rounding.Down);\\n    }\\n\\n    /** @dev See {IERC4262-previewMint}. */\\n    function previewMint(uint256 shares) public view virtual override returns (uint256) {\\n        return _convertToAssets(shares, Math.Rounding.Up);\\n    }\\n\\n    /** @dev See {IERC4262-previewWithdraw}. */\\n    function previewWithdraw(uint256 assets) public view virtual override returns (uint256) {\\n        return _convertToShares(assets, Math.Rounding.Up);\\n    }\\n\\n    /** @dev See {IERC4262-previewRedeem}. */\\n    function previewRedeem(uint256 shares) public view virtual override returns (uint256) {\\n        return _convertToAssets(shares, Math.Rounding.Down);\\n    }\\n\\n    /** @dev See {IERC4262-deposit}. */\\n    function deposit(uint256 assets, address receiver) public virtual override returns (uint256) {\\n        require(assets <= maxDeposit(receiver), \\\"ERC4626: deposit more than max\\\");\\n\\n        uint256 shares = previewDeposit(assets);\\n        _deposit(_msgSender(), receiver, assets, shares);\\n\\n        return shares;\\n    }\\n\\n    /** @dev See {IERC4262-mint}. */\\n    function mint(uint256 shares, address receiver) public virtual override returns (uint256) {\\n        require(shares <= maxMint(receiver), \\\"ERC4626: mint more than max\\\");\\n\\n        uint256 assets = previewMint(shares);\\n        _deposit(_msgSender(), receiver, assets, shares);\\n\\n        return assets;\\n    }\\n\\n    /** @dev See {IERC4262-withdraw}. */\\n    function withdraw(\\n        uint256 assets,\\n        address receiver,\\n        address owner\\n    ) public virtual override returns (uint256) {\\n        require(assets <= maxWithdraw(owner), \\\"ERC4626: withdraw more than max\\\");\\n\\n        uint256 shares = previewWithdraw(assets);\\n        _withdraw(_msgSender(), receiver, owner, assets, shares);\\n\\n        return shares;\\n    }\\n\\n    /** @dev See {IERC4262-redeem}. */\\n    function redeem(\\n        uint256 shares,\\n        address receiver,\\n        address owner\\n    ) public virtual override returns (uint256) {\\n        require(shares <= maxRedeem(owner), \\\"ERC4626: redeem more than max\\\");\\n\\n        uint256 assets = previewRedeem(shares);\\n        _withdraw(_msgSender(), receiver, owner, assets, shares);\\n\\n        return assets;\\n    }\\n\\n    /**\\n     * @dev Internal conversion function (from assets to shares) with support for rounding direction.\\n     *\\n     * Will revert if assets > 0, totalSupply > 0 and totalAssets = 0. That corresponds to a case where any asset\\n     * would represent an infinite amout of shares.\\n     */\\n    function _convertToShares(uint256 assets, Math.Rounding rounding) internal view virtual returns (uint256 shares) {\\n        uint256 supply = totalSupply();\\n        return\\n            (assets == 0 || supply == 0)\\n                ? assets.mulDiv(10**decimals(), 10**_asset.decimals(), rounding)\\n                : assets.mulDiv(supply, totalAssets(), rounding);\\n    }\\n\\n    /**\\n     * @dev Internal conversion function (from shares to assets) with support for rounding direction.\\n     */\\n    function _convertToAssets(uint256 shares, Math.Rounding rounding) internal view virtual returns (uint256 assets) {\\n        uint256 supply = totalSupply();\\n        return\\n            (supply == 0)\\n                ? shares.mulDiv(10**_asset.decimals(), 10**decimals(), rounding)\\n                : shares.mulDiv(totalAssets(), supply, rounding);\\n    }\\n\\n    /**\\n     * @dev Deposit/mint common workflow.\\n     */\\n    function _deposit(\\n        address caller,\\n        address receiver,\\n        uint256 assets,\\n        uint256 shares\\n    ) internal virtual {\\n        // If _asset is ERC777, `transferFrom` can trigger a reenterancy BEFORE the transfer happens through the\\n        // `tokensToSend` hook. On the other hand, the `tokenReceived` hook, that is triggered after the transfer,\\n        // calls the vault, which is assumed not malicious.\\n        //\\n        // Conclusion: we need to do the transfer before we mint so that any reentrancy would happen before the\\n        // assets are transfered and before the shares are minted, which is a valid state.\\n        // slither-disable-next-line reentrancy-no-eth\\n        SafeERC20.safeTransferFrom(_asset, caller, address(this), assets);\\n        _mint(receiver, shares);\\n\\n        emit Deposit(caller, receiver, assets, shares);\\n    }\\n\\n    /**\\n     * @dev Withdraw/redeem common workflow.\\n     */\\n    function _withdraw(\\n        address caller,\\n        address receiver,\\n        address owner,\\n        uint256 assets,\\n        uint256 shares\\n    ) internal virtual {\\n        if (caller != owner) {\\n            _spendAllowance(owner, caller, shares);\\n        }\\n\\n        // If _asset is ERC777, `transfer` can trigger a reentrancy AFTER the transfer happens through the\\n        // `tokensReceived` hook. On the other hand, the `tokensToSend` hook, that is triggered before the transfer,\\n        // calls the vault, which is assumed not malicious.\\n        //\\n        // Conclusion: we need to do the transfer after the burn so that any reentrancy would happen after the\\n        // shares are burned and after the assets are transfered, which is a valid state.\\n        _burn(owner, shares);\\n        SafeERC20.safeTransfer(_asset, receiver, assets);\\n\\n        emit Withdraw(caller, receiver, owner, assets, shares);\\n    }\\n\\n    function _isVaultCollateralized() private view returns (bool) {\\n        return totalAssets() > 0 || totalSupply() == 0;\\n    }\\n}\\n\",\"keccak256\":\"0x5b2776d0bca58b68e2f78eed93bfdbae602d54e9f7b0509a960064e173e7da7a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x032807210d1d7d218963d7355d62e021a84bf1b3339f4f50be2f63b53cccaf29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. It the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`.\\n        // We also know that `k`, the position of the most significant bit, is such that `msb(a) = 2**k`.\\n        // This gives `2**k < a <= 2**(k+1)` \\u2192 `2**(k/2) <= sqrt(a) < 2 ** (k/2+1)`.\\n        // Using an algorithm similar to the msb conmputation, we are able to compute `result = 2**(k/2)` which is a\\n        // good first aproximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1;\\n        uint256 x = a;\\n        if (x >> 128 > 0) {\\n            x >>= 128;\\n            result <<= 64;\\n        }\\n        if (x >> 64 > 0) {\\n            x >>= 64;\\n            result <<= 32;\\n        }\\n        if (x >> 32 > 0) {\\n            x >>= 32;\\n            result <<= 16;\\n        }\\n        if (x >> 16 > 0) {\\n            x >>= 16;\\n            result <<= 8;\\n        }\\n        if (x >> 8 > 0) {\\n            x >>= 8;\\n            result <<= 4;\\n        }\\n        if (x >> 4 > 0) {\\n            x >>= 4;\\n            result <<= 2;\\n        }\\n        if (x >> 2 > 0) {\\n            result <<= 1;\\n        }\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = sqrt(a);\\n        if (rounding == Rounding.Up && result * result < a) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xd15c3e400531f00203839159b2b8e7209c5158b35618f570c695b7e47f12e9f0\",\"license\":\"MIT\"},\"contracts/Drip.sol\":{\"content\":\"pragma solidity >=0.8.0;\\n\\nimport { ERC4626 } from '@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol';\\nimport { IERC20Metadata } from '@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol';\\nimport { ERC20 } from '@openzeppelin/contracts/token/ERC20/ERC20.sol';\\nimport { IERC20 } from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\ncontract DRIP is ERC4626 {\\n  address constant renbtc = 0xEB4C2781e4ebA804CE9a9803C67d0893436bB27D;\\n\\n  constructor() ERC4626(IERC20Metadata(renbtc)) ERC20(\\\"DRIP\\\", \\\"DRIP\\\") {}\\n\\n  function deposit(uint256 assets, address receiver, uint256 minOut) public returns (uint256 result) {\\n    uint256 balance = balanceOf(receiver);\\n\\n    super.deposit(assets, receiver);\\n    result = balanceOf(receiver) - balance;\\n\\n    require(result >= minOut, \\\"Too little received\\\");\\n  }\\n\\n  function withdraw(uint256 assets, address receiver, address owner, uint256 minOut) public returns (uint256 result) {\\n    uint256 balance = IERC20(renbtc).balanceOf(receiver);\\n\\n    super.withdraw(assets, receiver, owner);\\n    result = IERC20(renbtc).balanceOf(receiver) - balance;\\n\\n    require(result >= minOut, \\\"Too little received\\\");\\n  }\\n\\n  function mint(uint256 shares, address receiver, uint256 minOut) public returns (uint256 result) {\\n    uint256 balance = balanceOf(receiver);\\n\\n    super.mint(shares, receiver);\\n    result = balanceOf(receiver) - balance;\\n\\n    require(result >= minOut, \\\"Too little received\\\");\\n  }\\n\\n  function redeem(uint256 shares, address receiver, address owner, uint256 minOut) public returns (uint256 result) {\\n    uint256 balance = IERC20(renbtc).balanceOf(receiver);\\n\\n    super.redeem(shares, receiver, owner);\\n    result = IERC20(renbtc).balanceOf(receiver) - balance;\\n\\n    require(result >= minOut, \\\"Too little received\\\");\\n  }\\n\\n  // returns total number of assets\\n  // function totalAssets() public view override returns(uint256) {\\n  //   return asset.balanceOf(address(this));\\n  // }\\n\\n  // TODO: _deposit and _withdraw need to interact with curve tricrypto2 to stake and unstake\\n  // TODO: make new mint and redeem functions that include minout\\n\\n\\n}\",\"keccak256\":\"0x937927afb4814ab0c9b07273fcfc9b369230f9d0dd2715b3bdc9516371bb06e0\"}},\"version\":1}","storageLayout":{"storage":[{"astId":183,"contract":"contracts/Drip.sol:DRIP","label":"_balances","offset":0,"slot":"0","type":"t_mapping(t_address,t_uint256)"},{"astId":189,"contract":"contracts/Drip.sol:DRIP","label":"_allowances","offset":0,"slot":"1","type":"t_mapping(t_address,t_mapping(t_address,t_uint256))"},{"astId":191,"contract":"contracts/Drip.sol:DRIP","label":"_totalSupply","offset":0,"slot":"2","type":"t_uint256"},{"astId":193,"contract":"contracts/Drip.sol:DRIP","label":"_name","offset":0,"slot":"3","type":"t_string_storage"},{"astId":195,"contract":"contracts/Drip.sol:DRIP","label":"_symbol","offset":0,"slot":"4","type":"t_string_storage"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_mapping(t_address,t_mapping(t_address,t_uint256))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => uint256))","numberOfBytes":"32","value":"t_mapping(t_address,t_uint256)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}}}}}